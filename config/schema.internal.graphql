 """
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(
  """
  Abstract type of accepted global ID
  """
  abstractType: String

  """
  Accepted types of global IDs.
  """
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

"""
Marks an element of a GraphQL schema as currently under development.
"""
directive @underDevelopment(
  """
  When has this element been marked as under development.
  """
  since: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"""
Marks an element of a GraphQL schema as internal.
"""
directive @internal on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"""
Defines the catalog service mapping for a given part of the GraphQL schema.
"""
directive @serviceMapping(
  """
  A catalog service name
  """
  to: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | INTERFACE | UNION | ENUM | INPUT_OBJECT

"""
Specifies if the given type should be using the next GlobalID format.
"""
directive @useNextGlobalIdFormat(
  """
  Date the given type should begin using the new format.
  """
  after: DateTime!
) on OBJECT

"""
A submitted abuse report.
"""
type AbuseReport implements Node @internal @serviceMapping(to: "github/community_and_safety") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The link to Halp results for reports for this content.
  """
  halpSearchUrl: URI
  id: ID!

  """
  If this AbuseReport is a report of the user's content
  """
  isContentReport: Boolean!

  """
  Whether this AbuseReport has been marked as resolved
  """
  isResolved: Boolean!

  """
  If this AbuseReport is a report of the user
  """
  isUserReport: Boolean!

  """
  The reason this content was reported.
  """
  reason: AbuseReportReason!

  """
  The content that was reported.
  """
  reportedContent: AbuseReportable

  """
  The user who created the reported content.
  """
  reportedUser: User

  """
  The user who reported the content.
  """
  reportingUser: User

  """
  The repository the reported content belongs to.
  """
  repository: Repository

  """
  The repository the reported content belongs to, as shown in Stafftools.
  """
  staffAccessedRepository: StaffAccessedRepository

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The link to Zendesk results for reports for this content.
  """
  zendeskSearchUrl: URI
}

"""
The connection type for AbuseReport.
"""
type AbuseReportConnection @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A list of edges.
  """
  edges: [AbuseReportEdge]

  """
  A list of nodes.
  """
  nodes: [AbuseReport]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AbuseReportEdge @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AbuseReport
}

"""
Filter on whether an abuse report is resolved.
"""
enum AbuseReportFilter @underDevelopment(since: "2019-09-20") @serviceMapping(to: "github/community_and_safety") {
  """
  Return all abuse reports.
  """
  ALL

  """
  Return abuse reports that are marked as resolved.
  """
  RESOLVED

  """
  Return abuse reports that are not marked as resolved.
  """
  UNRESOLVED
}

"""
Ordering options for abuse report connections.
"""
input AbuseReportOrder @internal @serviceMapping(to: "github/community_and_safety") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order abuse reports by.
  """
  field: AbuseReportOrderField!
}

"""
Properties by which abuse report connections can be ordered.
"""
enum AbuseReportOrderField @internal @serviceMapping(to: "github/community_and_safety") {
  """
  Order abuse reports by when they were created.
  """
  CREATED_AT
}

"""
The reason a piece of content can be reported for abuse.
"""
enum AbuseReportReason @internal @serviceMapping(to: "github/community_and_safety") {
  """
  An abusive or harassing piece of content
  """
  ABUSE

  """
  An irrelevant piece of content
  """
  OFF_TOPIC

  """
  A spammy piece of content
  """
  SPAM

  """
  A reason was not specified
  """
  UNSPECIFIED
}

"""
Entities that can be reported.
"""
interface AbuseReportable @internal @serviceMapping(to: "github/community_and_safety") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  the top reported reason for this content
  """
  topReportReason: String @internal
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the invitation being accepted
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of AcceptEnterpriseOrganizationInvitation
"""
input AcceptEnterpriseOrganizationInvitationInput
  @underDevelopment(since: "2019-07-01")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise organization invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseOrganizationInvitation"])
}

"""
Autogenerated return type of AcceptEnterpriseOrganizationInvitation
"""
type AcceptEnterpriseOrganizationInvitationPayload
  @underDevelopment(since: "2019-07-01")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was accepted.
  """
  invitation: EnterpriseOrganizationInvitation
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The accepted topic.
  """
  topic: Topic
}

"""
Users, organizations, and enterprise accounts.
"""
union Account @internal = Bot | Enterprise | Mannequin | Organization | User

"""
The connection type for Account.
"""
type AccountConnection @internal {
  """
  A list of edges.
  """
  edges: [AccountEdge]

  """
  A list of nodes.
  """
  nodes: [Account]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AccountEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Account
}

"""
Audit log entry for a account.plan_change event.
"""
type AccountPlanChangeAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The applied coupon.
  """
  coupon: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The number of Git LFS Data packs applicable.
  """
  dataPackCount: Int

  """
  The previous number of Git LFS Data packs.
  """
  dataPackCountWas: Int

  """
  Did the plan change.
  """
  didPlanChange: Boolean! @internal

  """
  Did the plan duration change.
  """
  didPlanDurationChange: Boolean! @internal

  """
  Did the plan change adjust pricing model to per repo.
  """
  didPricingChangeToPerRepo: Boolean! @internal

  """
  Did the plan change adjust the pricing model to per seat.
  """
  didPricingChangeToPerSeat: Boolean! @internal

  """
  Did the plan change adjust the number of seats.
  """
  didSeatCountChange: Boolean! @internal

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The number of filled seats.
  """
  filledSeatCount: Int @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  A note related to this plan change.
  """
  note: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The billing cycle duration.
  """
  planDuration: AccountPlanChangeAuditEntryDuration

  """
  The previous billing cycle duration.
  """
  planDurationWas: AccountPlanChangeAuditEntryDuration

  """
  The plan name.
  """
  planName: String

  """
  The previous plan name.
  """
  planNameWas: String

  """
  The number of private repositories.
  """
  privateRepositoryCount: Int @internal

  """
  The number of public repositories.
  """
  publicRepositoryCount: Int @internal

  """
  A human readable reason for this plan change.
  """
  reason: String @internal

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The number of seats.
  """
  seatCount: Int

  """
  The previous number of seats.
  """
  seatCountWas: Int

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The number of teams.
  """
  teamCount: Int @internal

  """
  The signature for the applicable Terms of Service for this account.
  """
  termsOfServiceSha: String @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The plan duration of a billing subscription.
"""
enum AccountPlanChangeAuditEntryDuration
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  The Subscription is billed monthly.
  """
  MONTH

  """
  The Subscription is billed yearly.
  """
  YEAR
}

"""
Common stafftools info fields for user and organization accounts.
"""
interface AccountStafftoolsInfo @internal @serviceMapping(to: "github/account_management_stafftools") {
  """
  Total number of actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned
  orgs. -1 means a timeout occured and the account may have many actions run
  """
  actionWorkflowsRunCount: Int!

  """
  The number of repositories this account is associated with.
  """
  associatedRepositoriesCount(
    """
    Array of owner's affiliation options for repository count. For example,
    OWNER will include only repositories that the organization or user being viewed owns.
    """
    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  Has actually paid money to GitHub at some point.
  """
  hasActuallyPaidMoney: Boolean!

  """
  Does the account have a blacklisted payment method.
  """
  hasBlacklistedPaymentMethod: Boolean!

  """
  Account has matching spam pattern on last ip.
  """
  hasMatchingLastIpSpamPattern: Boolean!

  """
  Account has newer non-spammy ip neighbor.
  """
  hasNewerNonSpammyIpNeighbor: Boolean!

  """
  Does account have a paid plan.
  """
  hasPaidPlan: Boolean!

  """
  The accounts that show share the same lastIp
  """
  ipNeighbors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_24
  ): AccountConnection

  """
  The number of accounts with the same last ip.
  """
  ipNeighborsCount: Int!

  """
  Is the account classified as a gift account.
  """
  isGiftAccount: Boolean!

  """
  Is the account hammy.
  """
  isHammy: Boolean!

  """
  Can this account be marked as spammy.
  """
  isNeverSpammy: Boolean!

  """
  Is the account spammy.
  """
  isSpammy: Boolean!

  """
  Is the account suspended.
  """
  isSuspended: Boolean!

  """
  Indicates if the account is subject to trade restrictions.
  """
  isTradeRestricted: Boolean!

  """
  The five most recently updated project cards that the user created. Returns
  empty results if timed out querying for project cards
  """
  lastFivePublicProjectCards: [ProjectCard!]!

  """
  The five most recently updated projects that the user created. Returns empty results if timed out querying for projects
  """
  lastFivePublicProjects: [Project!]!

  """
  The ip address for the account recorded when they last logged in.
  """
  lastIp: String

  """
  The networks for this account that have LFS usage, .
  """
  lfsNetworksByUsage(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection

  """
  The repositories for this account that have LFS objects.
  """
  lfsRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!

  """
  Class C reputation.
  """
  networkAddress24Reputation: SpamuraiReputation

  """
  IP address reputation.
  """
  networkAddress32Reputation: SpamuraiReputation

  """
  The number of repositories this account owns.
  """
  ownedRepositoriesCount(
    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  Total actions minutes used in the past month for private repos owned by the
  account. If the account is a user then this includes actions run in private
  repos owned by 25 of the user's most recently created owned orgs. -1 means a
  timeout occured and the account may have many actions run.
  """
  privateActionsMinuteUsage: Int!

  """
  Account profile.
  """
  profile: Profile

  """
  Count of public project cards created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectCardsCount: Int!

  """
  Count of public projects created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectsCount: Int!

  """
  Most recent actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned orgs.
  """
  recentActionWorkflowsRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActionsWorkflowRunStafftoolsInfoConnection!

  """
  The number of spammy accounts with the same last ip.
  """
  spammyIpNeighborsCount: Int!

  """
  The spammy reason.
  """
  spammyReason: String

  """
  Staff notes for account.
  """
  staffNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StaffNoteConnection

  """
  The account time zone.
  """
  timeZone: String
}

"""
Diff used in Actions path filtering
"""
type ActionsFilterDiff @serviceMapping(to: "github/actions") {
  """
  Reason that diff could not be generated
  """
  advisory: String

  """
  Unique paths modified
  """
  paths: [String!]!
}

"""
Represents the entity (User, Organization or Business) used by the Actions Runtime for limiting build concurrency.
"""
type ActionsPlanOwner @internal @serviceMapping(to: "github/actions") {
  """
  The owner's global relay id
  """
  id: ID!

  """
  The name of the owner.
  """
  name: String!

  """
  The name of the plan.
  """
  planName: String!

  """
  The classname of the owner.
  """
  type: String!
}

"""
The status of actions for a repository
"""
type ActionsStatus implements Node @internal @serviceMapping(to: "github/account_management") {
  """
  The error representing why actions are disabled
  """
  error: ActionsStatusError

  """
  ID of the object.
  """
  id: ID!

  """
  Returns whether or not actions are allowed to run
  """
  isAllowed: Boolean!
}

"""
The status of actions for a repository
"""
type ActionsStatusError implements Node @internal @serviceMapping(to: "github/account_management") {
  """
  ID of the object.
  """
  id: ID!

  """
  The message explaining why actions are disabled
  """
  message: String

  """
  The error representing why actions are disabled
  """
  reason: String
}

"""
A common reputation type for Spamurai.
"""
type ActionsWorkflowRunStafftoolsInfo @internal @serviceMapping(to: "github/actions") {
  """
  Commit oid of code used for workflow run.
  """
  commitOid: String

  """
  Link to actions workflow run.
  """
  permalink: String!

  """
  Number of run.
  """
  runNumber: Int!

  """
  Title of workflow run.
  """
  title: String!

  """
  Link to workflow file for run.
  """
  workflowFileLink: String!

  """
  Name of workflow.
  """
  workflowName: String!
}

"""
The connection type for ActionsWorkflowRunStafftoolsInfo.
"""
type ActionsWorkflowRunStafftoolsInfoConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [ActionsWorkflowRunStafftoolsInfoEdge]

  """
  A list of nodes.
  """
  nodes: [ActionsWorkflowRunStafftoolsInfo]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ActionsWorkflowRunStafftoolsInfoEdge @internal @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ActionsWorkflowRunStafftoolsInfo
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The name of the actor.
  """
  name: String @underDevelopment(since: "2019-04-23")

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation @serviceMapping(to: "github/audit_logs") {
  """
  City
  """
  city: String

  """
  Country name
  """
  country: String

  """
  Country code
  """
  countryCode: String

  """
  Latitude
  """
  latitude: Float @internal

  """
  Longitude
  """
  longitude: Float @internal

  """
  Postal or ZIP code
  """
  postalCode: String @internal

  """
  Region name
  """
  region: String

  """
  Region or state code
  """
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType @serviceMapping(to: "github/octoshift") {
  """
  Indicates a team actor.
  """
  TEAM

  """
  Indicates a user actor.
  """
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  """
  The id of the assignable object to add assignees to.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to add as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput @serviceMapping(to: "github/pull_requests") {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the subject's comment connection.
  """
  commentEdge: IssueCommentEdge

  """
  The subject
  """
  subject: Node

  """
  The edge from the subject's timeline connection.
  """
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput @serviceMapping(to: "github/discussions") {
  """
  The contents of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to comment on.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created discussion comment.
  """
  comment: DiscussionComment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-10-30")
}

"""
Autogenerated input type of AddEnterpriseAdmin
"""
input AddEnterpriseAdminInput @internal @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise account to which the administrator should be added.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to add as an administrator.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseAdmin
"""
type AddEnterpriseAdminPayload @internal @serviceMapping(to: "github/admin_experience") {
  """
  The user who was added as an administrator.
  """
  admin: User

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will receive the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of adding the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of AddImportMapping
"""
input AddImportMappingInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The import mappings being processed.
  """
  mappings: [MigrationImportMapping]!

  """
  The ID of a migration to add migration import mapping.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["LegacyMigration"])
}

"""
Autogenerated return type of AddImportMapping
"""
type AddImportMappingPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The target import migration to add mappings to.
  """
  migration: LegacyMigration
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of the labels to add.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-21")

  """
  The item that was labeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of AddMobileDeviceToken
"""
input AddMobileDeviceTokenInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the device.
  """
  deviceName: String

  """
  The device token.
  """
  deviceToken: String!

  """
  The push notification service that issued the device token.
  """
  service: PushNotificationService!
}

"""
Autogenerated return type of AddMobileDeviceToken
"""
type AddMobileDeviceTokenPayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Specifies the attributes for a label to be added or created.
"""
input AddOrCreateLabelsLabelInput @underDevelopment(since: "2018-06-25") @serviceMapping(to: "github/issues") {
  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!
}

"""
Autogenerated input type of AddOrCreateLabelsToLabelable
"""
input AddOrCreateLabelsToLabelableInput @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to add labels to.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")

  """
  The label attributes to add.
  """
  labels: [AddOrCreateLabelsLabelInput!]!
}

"""
Autogenerated return type of AddOrCreateLabelsToLabelable
"""
type AddOrCreateLabelsToLabelablePayload @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-25")

  """
  The item that was labeled.
  """
  labelableRecord: Labelable
}

"""
Autogenerated input type of AddPackageTag
"""
input AddPackageTagInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The login of the package owner
  """
  owner: String!

  """
  The name of the package.
  """
  packageName: String!

  """
  The type of the package.
  """
  packageType: PackageType!

  """
  The tag name.
  """
  tag: String!

  """
  The version to add the tag to.
  """
  version: String!
}

"""
Autogenerated return type of AddPackageTag
"""
type AddPackageTagPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The package of the newly added tag.
  """
  package: Package

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package version metadata.
  """
  viewer: User
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectCardItem")

  """
  The note on the card.
  """
  note: String

  """
  The Node ID of the ProjectColumn.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload @serviceMapping(to: "github/projects") {
  """
  The edge from the ProjectColumn's card connection.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectColumn
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectCollaborator
"""
input AddProjectCollaboratorInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The permission that the collaborator is being granted on the project.
  """
  permission: ProjectPermission

  """
  The ID of the project to add the collaborator to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the user collaborator to add to the project.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of AddProjectCollaborator
"""
type AddProjectCollaboratorPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge between the project and the user.
  """
  projectUserEdge: ProjectUserEdge
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the column.
  """
  name: String!

  """
  The Node ID of the project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The semantic purpose of the column
  """
  purpose: ProjectColumnPurpose @internal
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge from the project's column connection.
  """
  columnEdge: ProjectColumnEdge

  """
  The project
  """
  project: Project
}

"""
Autogenerated input type of AddProjectNextItem
"""
input AddProjectNextItemInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The content id of the item (Issue or PullRequest).
  """
  contentId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "ProjectNextItemContent")

  """
  The ID of the Project to add the item to.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectNext"])
}

"""
Autogenerated return type of AddProjectNextItem
"""
type AddProjectNextItemPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item added to the project.
  """
  projectNextItem: ProjectNextItem
}

"""
Autogenerated input type of AddProjectWorkflow
"""
input AddProjectWorkflowInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the project column for the workflow.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])

  """
  The trigger type that initiates the project workflow.
  """
  triggerType: ProjectWorkflowTriggerType
}

"""
Autogenerated return type of AddProjectWorkflow
"""
type AddProjectWorkflowPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project column.
  """
  projectColumn: ProjectColumn

  """
  The edge from the project's workflow connection.
  """
  workflowEdge: ProjectWorkflowEdge
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The SHA of the commit to comment on.
  """
  commitOID: GitObjectID

  """
  The comment id to reply to.
  """
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])

  """
  The relative path of the file to comment on.
  """
  path: String

  """
  The line index in the diff to comment on.
  """
  position: Int

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: PullRequestReviewComment

  """
  The edge from the review's comment connection.
  """
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The contents of the review body comment.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The review line comments.
  """
  comments: [DraftPullRequestReviewComment]

  """
  The commit OID the review pertains to.
  """
  commitOID: GitObjectID

  """
  The event to perform on the pull request review.
  """
  event: PullRequestReviewEvent

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The review line comment threads.
  """
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created pull request review.
  """
  pullRequestReview: PullRequestReview

  """
  The edge from the pull request's review connection.
  """
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  Body of the thread's first comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The diff range on which the thread was left. Default is from the base of the pull request to the head of the review.
  """
  diffRange: DiffRange

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The node ID of the pull request reviewing
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Node ID of the review to modify.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT

  """
  True to mark this review as submitted
  """
  submitReview: Boolean = false @internal
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-25")

  """
  The newly created thread.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The text of the reply.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending review to which the reply will belong.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])

  """
  The Node ID of the thread to which this reply is being written.
  """
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])

  """
  True to mark this review as submitted
  """
  submitReview: Boolean = false @internal
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created reply.
  """
  comment: PullRequestReviewComment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-25")
}

"""
Autogenerated input type of AddPullRequestToMergeQueue
"""
input AddPullRequestToMergeQueueInput @internal @serviceMapping(to: "github/pull_requests") {
  """
  Which branch's merge queue to add to.
  """
  branch: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to jump this PR to the top of the queue.
  """
  jump: Boolean

  """
  The Node ID of the pull request to add.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  Whether to consider this PR for grouping or force a solo merge.
  """
  solo: Boolean
}

"""
Autogenerated return type of AddPullRequestToMergeQueue
"""
type AddPullRequestToMergeQueuePayload @internal @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created merge queue entry
  """
  mergeQueueEntry: MergeQueueEntry

  """
  The pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji to react with.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "RepositoryAdvisory"
        "RepositoryAdvisoryComment"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of AddRecoveryToken
"""
input AddRecoveryTokenInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The recovery provider origin.
  """
  provider: RecoveryProvider!
}

"""
Autogenerated return type of AddRecoveryToken
"""
type AddRecoveryTokenPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The subject
  """
  recoveryToken: Node

  """
  The base64 encoded value of the signed recovery token
  """
  sealedToken: String

  """
  The canonical URL for the token at the recovery provider (also used for CSRF protection)
  """
  tokenStateUrl: URI
}

"""
Autogenerated input type of AddReleaseToRepository
"""
input AddReleaseToRepositoryInput @internal {
  """
  The author of the release
  """
  authorId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Identifies the description of the release.
  """
  description: String

  """
  True if the release is a draft
  """
  draft: Boolean

  """
  Identifies the title of the release.
  """
  name: String

  """
  Whether or not the release is a prerelease
  """
  prerelease: Boolean

  """
  The ID of the repository containing the release
  """
  repositoryId: ID!

  """
  Identifies the git tag of the release.
  """
  tagName: String!
}

"""
Autogenerated return type of AddReleaseToRepository
"""
type AddReleaseToRepositoryPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new release object.
  """
  release: Release
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The context in which the object was starred, e.g., the page the button was on.
  """
  starrableContext: String @internal

  """
  The Starrable ID to star.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of AddTeamMember
"""
input AddTeamMemberInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the team to add to the team.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the team member to add.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of AddTeamMember
"""
type AddTeamMemberPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team that the member was added to.
  """
  team: Team

  """
  The user that was added as a team member.
  """
  user: User
}

"""
Autogenerated input type of AddTeamProject
"""
input AddTeamProjectInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The permission that the team should have on the project.
  """
  permission: ProjectPermission = READ

  """
  The ID of the project to add to the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the team to add the project to.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of AddTeamProject
"""
type AddTeamProjectPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The edge between the project and the team.
  """
  projectTeamEdge: ProjectTeamEdge
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-02-12")

  """
  The votable subject.
  """
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL of the domain
  """
  domain: URI!

  """
  The ID of the owner to add the domain to
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was added.
  """
  domain: VerifiableDomain
}

"""
Represents a 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node & PerformableViaApp & TimelineEvent
  @internal
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who added this Pull Request to the merge queue
  """
  enqueuer: User
  id: ID!

  """
  The merge queue where this pull request was added to.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node & PerformableViaApp & ProjectEvent & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Project referenced by event.
  """
  project: Project

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard

  """
  Column name referenced by this project event.
  """
  projectColumnName: String!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Did this event result from workflow automation?
  """
  wasAutomated: Boolean! @internal
}

"""
A security advisory published either by GitHub or repository maintainers
"""
interface Advisory @underDevelopment(since: "2020-03-31") @serviceMapping(to: "github/advisory_database") {
  """
  A plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!
  id: ID!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!
}

"""
An advisory credit
"""
type AdvisoryCredit implements Node
  @underDevelopment(since: "2020-03-18")
  @serviceMapping(to: "github/repo_advisories") {
  """
  The advisory in which the user is credited
  """
  advisory: Advisory!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String! @internal
  id: ID!

  """
  A user who is given credit for the advisory
  """
  recipient: Actor!

  """
  The current state of the credit's acceptance
  """
  state: AdvisoryCreditState! @internal
}

"""
The connection type for AdvisoryCredit.
"""
type AdvisoryCreditConnection @underDevelopment(since: "2020-03-18") @serviceMapping(to: "github/repo_advisories") {
  """
  A list of edges.
  """
  edges: [AdvisoryCreditEdge]

  """
  A list of nodes.
  """
  nodes: [AdvisoryCredit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AdvisoryCreditEdge @underDevelopment(since: "2020-03-18") @serviceMapping(to: "github/repo_advisories") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AdvisoryCredit
}

"""
Ordering options for advisory credits connections
"""
input AdvisoryCreditOrder @underDevelopment(since: "2020-03-24") @serviceMapping(to: "github/repo_advisories") {
  """
  The field to order advisory credits by.
  """
  field: AdvisoryCreditOrderField!
}

"""
Properties by which advisory credits connections can be ordered.
"""
enum AdvisoryCreditOrderField @underDevelopment(since: "2020-03-24") @serviceMapping(to: "github/repo_advisories") {
  """
  Order credits by id
  """
  ID
}

"""
The possible states of an advisory credit.
"""
enum AdvisoryCreditState @internal @serviceMapping(to: "github/repo_advisories") {
  """
  Credit that has been accepted by its recipient.
  """
  ACCEPTED

  """
  Credit that has been declined by its recipient.
  """
  DECLINED

  """
  Credit that has been neither accepted nor declined.
  """
  PENDING
}

"""
A GitHub App.
"""
type App implements FeatureFlaggable & MarketplaceIntegratable & Node
  @serviceMapping(to: "github/apps")
  @useNextGlobalIdFormat(after: "2021-06-25") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The webhook events this app subscribes to
  """
  defaultEvents: [String!]! @underDevelopment(since: "2019-04-03")

  """
  The permissions requested by this app on installation
  """
  defaultPermissions: [AppPermission!]! @underDevelopment(since: "2019-04-03")

  """
  The description of the app.
  """
  description: String

  """
  The app's description rendered to HTML.
  """
  descriptionHTML(
    """
    Truncate the description at the specified length
    """
    truncate: Int
  ): HTML @internal

  """
  The HTTP path for this app
  """
  htmlResourcePath: URI! @internal

  """
  The HTTP URL for this app
  """
  htmlUrl: URI! @internal
  id: ID!

  """
  The repositories this app is installed on for a specified account
  """
  installedRepositories(
    """
    The target account's login.
    """
    account: String!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection! @internal

  """
  The IP addresses of the app.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  A URL pointing to the app's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The Marketplace Listing for this App
  """
  marketplaceListing: MarketplaceListing @underDevelopment(since: "2018-08-30")

  """
  The name of the app.
  """
  name: String!

  """
  The owner of this app.
  """
  owner: AppOwner!

  """
  The hex color code for the background color this object's icon should be displayed on.
  """
  preferredBackgroundColor: String! @internal

  """
  A shortened version of the app's description rendered to HTML.
  """
  shortDescriptionHTML(
    """
    Truncate the description at the specified length
    """
    truncate: Int!
  ): HTML @internal

  """
  A slug based on the name of the app for use in URLs.
  """
  slug: String!

  """
  The HTTP path for this app's stafftools page
  """
  stafftoolsResourcePath: URI! @internal

  """
  The HTTP URL for this app's stafftools page
  """
  stafftoolsUrl: URI! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to the app's homepage.
  """
  url: URI!
}

"""
The connection type for App.
"""
type AppConnection @serviceMapping(to: "github/apps") {
  """
  A list of edges.
  """
  edges: [AppEdge]

  """
  A list of nodes.
  """
  nodes: [App]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AppEdge @serviceMapping(to: "github/apps") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: App
}

"""
Types that can own a GitHub App
"""
union AppOwner @internal = Enterprise | Organization | User

"""
Permission access for an App
"""
type AppPermission @underDevelopment(since: "2019-04-04") @serviceMapping(to: "github/apps") {
  """
  The level of access the app has to the specified resource
  """
  access: AppPermissionAccessLevel! @underDevelopment(since: "2019-04-04")

  """
  The type of resource the app has access to
  """
  resource: String! @underDevelopment(since: "2019-04-04")
}

"""
The level of access that a GitHub App has to a resource
"""
enum AppPermissionAccessLevel @underDevelopment(since: "2019-04-05") @serviceMapping(to: "github/apps") {
  """
  Can read, write, and admin
  """
  ADMIN

  """
  Can read
  """
  READ

  """
  Can read and write
  """
  WRITE
}

"""
Autogenerated input type of ApplyMobileSuggestedChanges
"""
input ApplyMobileSuggestedChangesInput @serviceMapping(to: "github/pull_requests") {
  """
  The data being submitted for these suggested changes.
  """
  changes: [MobileSuggestedChangeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The OID of the pull request's head ref that the changes should be applied to.
  """
  currentOID: GitObjectID!

  """
  The suggested change commit message.
  """
  message: String

  """
  The node id of the PullRequest to apply suggestions to.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  Whether to try signing the commit.
  """
  sign: Boolean = true
}

"""
Autogenerated return type of ApplyMobileSuggestedChanges
"""
type ApplyMobileSuggestedChangesPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns if the suggestion was successfully applied.
  """
  success: Boolean
}

"""
Autogenerated input type of ApplySuggestedChanges
"""
input ApplySuggestedChangesInput @internal @serviceMapping(to: "github/pull_requests") {
  """
  The data being submitted for these suggested changes.
  """
  changes: [SuggestedChange!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The OID of the pull request's head ref that the changes should be applied to.
  """
  currentOID: GitObjectID!

  """
  The suggested change commit message.
  """
  message: String

  """
  The node id of the PullRequest to apply suggestions to.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  Whether to try signing the commit.
  """
  sign: Boolean = false @internal
}

"""
Autogenerated return type of ApplySuggestedChanges
"""
type ApplySuggestedChangesPayload @internal @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ApproveActionRequiredWorkflowRuns
"""
input ApproveActionRequiredWorkflowRunsInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the pull request
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ApproveActionRequiredWorkflowRuns
"""
type ApproveActionRequiredWorkflowRunsPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-04-28")
}

"""
Autogenerated input type of ApproveCreatorMarketplaceListing
"""
input ApproveCreatorMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Marketplace listing to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListing"])

  """
  A custom message for the integrator.
  """
  message: String
}

"""
Autogenerated return type of ApproveCreatorMarketplaceListing
"""
type ApproveCreatorMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for approving deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-01-04")
}

"""
Autogenerated input type of ApproveMarketplaceListing
"""
input ApproveMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Marketplace listing to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListing"])

  """
  A custom message for the integrator.
  """
  message: String
}

"""
Autogenerated return type of ApproveMarketplaceListing
"""
type ApproveMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of ApprovePendingTeamChangeParentRequest
"""
input ApprovePendingTeamChangeParentRequestInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending team change parent request ID to approve
  """
  requestId: ID! @possibleTypes(concreteTypes: ["TeamChangeParentRequest"])
}

"""
Autogenerated return type of ApprovePendingTeamChangeParentRequest
"""
type ApprovePendingTeamChangeParentRequestPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The request that was approved
  """
  request: TeamChangeParentRequest
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to approve.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was approved.
  """
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectCard
"""
input ArchiveProjectCardInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to archive.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of ArchiveProjectCard
"""
type ArchiveProjectCardPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The archived ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to mark as archived.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was marked as archived.
  """
  repository: Repository
}

"""
An artifact from a check suite.
"""
type Artifact @internal @serviceMapping(to: "github/actions") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether or not the artifact has expired.
  """
  expired: Boolean!

  """
  The artifact's name.
  """
  name: String!

  """
  The size of the artifact in bytes.
  """
  size: Int!

  """
  The full URL to download all files in the artifact.
  """
  sourceUrl: URI!
}

"""
The connection type for Artifact.
"""
type ArtifactConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [ArtifactEdge]

  """
  A list of nodes.
  """
  nodes: [Artifact]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Details about a collection of files produced by a check suite.
"""
input ArtifactData @internal @serviceMapping(to: "github/actions") {
  """
  The datetime the artifact was created.
  """
  createdAt: DateTime!

  """
  The datetime the artifact expires.
  """
  expiresAt: DateTime

  """
  The name of the artifact.
  """
  name: String!

  """
  The size of the artifact in bytes.
  """
  size: Int!

  """
  The full URL to download all files in the artifact.
  """
  sourceUrl: URI!
}

"""
An edge in a connection.
"""
type ArtifactEdge @internal @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Artifact
}

"""
Ways in which lists of artifacts can be ordered upon return.
"""
input ArtifactOrder @internal @serviceMapping(to: "github/actions") {
  """
  The direction to order artifacts by the specified field.
  """
  direction: OrderDirection!

  """
  The field to order artifacts by.
  """
  field: ArtifactOrderField!
}

"""
Properties by which artifact connections can be ordered.
"""
enum ArtifactOrderField @internal @serviceMapping(to: "github/actions") {
  """
  Order artifacts by creation time
  """
  CREATED_AT

  """
  Order artifacts alphabetically by name
  """
  NAME
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  A list of suggested users to assign to this object
  """
  suggestedAssignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If provided, searches users by login or profile name
    """
    query: String
  ): UserConnection! @serviceMapping(to: "github/mobile_api")
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was assigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the user who was assigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Types that can be assigned to issues.
"""
union Assignee @serviceMapping(to: "github/issues") = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor @serviceMapping(to: "github/audit_logs") = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder @serviceMapping(to: "github/audit_logs") {
  """
  The ordering direction.
  """
  direction: OrderDirection

  """
  The field to order Audit Logs by.
  """
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField @serviceMapping(to: "github/audit_logs") {
  """
  Order audit log entries by timestamp
  """
  CREATED_AT
}

"""
The different kinds of ways to authenticate.
"""
enum AuthenticationClient @internal {
  """
  This authentication attempt came from a web client
  """
  WEB
}

"""
A reason why a particular authentication was flagged as unexpected.
"""
enum AuthenticationFlaggedReason @internal {
  """
  The login came from an unknown device
  """
  UNRECOGNIZED_DEVICE

  """
  The login came from an unknown device and unknown country code
  """
  UNRECOGNIZED_DEVICE_AND_LOCATION

  """
  The login came from an unknown country code
  """
  UNRECOGNIZED_LOCATION
}

"""
Represents a successful password authentication.
"""
type AuthenticationRecord implements Node @internal @serviceMapping(to: "github/account_login") {
  """
  The type of login attempt (e.g. :web, :git, :api, etc.).
  """
  client: AuthenticationClient

  """
  The two letter country abbreviation.
  """
  countryCode: String

  """
  When the token was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  IP address.
  """
  ip: String!

  """
  The octolytics/device ID performing the login.
  """
  octolyticsId: String

  """
  (Optional) the reason the login was flagged as unexpected.
  """
  unexpectedLoginReason: AuthenticationFlaggedReason

  """
  The account being logged in to.
  """
  user: User!

  """
  The user agent that performed the login.
  """
  userAgent: String
}

"""
The connection type for AuthenticationRecord.
"""
type AuthenticationRecordConnection @internal @serviceMapping(to: "github/account_login") {
  """
  A list of edges.
  """
  edges: [AuthenticationRecordEdge]

  """
  A list of nodes.
  """
  nodes: [AuthenticationRecord]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AuthenticationRecordEdge @internal @serviceMapping(to: "github/account_login") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuthenticationRecord
}

"""
Types of credentials that can be granted access to protected resources
"""
union AuthorizedCredential @underDevelopment(since: "2019-02-08") @serviceMapping(to: "github/external_auth") =
    OauthAccess
  | PublicKey

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who disabled auto-merge for this Pull Request
  """
  disabler: User
  id: ID!

  """
  PullRequest referenced by event
  """
  pullRequest: PullRequest

  """
  The reason auto-merge was disabled
  """
  reason: String

  """
  The reason_code relating to why auto-merge was disabled
  """
  reasonCode: String

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who enabled auto-merge for this Pull Request
  """
  enabler: User
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest @serviceMapping(to: "github/pull_requests") {
  """
  The email address of the author of this auto-merge request.
  """
  authorEmail: String

  """
  The commit message of the auto-merge request.
  """
  commitBody: String

  """
  The commit title of the auto-merge request.
  """
  commitHeadline: String

  """
  When was this auto-merge request was enabled.
  """
  enabledAt: DateTime

  """
  The actor who created the auto-merge request.
  """
  enabledBy: Actor

  """
  The merge method of the auto-merge request.
  """
  mergeMethod: PullRequestMergeMethod!

  """
  The pull request that this auto-merge request is set against.
  """
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who enabled auto-merge (rebase) for this Pull Request
  """
  enabler: User
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who enabled auto-merge (squash) for this Pull Request
  """
  enabler: User
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The new base for this PR
  """
  newBase: String!

  """
  The old base for this PR
  """
  oldBase: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A user's avatar
"""
type Avatar @underDevelopment(since: "2018-06-25") @serviceMapping(to: "github/platform_health_data") {
  """
  The content type of the avatar
  """
  contentType: String

  """
  The time the avatar was created
  """
  createdAt: DateTime!

  """
  The cropped width of the avatar
  """
  croppedX: Int!

  """
  The cropped height of the avatar
  """
  croppedY: Int!

  """
  The size of the avatar in bytes
  """
  size: Int!

  """
  The time the avatar was updated
  """
  updatedAt: DateTime!

  """
  The URL for the avatar
  """
  url: URI!
}

"""
The connection type for Avatar.
"""
type AvatarConnection @underDevelopment(since: "2018-06-25") @serviceMapping(to: "github/platform_health_data") {
  """
  A list of edges.
  """
  edges: [AvatarEdge]

  """
  A list of nodes.
  """
  nodes: [Avatar]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AvatarEdge @underDevelopment(since: "2018-10-02") @serviceMapping(to: "github/platform_health_data") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Avatar
}

"""
An entity that has an avatar
"""
interface AvatarOwner @underDevelopment(since: "2018-06-25") @serviceMapping(to: "github/platform_health_data") {
  """
  The avatars of the user
  """
  avatars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AvatarConnection @underDevelopment(since: "2018-06-25")
}

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  The HTTP URL link to see what changes were force pushed
  """
  comparisonPath: URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref

  """
  Identifies the name of the ref of the force push.
  """
  refName: String! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
Entities that can be billed for their subscription.
"""
interface Billable @internal {
  """
  Transaction records for all billing events tied to an account.
  """
  billingTransactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the transactions in descending order.
    """
    descending: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter out refunds and transactions without a payment associated.
    """
    sales: Boolean
  ): BillingTransactionConnection @internal

  """
  The current credit on this account
  """
  currentCredit: Money @internal

  """
  Is this account on a free trial?
  """
  hasUnlimitedSeats: Boolean! @internal

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Is the account billed through invoices?
  """
  isInvoiced: Boolean! @internal

  """
  The user's default payment method
  """
  paymentMethod: PaymentMethod

  """
  Return the associated billing subscription for the user.
  """
  subscription: Subscription!

  """
  The number of seats for this account including bundled seats that are not in use.
  """
  totalAvailableSeats: Int! @internal
}

"""
The plan duration of a billing subscription. e.g month, year
"""
enum BillingDuration @internal {
  """
  The Subscription is billed monthly.
  """
  MONTH

  """
  The Subscription is billed yearly.
  """
  YEAR
}

"""
Objects that a user can subscribe to and be billed for.
"""
union BillingSubscribable @internal = MarketplaceListingPlan | SponsorsTier

"""
An account's billing transaction, representing something they paid for.
"""
type BillingTransaction implements Node @internal {
  """
  The account associated with this subscription item
  """
  account: Account @internal

  """
  The cost in cents of this transaction.
  """
  amountInCents: Int!

  """
  The bank identification number tied to the transaction.
  """
  bankIdentificationNumber: Int

  """
  The type of card used
  """
  cardType: String

  """
  The datetime this transaction was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  Has the transaction been charged back?
  """
  isChargedBack: Boolean!

  """
  Is the transaction tied to a paypal account?
  """
  isPaypal: Boolean!

  """
  Has the transaction been refunded?
  """
  isRefunded: Boolean! @internal

  """
  Was the transaction successful?
  """
  isSuccess: Boolean!

  """
  Has the transaction been voided?
  """
  isVoided: Boolean!

  """
  Last four of the card tied to the transaction.
  """
  lastFour: String

  """
  The paypal e-mail associated with the transaction.
  """
  paypalEmail: String

  """
  The amount of cents refunded if the transaction was refunded
  """
  refundAmountInCents: Int! @internal

  """
  The status of this transaction.
  """
  status: String

  """
  ID tied to the payment transaction.
  """
  transactionId: String
}

"""
The connection type for BillingTransaction.
"""
type BillingTransactionConnection @internal {
  """
  A list of edges.
  """
  edges: [BillingTransactionEdge]

  """
  A list of nodes.
  """
  nodes: [BillingTransaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BillingTransactionEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BillingTransaction
}

"""
Represents a Git blame.
"""
type Blame {
  """
  The list of ranges from a Git blame.
  """
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """
  Identifies the line author
  """
  commit: Commit!

  """
  The ending line for the range
  """
  endingLine: Int!

  """
  The starting line for the range
  """
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node @serviceMapping(to: "github/blob") @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  Byte size of Blob object
  """
  byteSize: Int!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """
  Indicates whether the contents is truncated
  """
  isTruncated: Boolean!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  UTF8 text data or null if the Blob is binary
  """
  text: String
}

"""
Autogenerated input type of BlockAccountsActionInvocation
"""
input BlockAccountsActionInvocationInput @internal @serviceMapping(to: "github/actions") {
  """
  The global relay IDs of the accounts to block action invocation for.
  """
  accountIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of BlockAccountsActionInvocation
"""
type BlockAccountsActionInvocationPayload @internal @serviceMapping(to: "github/actions") {
  """
  The accounts for which action invocation was blocked.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
An identifier value for a dashboard navigation link.
"""
enum BlockFromOrganizationDuration @serviceMapping(to: "github/orgs") {
  """
  Block user indefinitely
  """
  INDEFINITE

  """
  Block user for 1 day
  """
  ONE_DAY

  """
  Block user for 7 days
  """
  SEVEN_DAYS

  """
  Block user for 30 days
  """
  THIRTY_DAYS

  """
  Block user for 3 days
  """
  THREE_DAYS
}

"""
Autogenerated input type of BlockUserFromOrganization
"""
input BlockUserFromOrganizationInput @serviceMapping(to: "github/orgs") {
  """
  The ID of the user to block from the organization
  """
  blockedUserId: ID! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the content that the user was blocked from
  """
  contentId: ID

  """
  The duration to block the user for
  """
  duration: BlockFromOrganizationDuration!

  """
  Reason for hiding a user's comments
  """
  hiddenReason: ReportedContentClassifiers

  """
  Whether or not we send a notification to the blocked user
  """
  notifyBlockedUser: Boolean = false

  """
  The ID of the organization to block from
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of BlockUserFromOrganization
"""
type BlockUserFromOrganizationPayload @serviceMapping(to: "github/orgs") {
  """
  When the user is blocked until, null if blocked indefinitely
  """
  blockedUntil: DateTime

  """
  The user who is being blocked from the organization
  """
  blockedUser: User

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The duration the user was blocked for
  """
  duration: BlockFromOrganizationDuration

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-07-29")

  """
  The user who is acting for the organization
  """
  viewer: User
}

"""
Autogenerated input type of BlockUser
"""
input BlockUserInput @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global relay ID of the user to block
  """
  userId: ID!
}

"""
Autogenerated return type of BlockUser
"""
type BlockUserPayload @serviceMapping(to: "github/community_and_safety") {
  """
  The user who is being blocked
  """
  blockedUser: User

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-07-15")

  """
  The user who is doing the blocking
  """
  viewer: User
}

"""
Entities that have the action to block the creating user.
"""
interface Blockable @internal @serviceMapping(to: "github/community_and_safety") {
  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal
}

"""
A broadcast blog post.
"""
type BlogBroadcast @internal {
  """
  The post's teaser HTML text
  """
  content: String!

  """
  The post's published timestamp (as Unix time)
  """
  id: Int!

  """
  The post's title
  """
  title: String!

  """
  The post's URL
  """
  url: URI!
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable @useNextGlobalIdFormat(after: "2021-09-30") {
  """
  The parent GitHub App
  """
  app: App! @internal

  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Whether this bot's parent is the dependabot app
  """
  isDependabot: Boolean! @internal

  """
  The username of the actor.
  """
  login: String!

  """
  The Marketplace listing URL for this bot if it has an approved listing. Otherwise, it is just the app URL.
  """
  marketplaceListingUrl: URI @internal

  """
  The name of the actor.
  """
  name: String @underDevelopment(since: "2019-04-23")

  """
  The HTTP path for this bot
  """
  resourcePath: URI!

  """
  Bot information only visible to site admin
  """
  stafftoolsInfo: BotStafftoolsInfo @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this bot
  """
  url: URI!
}

"""
Bot information only visible to site admin
"""
type BotStafftoolsInfo implements AccountStafftoolsInfo @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Total number of actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned
  orgs. -1 means a timeout occured and the account may have many actions run
  """
  actionWorkflowsRunCount: Int!

  """
  The number of repositories this account is associated with.
  """
  associatedRepositoriesCount(
    """
    Array of owner's affiliation options for repository count. For example,
    OWNER will include only repositories that the organization or user being viewed owns.
    """
    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  Has actually paid money to GitHub at some point.
  """
  hasActuallyPaidMoney: Boolean!

  """
  Does the account have a blacklisted payment method.
  """
  hasBlacklistedPaymentMethod: Boolean!

  """
  Account has matching spam pattern on last ip.
  """
  hasMatchingLastIpSpamPattern: Boolean!

  """
  Account has newer non-spammy ip neighbor.
  """
  hasNewerNonSpammyIpNeighbor: Boolean!

  """
  Does account have a paid plan.
  """
  hasPaidPlan: Boolean!

  """
  The accounts that show share the same lastIp
  """
  ipNeighbors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_24
  ): AccountConnection

  """
  The number of accounts with the same last ip.
  """
  ipNeighborsCount: Int!

  """
  Is the account classified as a gift account.
  """
  isGiftAccount: Boolean!

  """
  Is the account hammy.
  """
  isHammy: Boolean!

  """
  Can this account be marked as spammy.
  """
  isNeverSpammy: Boolean!

  """
  Is the account spammy.
  """
  isSpammy: Boolean!

  """
  Is the account suspended.
  """
  isSuspended: Boolean!

  """
  Indicates if the account is subject to trade restrictions.
  """
  isTradeRestricted: Boolean!

  """
  The five most recently updated project cards that the user created. Returns
  empty results if timed out querying for project cards
  """
  lastFivePublicProjectCards: [ProjectCard!]!

  """
  The five most recently updated projects that the user created. Returns empty results if timed out querying for projects
  """
  lastFivePublicProjects: [Project!]!

  """
  The ip address for the account recorded when they last logged in.
  """
  lastIp: String

  """
  The networks for this account that have LFS usage, .
  """
  lfsNetworksByUsage(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection

  """
  The repositories for this account that have LFS objects.
  """
  lfsRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!

  """
  Class C reputation.
  """
  networkAddress24Reputation: SpamuraiReputation

  """
  IP address reputation.
  """
  networkAddress32Reputation: SpamuraiReputation

  """
  The number of repositories this account owns.
  """
  ownedRepositoriesCount(
    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  Total actions minutes used in the past month for private repos owned by the
  account. If the account is a user then this includes actions run in private
  repos owned by 25 of the user's most recently created owned orgs. -1 means a
  timeout occured and the account may have many actions run.
  """
  privateActionsMinuteUsage: Int!

  """
  Account profile.
  """
  profile: Profile

  """
  Count of public project cards created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectCardsCount: Int!

  """
  Count of public projects created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectsCount: Int!

  """
  Most recent actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned orgs.
  """
  recentActionWorkflowsRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActionsWorkflowRunStafftoolsInfoConnection!

  """
  The number of spammy accounts with the same last ip.
  """
  spammyIpNeighborsCount: Int!

  """
  The spammy reason.
  """
  spammyReason: String

  """
  Staff notes for account.
  """
  staffNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StaffNoteConnection

  """
  The account time zone.
  """
  timeZone: String
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node
  @serviceMapping(to: "github/branch_protection_rule")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConflictConnection!

  """
  The actor who created this branch protection rule.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!
  id: ID!

  """
  Whether approvals from users that have contributed to a pull request by pushing to its branch should be ignored.
  """
  ignoreApprovalsFromContributors: Boolean! @internal

  """
  Can admins overwrite branch protection.
  """
  isAdminEnforced: Boolean!

  """
  Repository refs that are protected by this rule
  """
  matchingRefs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters refs with query on name
    """
    query: String
  ): RefConnection! @serviceMapping(to: "github/ref")

  """
  Limit of alternate path attempts for merge groups.
  """
  mergeQueueAlternatePaths: Int @internal

  """
  Limit of retries for failed check runs on queued entries.
  """
  mergeQueueCheckRunRetries: Int @internal

  """
  Maximum number of entries per merge group.
  """
  mergeQueueMaxGroupSize: Int @internal

  """
  Merge groups require manual approval
  """
  mergeQueueRequiresManualApproval: Boolean @internal

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  A list push allowances for this branch protection rule.
  """
  pushAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PushAllowanceConnection!

  """
  The repository associated with this branch protection rule.
  """
  repository: Repository

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required deployment environments that must be deployed successfully to update matching branches
  """
  requiredDeploymentEnvironments: [String] @internal

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean!

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Does this branch require deployment to specific environments before merging
  """
  requiresDeployments: Boolean! @internal

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are merges to this branch managed through a merge queue.
  """
  requiresMergeQueue: Boolean! @internal

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean!

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean!

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean!

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean!

  """
  A list review dismissal allowances for this branch protection rule.
  """
  reviewDismissalAllowances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  """
  Identifies the branch protection rule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  Identifies the conflicting branch protection rule.
  """
  conflictingBranchProtectionRule: BranchProtectionRule

  """
  Identifies the branch ref that has conflicting rules
  """
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleConflictEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRuleConflict]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection @serviceMapping(to: "github/branch_protection_rule") {
  """
  A list of edges.
  """
  edges: [BranchProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [BranchProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge @serviceMapping(to: "github/branch_protection_rule") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BranchProtectionRule
}

"""
Mapping of enums to internal DataDog counters.
"""
enum BrowserIncrementKey @internal @serviceMapping(to: "github/frontend_systems") {
  """
  Checks UI failed to load logs
  """
  ACTIONS_COMPLETED_LOG_VIEWS_FAIL

  """
  Checks UI successfully loaded logs
  """
  ACTIONS_COMPLETED_LOG_VIEWS_SUCCEED

  """
  Checks UI failed to load logs
  """
  ACTIONS_STREAMING_LOG_VIEWS_FAIL

  """
  Checks UI successfully loaded logs
  """
  ACTIONS_STREAMING_LOG_VIEWS_SUCCEED

  """
  Insights query element failed to execute a query and render the result
  """
  INSIGHTS_QUERY_EXECUTE_ERROR

  """
  Insights query element successfully executed a query and rendered the result
  """
  INSIGHTS_QUERY_EXECUTE_SUCCESS

  """
  Insights query element failed to fetch an authentication token and scope from the monolith
  """
  INSIGHTS_QUERY_TOKEN_FETCH_ERROR

  """
  The ref selector used HTTP to load its ref state but got a 304, avoiding a full request
  """
  REF_SELECTOR_BOOTED_FROM_HTTP_CACHE

  """
  The ref selector was able to load ref state from localstorage, avoiding any HTTP request
  """
  REF_SELECTOR_BOOTED_FROM_LOCALSTORAGE

  """
  The ref selector used a normal HTTP request to bootstrap
  """
  REF_SELECTOR_BOOTED_FROM_UNCACHED_HTTP

  """
  The ref selector failed in some way to bootstrap, likely because of a HTTP error
  """
  REF_SELECTOR_BOOT_FAILED

  """
  Browser localstorage overflowed while storing ref selector data, had to be
  cleared, and the subsequent setItem call *still* failed!
  """
  REF_SELECTOR_LOCALSTORAGE_GAVE_UP

  """
  Browser localstorage overflowed while storing ref selector data and had to be cleared.
  """
  REF_SELECTOR_LOCALSTORAGE_OVERFLOWED

  """
  The ref selector boot process received an unexpected yet non-failure HTTP response.
  """
  REF_SELECTOR_UNEXPECTED_RESPONSE
}

"""
https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API
"""
input BrowserPerformanceLongTask @internal @serviceMapping(to: "github/frontend_systems") {
  """
  Duration
  """
  duration: Int!

  """
  Name
  """
  name: String!

  """
  The address of the current document.
  """
  url: URI!
}

"""
https://w3c.github.io/navigation-timing/
"""
input BrowserPerformanceNavigationTiming @internal @serviceMapping(to: "github/frontend_systems") {
  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-connectend
  """
  connectEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-connectstart
  """
  connectStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-decodedbodysize
  """
  decodedBodySize: Int

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  domComplete: Float

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  domContentLoadedEventEnd: Float

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  domContentLoadedEventStart: Float

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  domInteractive: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-domainlookupend
  """
  domainLookupEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-domainlookupstart
  """
  domainLookupStart: Float

  """
  The duration attribute must return a DOMHighResTimeStamp equal to the
  difference between loadEventEnd and startTime, respectively.
  """
  duration: Float!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-encodedbodysize
  """
  encodedBodySize: Int

  """
  The entryType attribute must return the DOMString "navigation".
  """
  entryType: String!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-fetchstart
  """
  fetchStart: Float

  """
  The initiatorType attribute must return the DOMString "navigation".
  """
  initiatorType: String

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  loadEventEnd: Float

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  loadEventStart: Float

  """
  The name attribute must return the DOMString value of the address of the current document.
  """
  name: URI!

  """
  Returns the network protocol used to fetch the resource, as identified by the ALPN Protocol ID.
  """
  nextHopProtocol: String

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  redirectCount: Int

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-redirectend
  """
  redirectEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-redirectstart
  """
  redirectStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-requeststart
  """
  requestStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-responseend
  """
  responseEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-responsestart
  """
  responseStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-secureconnectionstart
  """
  secureConnectionStart: Float

  """
  The startTime attribute must return a DOMHighResTimeStamp with a time value of 0.
  """
  startTime: Float!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-transfersize
  """
  transferSize: Int

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  type: String

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  unloadEventEnd: Float

  """
  https://w3c.github.io/navigation-timing/#sec-PerformanceNavigationTiming
  """
  unloadEventStart: Float

  """
  The workerStart attribute must return the time immediately before the user agent ran the worker.
  """
  workerStart: Float
}

"""
Models the browser's `PerformanceResourceTiming` performance timeline entry.

Sample entries can be retrieved via `performance.getEntriesByType('resource')`.

See the W3C Resource Timing Level specification for more information.

https://www.w3.org/TR/resource-timing-2/#h-performanceresourcetiming
"""
input BrowserPerformanceResourceTiming @internal @serviceMapping(to: "github/frontend_systems") {
  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-connectend
  """
  connectEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-connectstart
  """
  connectStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-decodedbodysize
  """
  decodedBodySize: Int

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-domainlookupend
  """
  domainLookupEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-domainlookupstart
  """
  domainLookupStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#widl-PerformanceResourceTiming-duration
  """
  duration: Float!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-encodedbodysize
  """
  encodedBodySize: Int

  """
  https://www.w3.org/TR/resource-timing-2/#widl-PerformanceResourceTiming-entryType
  """
  entryType: String!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-fetchstart
  """
  fetchStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-initiatortype
  """
  initiatorType: String

  """
  This attribute must return the resolved URL of the requested resource.

  https://www.w3.org/TR/resource-timing-2/#widl-PerformanceResourceTiming-name
  """
  name: URI!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-nexthopprotocol
  """
  nextHopProtocol: String

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-redirectend
  """
  redirectEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-redirectstart
  """
  redirectStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-requeststart
  """
  requestStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-responseend
  """
  responseEnd: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-responsestart
  """
  responseStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-secureconnectionstart
  """
  secureConnectionStart: Float

  """
  https://www.w3.org/TR/resource-timing-2/#widl-PerformanceResourceTiming-startTime
  """
  startTime: Float!

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-transfersize
  """
  transferSize: Int

  """
  https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-workerstart
  """
  workerStart: Float
}

"""
Info related to attachment uploads
"""
input BrowserPerformanceUploadTiming @internal @serviceMapping(to: "github/frontend_systems") {
  """
  Time request took to upload took in milliseconds
  """
  duration: Int!

  """
  The type of file that was attempted to be uploaded
  """
  fileType: String

  """
  The upload's number of bytes
  """
  size: Int

  """
  Did the upload succeed?
  """
  success: Boolean!
}

"""
https://web.dev/vitals/
"""
input BrowserPerformanceWebVitalTiming @internal @serviceMapping(to: "github/frontend_systems") {
  """
  Cumulative Layout Shift
  """
  cls: Float

  """
  First Contentful Paint
  """
  fcp: Float

  """
  First Input Delay
  """
  fid: Float

  """
  Largest Contentful Paint
  """
  lcp: Float

  """
  The address of the current document.
  """
  name: URI!

  """
  Time to First Byte
  """
  ttfb: Float
}

"""
A web browser stat.
"""
input BrowserStat @internal @serviceMapping(to: "github/frontend_systems") {
  """
  A list of asset bundles downloaded.
  """
  downloadedBundles: [String!]

  """
  A serialized client information object
  """
  hydroClientContext: String

  """
  A HMAC of the serialized Hydro event payload.
  """
  hydroEventHmac: String

  """
  A serialized Hydro event payload.
  """
  hydroEventPayload: String

  """
  Increments DataDog counter.
  """
  incrementKey: BrowserIncrementKey

  """
  True if a user is signed in with a session.
  """
  loggedIn: Boolean = false

  """
  A list of Long Tasks
  """
  longTasks: [BrowserPerformanceLongTask!]

  """
  A list of `PerformanceNavigationTiming` data retrieved via `performance.getEntriesByType('navigation')`.
  """
  navigationTimings: [BrowserPerformanceNavigationTiming!]

  """
  Request's PJAX duration in milliseconds
  """
  pjaxDuration: Int

  """
  The reason why a PJAX request failed
  """
  pjaxFailureReason: String

  """
  Request UUID associated with reported stats.
  """
  requestId: String

  """
  Request URL associated with reported stats.
  """
  requestUrl: URI

  """
  A list of `PerformanceResourceTiming` data retrieved via `performance.getEntriesByType('resource')`.
  """
  resourceTimings: [BrowserPerformanceResourceTiming!]

  """
  UNIX timestamp of stat in milliseconds.
  """
  timestamp: Int

  """
  Stats related to attachment upload
  """
  uploadTiming: BrowserPerformanceUploadTiming

  """
  A HMAC of the serialized visitor payload.
  """
  visitorHmac: String

  """
  A serialized visitor payload.
  """
  visitorPayload: String

  """
  A list of Web Vitals measurements.
  """
  webVitalTimings: [BrowserPerformanceWebVitalTiming!]
}

"""
Audit log entry for a business.add_organization event.
"""
type BusinessAddOrganizationAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The Common Vulnerability Scoring System
"""
type CVSS @serviceMapping(to: "github/advisory_database") {
  """
  The CVSS score associated with this advisory
  """
  score: Float!

  """
  The CVSS vector string associated with this advisory
  """
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node @serviceMapping(to: "github/advisory_database") @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  The id of the CWE
  """
  cweId: String!

  """
  A detailed description of this CWE
  """
  description: String!
  id: ID!

  """
  The name of this CWE
  """
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection @serviceMapping(to: "github/advisory_database") {
  """
  A list of edges.
  """
  edges: [CWEEdge]

  """
  A list of nodes.
  """
  nodes: [CWE]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge @serviceMapping(to: "github/advisory_database") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise administrator invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseAdministratorInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""
Autogenerated input type of CancelEnterpriseOrganizationInvitation
"""
input CancelEnterpriseOrganizationInvitationInput
  @underDevelopment(since: "2019-07-01")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pending enterprise organization invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseOrganizationInvitation"])
}

"""
Autogenerated return type of CancelEnterpriseOrganizationInvitation
"""
type CancelEnterpriseOrganizationInvitationPayload
  @underDevelopment(since: "2019-07-01")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was canceled.
  """
  invitation: EnterpriseOrganizationInvitation
}

"""
Autogenerated input type of CancelPendingMarketplaceChange
"""
input CancelPendingMarketplaceChangeInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pending marketplace change you wish to cancel.
  """
  id: ID!
}

"""
Autogenerated return type of CancelPendingMarketplaceChange
"""
type CancelPendingMarketplaceChangePayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending change for the marketplace purchase.
  """
  pendingMarketplaceChange: PendingMarketplaceChange
}

"""
Autogenerated input type of CancelPendingTeamChangeParentRequest
"""
input CancelPendingTeamChangeParentRequestInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team change parent request ID to cancel
  """
  requestId: ID! @possibleTypes(concreteTypes: ["TeamChangeParentRequest"])
}

"""
Autogenerated return type of CancelPendingTeamChangeParentRequest
"""
type CancelPendingTeamChangeParentRequestPayload @internal @serviceMapping(to: "github/teams") {
  """
  Was the request cancelled?
  """
  cancelled: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CancelSubscriptionItem
"""
input CancelSubscriptionItemInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the subscription item to cancel.
  """
  id: ID! @possibleTypes(concreteTypes: ["SubscriptionItem"])

  """
  Whether to immediately cancel or schedule pending downgrade
  """
  immediatelyCancel: Boolean!
}

"""
Autogenerated return type of CancelSubscriptionItem
"""
type CancelSubscriptionItemPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The cancelled subscription item's free trial state, before cancellation.
  """
  onFreeTrial: Boolean

  """
  The subscription tied to the cancelled item's account.
  """
  subscription: Subscription

  """
  The cancelled subscription item.
  """
  subscriptionItem: SubscriptionItem
}

"""
Name attributes from an X.509 certificate.
"""
type CertificateAttributes @internal {
  """
  CN attribute
  """
  commonName: String

  """
  emailAddress attribute
  """
  emailAddress: String

  """
  O attribute
  """
  organization: String

  """
  OU attributes
  """
  organizationUnit: String
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """
  If set, the user status will not be shown after this date.
  """
  expiresAt: DateTime

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """
  A short description of your current status.
  """
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible.
  """
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Your updated status.
  """
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation @serviceMapping(to: "github/checks_api") {
  """
  The annotation's severity level.
  """
  annotationLevel: CheckAnnotationLevel

  """
  The path to the file that this annotation was made on.
  """
  blobUrl: URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Whether there's an explicit title in this annotation
  """
  hasTitle: Boolean! @internal

  """
  The position of this annotation.
  """
  location: CheckAnnotationSpan!

  """
  The annotation's message.
  """
  message: String!

  """
  The path that this annotation was made on.
  """
  path: String!

  """
  Additional information about the annotation.
  """
  rawDetails: String

  """
  Suggested change for targeted line in annotation which can be applied
  """
  suggestedChange: String @underDevelopment(since: "2019-07-18")

  """
  The annotation's title
  """
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection @serviceMapping(to: "github/checks_api") {
  """
  A list of edges.
  """
  edges: [CheckAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [CheckAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData @serviceMapping(to: "github/checks_api") {
  """
  Represents an annotation's information level
  """
  annotationLevel: CheckAnnotationLevel!

  """
  The location of the annotation
  """
  location: CheckAnnotationRange!

  """
  A short description of the feedback for these lines of code.
  """
  message: String!

  """
  The path of the file to add an annotation to.
  """
  path: String!

  """
  Details about this annotation.
  """
  rawDetails: String

  """
  The title that represents the annotation.
  """
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge @serviceMapping(to: "github/checks_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel @serviceMapping(to: "github/checks_api") {
  """
  An annotation indicating an inescapable error.
  """
  FAILURE

  """
  An annotation indicating some information.
  """
  NOTICE

  """
  An annotation indicating an ignorable error.
  """
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition @serviceMapping(to: "github/checks_api") {
  """
  Column number (1 indexed).
  """
  column: Int

  """
  Line number (1 indexed).
  """
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange @serviceMapping(to: "github/checks_api") {
  """
  The ending column of the range.
  """
  endColumn: Int

  """
  The ending line of the range.
  """
  endLine: Int!

  """
  The starting column of the range.
  """
  startColumn: Int

  """
  The starting line of the range.
  """
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan @serviceMapping(to: "github/checks_api") {
  """
  End position (inclusive).
  """
  end: CheckAnnotationPosition!

  """
  Start position (inclusive).
  """
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  """
  The check suite or run requires action.
  """
  ACTION_REQUIRED

  """
  The check suite or run has been cancelled.
  """
  CANCELLED

  """
  The check suite or run has failed.
  """
  FAILURE

  """
  The check suite or run was neutral.
  """
  NEUTRAL

  """
  The check suite or run was skipped.
  """
  SKIPPED

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE

  """
  The check suite or run has failed at startup.
  """
  STARTUP_FAILURE

  """
  The check suite or run has succeeded.
  """
  SUCCESS

  """
  The check suite or run has timed out.
  """
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable
  @serviceMapping(to: "github/checks_api")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  The check run's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): CheckAnnotationConnection

  """
  The check suite that this run is a part of.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the check run was completed.
  """
  completedAt: DateTime

  """
  The completed logs for this check run.
  """
  completedLog: CompletedLog

  """
  The conclusion of the check run.
  """
  conclusion: CheckConclusionState

  """
  Check run name as shown in the merge box and dropdowns that show the list of
  contexts (statuses and check runs) which includes the event and check suite
  names if available.
  """
  contextualName: String! @internal

  """
  The GitHub App bot associated with the check run.
  """
  creator: Bot @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The corresponding deployment for this job, if any
  """
  deployment: Deployment

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: URI

  """
  Optional name that will be shown in the UI overwriting the name field.
  """
  displayName: String @internal

  """
  The time it took to run the check (in seconds).
  """
  duration: Int!

  """
  A reference for the check run on the integrator's system.
  """
  externalId: String
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The name of the check for this check run.
  """
  name: String!

  """
  The topological order of the check run within the check suite.
  """
  number: Int @internal

  """
  Information about a pending deployment, if any, in this check run
  """
  pendingDeploymentRequest: DeploymentRequest

  """
  The permalink to the check run summary.
  """
  permalink: URI!

  """
  The repository associated with this check run.
  """
  repository: Repository!

  """
  The HTTP path for this check run.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the check run was started.
  """
  startedAt: DateTime

  """
  The current status of the check run.
  """
  status: CheckStatusState!

  """
  The check run's steps
  """
  steps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Step number
    """
    number: Int
  ): CheckStepConnection

  """
  Streaming log information for this check-run.
  """
  streamingLog: StreamingLog

  """
  A string representing the check run's summary
  """
  summary: String

  """
  A string representing the check run's text
  """
  text: String

  """
  A string representing the check run
  """
  title: String

  """
  The HTTP URL for this check run.
  """
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction @serviceMapping(to: "github/checks_api") {
  """
  A short explanation of what this action would do.
  """
  description: String!

  """
  A reference for the action on the integrator's system.
  """
  identifier: String!

  """
  The text to be displayed on a button in the web UI.
  """
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection @serviceMapping(to: "github/checks_api") {
  """
  A list of edges.
  """
  edges: [CheckRunEdge]

  """
  A list of nodes.
  """
  nodes: [CheckRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge @serviceMapping(to: "github/checks_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter @serviceMapping(to: "github/checks_api") {
  """
  Filters the check runs created by this application ID.
  """
  appId: Int

  """
  Filters the check runs by this name.
  """
  checkName: String

  """
  Filters the check runs by this type.
  """
  checkType: CheckRunType

  """
  Filters the check runs by this status.
  """
  status: CheckStatusState
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput @serviceMapping(to: "github/checks_api") {
  """
  The annotations that are made as part of the check run.
  """
  annotations: [CheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [CheckRunOutputImage!]

  """
  The summary of the check run (supports Commonmark).
  """
  summary: String!

  """
  The details of the check run (supports Commonmark).
  """
  text: String

  """
  A title to provide for this check run.
  """
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage @serviceMapping(to: "github/checks_api") {
  """
  The alternative text for the image.
  """
  alt: String!

  """
  A short image description.
  """
  caption: String

  """
  The full URL of the image.
  """
  imageUrl: URI!
}

"""
The possible types of check runs.
"""
enum CheckRunType @serviceMapping(to: "github/checks_api") {
  """
  Every check run available.
  """
  ALL

  """
  The latest check run.
  """
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run has been requested.
  """
  REQUESTED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
A single check step.
"""
type CheckStep @serviceMapping(to: "github/checks_api") {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The completed logs for this step.
  """
  completedLog: CompletedLog

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The step's name.
  """
  name: String!

  """
  The index of the step in the list of steps of the parent check run.
  """
  number: Int!

  """
  Number of seconds to completion.
  """
  secondsToCompletion: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection @serviceMapping(to: "github/checks_api") {
  """
  A list of edges.
  """
  edges: [CheckStepEdge]

  """
  A list of nodes.
  """
  nodes: [CheckStep]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information from a check step.
"""
input CheckStepData @serviceMapping(to: "github/checks_api") {
  """
  Identifies the date and time when the check step was completed.
  """
  completedAt: DateTime

  """
  The completed log information
  """
  completedLog: CompletedLogData

  """
  The conclusion of the check step.
  """
  conclusion: CheckConclusionState

  """
  A reference for the check step on the integrator's system.
  """
  externalId: String

  """
  The name of the step.
  """
  name: String

  """
  The index of the step.
  """
  number: Int

  """
  Identifies the date and time when the check step was started.
  """
  startedAt: DateTime

  """
  The current status of the check step.
  """
  status: CheckStatusState!
}

"""
An edge in a connection.
"""
type CheckStepEdge @serviceMapping(to: "github/checks_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node @serviceMapping(to: "github/checks_api") @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  The check suite's annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): CheckAnnotationConnection @internal

  """
  The GitHub App which created this check suite.
  """
  app: App

  """
  The check suite's artifacts
  """
  artifacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ArtifactOrder = {field: CREATED_AT, direction: DESC}
  ): ArtifactConnection @internal

  """
  The name of the branch for this check suite.
  """
  branch: Ref

  """
  The check runs associated with a check suite.
  """
  checkRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check runs by this type.
    """
    filterBy: CheckRunFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): CheckRunConnection

  """
  Whether or not the individual runs in this check suite are re-runnable.
  """
  checkRunsRerunnable: Boolean! @underDevelopment(since: "2018-11-29")

  """
  The commit for this check suite
  """
  commit: Commit!

  """
  The URL to the completed logs of this check suite.
  """
  completedLogUrl: URI @internal

  """
  The conclusion of this check suite.
  """
  conclusion: CheckConclusionState

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user who triggered the check suite.
  """
  creator: User

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The duration of the last execution of the check suite
  """
  duration: Int! @internal

  """
  The event that prompted this check suite, e.g 'pull_request'. Only used by GitHub Actions.
  """
  event: String @internal

  """
  Whether or not this check suite has reruns
  """
  hasReruns: Boolean! @internal
  id: ID!

  """
  A list of open pull requests matching the check suite.
  """
  matchingPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Whether or not this request is coming from the REST API
    """
    apiSerializerRequest: Boolean @internal

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection

  """
  The creator-supplied name for the CheckSuite. Currently only used by GitHub Actions, where it is the workflow name.
  """
  name: String @internal

  """
  The push that triggered this check suite.
  """
  push: Push

  """
  The repository associated with this check suite.
  """
  repository: Repository!

  """
  Whether or not this check suite is re-requestable.
  """
  rerequestable: Boolean! @underDevelopment(since: "2018-11-29")

  """
  The HTTP path for this check suite
  """
  resourcePath: URI!

  """
  The status of this check suite.
  """
  status: CheckStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this check suite
  """
  url: URI!

  """
  The path of the workflow file
  """
  workflowFilePath: String @internal

  """
  The name of the workflow with a fallback value
  """
  workflowName: String! @internal

  """
  The workflow run associated with this check suite.
  """
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference @serviceMapping(to: "github/checks_api") {
  """
  The node ID of the application that owns the check suite.
  """
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection @serviceMapping(to: "github/checks_api") {
  """
  A list of edges.
  """
  edges: [CheckSuiteEdge]

  """
  A list of nodes.
  """
  nodes: [CheckSuite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge @serviceMapping(to: "github/checks_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter @serviceMapping(to: "github/checks_api") {
  """
  Filters the check suites created by this application ID.
  """
  appId: Int

  """
  Filters the check suites by this name.
  """
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClassifyAccountsAsHammy
"""
input ClassifyAccountsAsHammyInput @internal @serviceMapping(to: "github/account_classification") {
  """
  The global relay id of accounts to classify hammy.
  """
  accountIds: [ID!]!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Instrument the abuse classification hydro event.
  """
  instrumentAbuseClassification: Boolean = true

  """
  The system that performed this classification.
  """
  origin: String = "origin_unknown"

  """
  The rule that performed this classification.
  """
  ruleName: String

  """
  The rule that performed this classification.
  """
  ruleVersion: String
}

"""
Autogenerated return type of ClassifyAccountsAsHammy
"""
type ClassifyAccountsAsHammyPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  The accounts marked hammy.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ClassifyAccountsAsSpammy
"""
input ClassifyAccountsAsSpammyInput @internal @serviceMapping(to: "github/account_classification") {
  """
  The global relay id of accounts to classify spammy.
  """
  accountIds: [ID!]!

  """
  When classifying/suspending an organization, also classify/suspend its owners.
  """
  classifyOrgOwnersAsSpammy: Boolean

  """
  When classifying/suspending a user, also classify/suspend all owned organizations.
  """
  classifyOwnedOrgsAsSpammy: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Hard flag accounts as spammy.
  """
  hardFlag: Boolean

  """
  Instrument the abuse classification hydro event.
  """
  instrumentAbuseClassification: Boolean = true

  """
  The system that performed this classification.
  """
  origin: String = "origin_unknown"

  """
  Reason for marking accounts spammy.
  """
  reason: String!

  """
  The rule that performed this classification.
  """
  ruleName: String

  """
  The rule that performed this classification.
  """
  ruleVersion: String

  """
  Suspend accounts.
  """
  suspend: Boolean
}

"""
Autogenerated return type of ClassifyAccountsAsSpammy
"""
type ClassifyAccountsAsSpammyPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  The accounts marked spammy.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ClearAccountClassifications
"""
input ClearAccountClassificationsInput @internal @serviceMapping(to: "github/account_classification") {
  """
  The global relay ids of accounts to clear.
  """
  accountIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Instrument the abuse classification hydro event.
  """
  instrumentAbuseClassification: Boolean = true

  """
  The system that performed this classification.
  """
  origin: String = "origin_unknown"
}

"""
Autogenerated return type of ClearAccountClassifications
"""
type ClearAccountClassificationsPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  The unclassified accounts.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to clear the labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-27")

  """
  The item that was unlabeled.
  """
  labelable: Labelable
}

"""
Autogenerated input type of ClearMobileDeviceTokens
"""
input ClearMobileDeviceTokensInput
  @underDevelopment(since: "2019-09-23")
  @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The push notification service that issued the device tokens.
  """
  service: PushNotificationService

  """
  ID the user from whom to clear device tokens.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of ClearMobileDeviceTokens
"""
type ClearMobileDeviceTokensPayload
  @underDevelopment(since: "2019-09-23")
  @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput @serviceMapping(to: "github/projects") {
  """
  The description of the project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to clone the source project's workflows.
  """
  includeWorkflows: Boolean!

  """
  The name of the project.
  """
  name: String!

  """
  The visibility of the project, defaults to false (private).
  """
  public: Boolean

  """
  The source project to clone.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The owner ID to create the project under.
  """
  targetOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the JobStatus for populating cloned fields.
  """
  jobStatusId: String

  """
  The new cloned project.
  """
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The Node ID of the template repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be closed.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was closed.
  """
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be closed.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was closed.
  """
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & PerformableViaApp & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was closed.
  """
  closable: Closable!

  """
  Object which triggered the creation of this event.
  """
  closer: Closer

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The HTTP path for this closed event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this closed event.
  """
  url: URI!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node
  @serviceMapping(to: "github/community_and_safety")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  The body of the Code of Conduct
  """
  body: String
  id: ID!

  """
  The key for the Code of Conduct
  """
  key: String!

  """
  The formal name of the Code of Conduct
  """
  name: String!

  """
  The Repository containing the Code of Conduct
  """
  repository: Repository @internal

  """
  The HTTP path for this Code of Conduct
  """
  resourcePath: URI

  """
  The HTTP URL for this Code of Conduct
  """
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  """
  All collaborators the authenticated user can see.
  """
  ALL

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """
  All outside collaborators of an organization-owned subject.
  """
  OUTSIDE
}

"""
A CollectionItem is a Repository, User, Organization or other interesting links.
"""
type CollectionItem implements Node @internal @serviceMapping(to: "github/explore") {
  """
  The collection item content.
  """
  content: CollectionItemContent

  """
  The type of the content item.
  """
  contentType: String!
  id: ID!

  """
  The collection item's slug name.
  """
  slug: String!
}

"""
The connection type for CollectionItem.
"""
type CollectionItemConnection @internal @serviceMapping(to: "github/explore") {
  """
  A list of edges.
  """
  edges: [CollectionItemEdge]

  """
  A list of nodes.
  """
  nodes: [CollectionItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Types that can be inside Collection Items.
"""
union CollectionItemContent @serviceMapping(to: "github/explore") =
    CollectionUrl
  | CollectionVideo
  | Organization
  | Repository
  | User

"""
An edge in a connection.
"""
type CollectionItemEdge @internal @serviceMapping(to: "github/explore") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CollectionItem
}

"""
A type of collection item comprised of a URL.
"""
type CollectionUrl implements Node @internal @serviceMapping(to: "github/explore") {
  """
  The collection URL's description.
  """
  description: String!
  id: ID!

  """
  The collection URL's title.
  """
  title: String!

  """
  The collection URL's URL.
  """
  url: URI!
}

"""
A type of collection item comprised of a Video.
"""
type CollectionVideo implements Node @internal @serviceMapping(to: "github/explore") {
  """
  The collection video's description.
  """
  description: String!
  id: ID!

  """
  The collection video's thumbnail URL.
  """
  thumbnailUrl: URI

  """
  The collection video's title.
  """
  title: String!

  """
  The collection video's URL.
  """
  url: URI!
}

"""
Represents a comment.
"""
interface Comment {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  """
  Author has been invited to collaborate on the repository.
  """
  COLLABORATOR

  """
  Author has previously committed to the repository.
  """
  CONTRIBUTOR

  """
  Author has not previously committed to GitHub.
  """
  FIRST_TIMER

  """
  Author has not previously committed to the repository.
  """
  FIRST_TIME_CONTRIBUTOR

  """
  Author is a placeholder for an unclaimed user.
  """
  MANNEQUIN

  """
  Author is a member of the organization that owns the repository.
  """
  MEMBER

  """
  Author has no association with the repository.
  """
  NONE

  """
  Author is the owner of the repository.
  """
  OWNER
}

"""
The formatter used to process the comment body in our HTML pipeline.
"""
enum CommentBodyFormatter @internal {
  """
  The comment body was created from an email, and should be processed as such.
  """
  EMAIL

  """
  The comment body should be processed as GitHub-flavored Markdown.
  """
  MARKDOWN
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  """
  Unable to create comment because repository is archived.
  """
  ARCHIVED

  """
  You cannot update this comment
  """
  DENIED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """
  Unable to create comment because issue is locked.
  """
  LOCKED

  """
  You must be logged in to update this comment.
  """
  LOGIN_REQUIRED

  """
  Repository is under maintenance.
  """
  MAINTENANCE

  """
  At least one email address must be verified to update this comment.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user who authored the deleted comment.
  """
  deletedCommentAuthor: Actor
  id: ID!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
An object that can be commented on
"""
interface Commentable @internal @serviceMapping(to: "github/issues") {
  """
  Indicates whether the issue or pull request has exceeded the comment limit.
  """
  overCommentLimit: Boolean! @underDevelopment(since: "2018-10-02")

  """
  Indicates whether the current user has been blocked by the issue or pull request's author.
  """
  viewerBlockedByAuthor: Boolean! @internal

  """
  Indicates whether the current user can add a new comment.
  """
  viewerCanComment: Boolean! @underDevelopment(since: "2018-10-02")
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable
  @serviceMapping(to: "github/commit")
  @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The number of additions in this commit.
  """
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the
  commit is not present in the default branch, additionally returns open Pull
  Requests associated with the commit
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests.
    """
    orderBy: PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): PullRequestConnection

  """
  Authorship details of the commit.
  """
  author: GitActor

  """
  Check if the committer and the author match.
  """
  authoredByCommitter: Boolean!

  """
  The datetime when this commit was authored.
  """
  authoredDate: DateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  """
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ensure that only the first GitActor is returned when two GitActors have the same user.
    """
    uniqueUsers: Boolean = false @internal
  ): GitActorConnection!

  """
  Fetches `git blame` information.
  """
  blame(
    """
    Filter blame by line numbers
    """
    lineNumbers: [Int!] @internal

    """
    The file whose Git blame information you want.
    """
    path: String!
  ): Blame!

  """
  The number of changed files in this commit.
  """
  changedFiles: Int!

  """
  The check suites associated with a commit.
  """
  checkSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters the check suites by this type.
    """
    filterBy: CheckSuiteFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): CheckSuiteConnection

  """
  Comments made on the commit.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit comments returned from the connection.
    """
    orderBy: CommitCommentOrder @internal
  ): CommitCommentConnection!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  The datetime when this commit was committed.
  """
  committedDate: DateTime!

  """
  Check if committed via GitHub web UI.
  """
  committedViaWeb: Boolean!

  """
  Committer details of the commit.
  """
  committer: GitActor

  """
  The number of deletions in this commit.
  """
  deletions: Int!

  """
  The deployments associated with a commit.
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection

  """
  The diff of changes introduced by this commit.
  """
  diff: Diff

  """
  The tree entry representing the file located at the given path.
  """
  file(
    """
    The path for the file
    """
    path: String!
  ): TreeEntry

  """
  The commit has a signature
  """
  hasSignature: Boolean! @internal

  """
  Does this commit have any Check and Status rollup
  """
  hasStatusCheckRollup: Boolean! @internal

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    Allows specifying a beginning time or date for fetching commits.
    """
    since: GitTimestamp

    """
    Allows specifying an ending time or date for fetching commits.
    """
    until: GitTimestamp
  ): CommitHistoryConnection!
  id: ID!

  """
  The Git commit message
  """
  message: String!

  """
  The Git commit message body
  """
  messageBody: String!

  """
  The commit message body rendered to HTML.
  """
  messageBodyHTML: HTML!

  """
  The Git commit message headline
  """
  messageHeadline: String!

  """
  The commit message headline rendered to HTML.
  """
  messageHeadlineHTML: HTML!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The organization this commit was made on behalf of.
  """
  onBehalfOf: Organization

  """
  The parents of a commit.
  """
  parents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection!

  """
  The datetime when this commit was pushed.
  """
  pushedDate: DateTime

  """
  The Repository this commit belongs to
  """
  repository: Repository!

  """
  The HTTP path for this commit
  """
  resourcePath: URI!

  """
  A truncated version of the message body, rendered as HTML
  """
  shortMessageBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-11-20")

  """
  Commit signing information, if present.
  """
  signature: GitSignature

  """
  Status information for this commit
  """
  status: Status

  """
  Check and Status rollup information for this commit.
  """
  statusCheckRollup: StatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """
  Commit's root Tree
  """
  tree: Tree!

  """
  The HTTP path for the tree of this commit
  """
  treeResourcePath: URI!

  """
  The HTTP URL for the tree of this commit
  """
  treeUrl: URI!

  """
  The HTTP URL for this commit
  """
  url: URI!

  """
  Status of a commit when at the least one author has enabled vigilant mode
  """
  verificationStatus: CommitVerificationStatus @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  The websocket channel ID for live updates.
  """
  websocket: String! @internal

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]

  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements AbuseReportable & Blockable & Comment & Deletable & Minimizable & Node & Reactable & Reportable & RepositoryNode & Updatable & UpdatableComment
  @serviceMapping(to: "github/commit_comment")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Identifies the file path associated with the comment.
  """
  path: String

  """
  Identifies the line position associated with the comment.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this commit comment.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  The HTTP path to the endpoint for updating this commit comment.
  """
  updateResourcePath: URI!
    @deprecated(reason: "Object-specific update endpoints will be removed. Removal on 2018-07-01 UTC.")
    @internal

  """
  The HTTP URL to the endpoint for updating this commit comment.
  """
  updateUrl: URI!
    @deprecated(reason: "Object-specific update endpoints will be removed. Removal on 2018-07-01 UTC.")
    @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this commit comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection @serviceMapping(to: "github/commit_comment") {
  """
  A list of edges.
  """
  edges: [CommitCommentEdge]

  """
  A list of nodes.
  """
  nodes: [CommitComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge @serviceMapping(to: "github/commit_comment") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommitComment
}

"""
Ways in which lists of commit comments can be ordered upon return.
"""
input CommitCommentOrder @serviceMapping(to: "github/commit_comment") {
  """
  The direction in which to order commit comments by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order commit comments by.
  """
  field: CommitCommentOrderField!
}

"""
Properties by which commit comment connections can be ordered.
"""
enum CommitCommentOrderField @serviceMapping(to: "github/commit_comment") {
  """
  Order commit comments by update time
  """
  UPDATED_AT
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode
  @serviceMapping(to: "github/commit_comment")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit comments returned from the connection.
    """
    orderBy: CommitCommentOrder @internal
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection @serviceMapping(to: "github/commit") {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder @serviceMapping(to: "github/profiles") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field by which to order commit contributions.
  """
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField @serviceMapping(to: "github/profiles") {
  """
  Order commit contributions by how many commits they represent.
  """
  COMMIT_COUNT

  """
  Order commit contributions by when they were made.
  """
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository @serviceMapping(to: "github/profiles") {
  """
  The commit contributions, each representing a day.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): CreatedCommitContributionConnection!

  """
  The repository in which the commits were made.
  """
  repository: Repository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: URI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge @serviceMapping(to: "github/commit") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection @serviceMapping(to: "github/commit") {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Records @mentions happening in commit messages
"""
type CommitMention implements Node @internal {
  """
  Identifies the user who created the mention.
  """
  author: User!

  """
  Identifies the commit associated with the mention.
  """
  commit: Commit!
  id: ID!

  """
  Identifies the repository associated with the mention.
  """
  repository: Repository!
}

"""
A revision names a commit object.
"""
type CommitRevision implements Node & RepositoryNode @internal {
  """
  The commit this revision resolves to.
  """
  commit: Commit

  """
  Look up directory under the commit tree
  """
  directory(
    """
    The file path
    """
    path: String
  ): CommittishDirectory

  """
  Look up file under the commit tree.
  """
  file(
    """
    The file path.
    """
    path: String!
  ): CommittishFile
  id: ID!

  """
  The name that can be resolved to a commit.

  It uses what is called an extended SHA-1 syntax.

  Examples:
  * "dae86e1950b1277e545cee180551750029cfe735"
  * "dae86e"
  * "v1.7.4.2-679-g3bee7fb"
  * "HEAD"
  * "master"

  See https://www.git-scm.com/docs/git-rev-parse#_specifying_revisions for more examples.
  """
  name: String!

  """
  The repository associated with this revision.
  """
  repository: Repository!
}

"""
The status of a commit verification
"""
enum CommitVerificationStatus @serviceMapping(to: "github/commit") {
  """
  A signed commit is valid and at least one author has enabled vigilant mode
  """
  PARTIALLY_VERIFIED

  """
  An unsigned commit
  """
  UNSIGNED

  """
  A commit where the signature cannot be verified
  """
  UNVERIFIED

  """
  A signed commit is valid and all authors have enabled vigilant mode
  """
  VERIFIED
}

"""
Represents a git tree that is bound under a commit.
"""
type CommittishDirectory implements CommittishObject & Node & RepositoryNode & UniformResourceLocatable @internal {
  """
  The directory's path from the tree root.

  Examples
  * "" (root directory is indicated by an empty string)
  * "lib"
  * "src/example/foo/bar"
  """
  filePath: String!
  id: ID!

  """
  The git object this file path resolves to.
  """
  object: GitObject!

  """
  The repository associated with this directory.
  """
  repository: Repository!

  """
  The HTTP path for this directory
  """
  resourcePath: URI!

  """
  The commit revision object associated with this directory.
  """
  revision: CommitRevision!

  """
  The tree object this directory path resolves to.
  """
  tree: Tree!

  """
  The HTTP URL for this directory
  """
  url: URI!
}

"""
Represents a git blob that is bound under a commit.
"""
type CommittishFile implements CommittishObject & Node & RepositoryNode & UniformResourceLocatable
  @internal
  @serviceMapping(to: "github/repo_info") {
  """
  The blob object this file path resolves to.
  """
  blob: Blob!

  """
  The file's path from the tree root.

  Examples
  * "README.md"
  * "lib/main.c"
  * "src/example/foo/Bar.java"
  """
  filePath: String!
  id: ID!

  """
  The git object this file path resolves to.
  """
  object: GitObject!

  """
  Detected Render file type.
  """
  renderFileType(
    """
    How the rendered file is displayed
    """
    displayType: RenderDisplayType
  ): RenderFileType

  """
  URL of external rendered content
  """
  renderUrl(
    """
    How the rendered file is displayed
    """
    displayType: RenderDisplayType
  ): URI

  """
  The repository associated with this file.
  """
  repository: Repository!

  """
  The HTTP path for this file
  """
  resourcePath: URI!

  """
  The commit revision object associated with this file.
  """
  revision: CommitRevision!

  """
  The HTTP URL for this file
  """
  url: URI!
}

"""
The connection type for CommittishFile.
"""
type CommittishFileConnection @internal @serviceMapping(to: "github/repo_info") {
  """
  A list of edges.
  """
  edges: [CommittishFileEdge]

  """
  A list of nodes.
  """
  nodes: [CommittishFile]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommittishFileEdge @internal @serviceMapping(to: "github/repo_info") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommittishFile
}

"""
Represents a git object that is bound under a commit.
"""
interface CommittishObject @internal {
  """
  The file's path from the tree root.

  Examples
  * "README.md"
  * "lib"
  * "lib/main.c"
  """
  filePath: String!
  id: ID!

  """
  The git object this file path resolves to.
  """
  object: GitObject!

  """
  The repository associated with this object.
  """
  repository: Repository!

  """
  The commit revision object associated with this object.
  """
  revision: CommitRevision!
}

"""
A community contributor collection aggregates contributors based on a repositories direct or transitive dependencies.
"""
type CommunityContributorsCollection @serviceMapping(to: "github/dependency_graph") {
  """
  List of users who have made contributions to a repository through its direct dependencies
  """
  directContributors(
    """
    The max number of direct community contributors to return
    """
    limit: Int = 50

    """
    The direct community contributors offset
    """
    offset: Int = 0
  ): [User!]!

  """
  Total unique count of a repositories direct community contributors
  """
  directContributorsCount: Int!

  """
  List of users who have made contributions to a repository through its transitive dependencies
  """
  transitiveContributors(
    """
    The max number of transitive community contributors to return
    """
    limit: Int = 50

    """
    The transitive community contributors offset
    """
    offset: Int = 0
  ): [User!]!

  """
  Total unique count of a repositories transitive community contributors
  """
  transitiveContributorsCount: Int!
}

"""
Information about a repository's community engagement.
"""
type CommunityProfile @internal @serviceMapping(to: "github/community_and_safety") {
  """
  Returns a count of how many open issues in the repository have the label 'good first
  issue'.
  """
  goodFirstIssueIssuesCount: Int!

  """
  Indicates if this repository allows reporting content to its maintainers. This
  feature is only available for organization owned repositories.
  """
  hasContentReportsEnabled: Boolean!

  """
  Returns a count of how many open issues in the repository have the label 'help wanted'.
  """
  helpWantedIssuesCount: Int!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node @internal {
  """
  The comments associated with this comparison's commits.
  """
  commitComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  The commits which compose this comparison.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComparisonCommitConnection!
  id: ID!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection @internal @serviceMapping(to: "github/commit") {
  """
  The total count of authors and co-authors across all commits.
  """
  authorCount: Int!

  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A completed log
"""
type CompletedLog @internal @serviceMapping(to: "github/checks_api") {
  """
  The number of lines in the log.
  """
  lines: Int!

  """
  The URL where this completed log can be found.
  """
  url: URI!
}

"""
Information from a check step.
"""
input CompletedLogData @internal @serviceMapping(to: "github/checks_api") {
  """
  The number of lines in the log.
  """
  lines: Int!

  """
  The URL where this completed log can be found.
  """
  url: URI!
}

"""
concurrency data.
"""
input Concurrency @serviceMapping(to: "github/actions") {
  """
  Group name the run is waiting for.
  """
  group: String!

  """
  Information containing which resources are blocking
  """
  waitingOnResource: WaitingOnResource
}

"""
Autogenerated input type of ConfirmEnterpriseOrganizationInvitation
"""
input ConfirmEnterpriseOrganizationInvitationInput
  @underDevelopment(since: "2019-02-18")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the accepted enterprise organization invitation.
  """
  invitationId: ID! @possibleTypes(concreteTypes: ["EnterpriseOrganizationInvitation"])
}

"""
Autogenerated return type of ConfirmEnterpriseOrganizationInvitation
"""
type ConfirmEnterpriseOrganizationInvitationPayload
  @underDevelopment(since: "2019-02-18")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The invitation that was confirmed.
  """
  invitation: EnterpriseOrganizationInvitation
}

"""
Autogenerated input type of ConfirmRecoveryToken
"""
input ConfirmRecoveryTokenInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The DelegatedRecoveryToken ID to delete.
  """
  tokenId: String!
}

"""
Autogenerated return type of ConfirmRecoveryToken
"""
type ConfirmRecoveryTokenPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The subject
  """
  tokenOwner: User
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node & TimelineEvent
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was connected.
  """
  subject: ReferencedSubject!
}

"""
A content attachment
"""
type ContentAttachment @serviceMapping(to: "github/extensibility") {
  """
  The body text of the content attachment. This parameter supports markdown.
  """
  body: String!

  """
  The content reference that the content attachment is attached to.
  """
  contentReference: ContentReference!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int!
  id: ID!

  """
  The title of the content attachment.
  """
  title: String!
}

"""
A content reference
"""
type ContentReference @serviceMapping(to: "github/extensibility") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int!
  id: ID!

  """
  The reference of the content reference.
  """
  reference: String!
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar @serviceMapping(to: "github/profiles") {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """
  A list of the months of contributions in this calendar.
  """
  months: [ContributionCalendarMonth!]!

  """
  The HTTP path for the user's contributions graph.
  """
  resourcePath: URI! @underDevelopment(since: "2018-07-17")

  """
  The count of total contributions in the calendar.
  """
  totalContributions: Int!

  """
  The HTTP URL for the user's contributions graph.
  """
  url: URI! @underDevelopment(since: "2018-07-17")

  """
  A list of the weeks of contributions in this calendar.
  """
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay @serviceMapping(to: "github/profiles") {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """
  How many contributions were made by the user on this day.
  """
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate
  which color to represent this day on a calendar.
  """
  contributionLevel: ContributionLevel!

  """
  The day this square represents.
  """
  date: Date!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth @serviceMapping(to: "github/profiles") {
  """
  The date of the first day of this month.
  """
  firstDay: Date!

  """
  The name of the month.
  """
  name: String!

  """
  How many weeks started in this month.
  """
  totalWeeks: Int!

  """
  The year the month occurred in.
  """
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek @serviceMapping(to: "github/profiles") {
  """
  The days of contributions in this week.
  """
  contributionDays: [ContributionCalendarDay!]!

  """
  The date of the earliest square in this week.
  """
  firstDay: Date!
}

"""
The amount a user has of a given type of contribution.
"""
type ContributionCount @underDevelopment(since: "2018-07-26") @serviceMapping(to: "github/profiles") {
  """
  The count of contributions of this type.
  """
  count: Int!

  """
  The type of contribution.
  """
  name: String!

  """
  The percentage of contributions of this type.
  """
  percentage: Int!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel @serviceMapping(to: "github/profiles") {
  """
  Lowest 25% of days of contributions.
  """
  FIRST_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE

  """
  No contributions occurred.
  """
  NONE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder @serviceMapping(to: "github/profiles") {
  """
  The ordering direction.
  """
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection @serviceMapping(to: "github/profiles") {
  """
  Commit contributions made by the user, grouped by repository.
  """
  commitContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!

  """
  A calendar of this user's contributions on GitHub.
  """
  contributionCalendar(
    """
    Use sample data instead of the user's actual contributions.
    """
    sample: Boolean = false @internal
  ): ContributionCalendar!

  """
  The breakdown of this user's contributions by type of contribution.
  """
  contributionCounts: [ContributionCount!]!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  """
  doesEndInCurrentMonth: Boolean!

  """
  Determine if this collection's time span starts before the current year.
  """
  doesStartInPriorYear: Boolean! @underDevelopment(since: "2020-12-10")

  """
  The date of the first GitHub Enterprise contribution the user made in this time period.
  """
  earliestEnterpriseContributionDate: Date @underDevelopment(since: "2018-11-29")

  """
  The date of the first restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: Date

  """
  The ending date and time of this collection.
  """
  endedAt: DateTime!

  """
  A list of contributions the user made on GitHub Enterprise, aggregated per GitHub Enterprise installation.
  """
  enterpriseContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnterpriseContributionConnection! @internal

  """
  The URL of the GitHub Enterprise profile for the user on the installation that sent the first contribution count.
  """
  enterpriseContributionsUserProfileUrl: URI @underDevelopment(since: "2018-12-03")

  """
  The first issue the user opened on GitHub. This will be null if that issue was
  opened outside the collection's time range and ignoreTimeRange is false. If
  the issue is not visible but the user has opted to show private contributions,
  a RestrictedContribution will be returned.
  """
  firstIssueContribution: CreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that
  pull request was opened outside the collection's time range and
  ignoreTimeRange is not true. If the pull request is not visible but the user
  has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that
  first repository was created outside the collection's time range and
  ignoreTimeRange is false. If the repository is not visible, then a
  RestrictedContribution is returned.
  """
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """
  Determine if there are any contributions in this collection.
  """
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details
  are not visible because they were made in a private repository. Can only be
  true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """
  Whether or not the collector's time span is all within the same day.
  """
  isSingleDay: Boolean!

  """
  A list of issues the user opened.
  """
  issueContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  Issue contributions made by the user, grouped by repository.
  """
  issueContributionsByRepository(
    """
    Should the user's first issue ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date
  falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: JoinedGitHubContribution

  """
  Contributions representing the user joining organizations on GitHub.
  """
  joinedOrganizationContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JoinedOrganizationContributionConnection! @underDevelopment(since: "2018-11-29")

  """
  The date of the most recent GitHub Enterprise contribution the user made in this time period.
  """
  latestEnterpriseContributionDate: Date @underDevelopment(since: "2018-11-29")

  """
  The date of the most recent restricted contribution the user made in this time
  period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: Date

  """
  Returns a contributions collection from an earlier time range than this one
  with contributions if it can find one, or a collection with no activity.
  """
  mostRecentCollection: ContributionsCollection @internal

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  """
  mostRecentCollectionWithActivity: ContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  """
  mostRecentCollectionWithoutActivity: ContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  """
  popularIssueContribution: CreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  """
  popularPullRequestContribution: CreatedPullRequestContribution

  """
  Pull request contributions made by the user.
  """
  pullRequestContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  Pull request contributions made by the user, grouped by repository.
  """
  pullRequestContributionsByRepository(
    """
    Should the user's first pull request ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!

  """
  Pull request review contributions made by the user.
  """
  pullRequestReviewContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """
    How many repositories should be included.
    """
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!

  """
  A list of repositories ordered by (and including) the contribution counts.
  """
  repositoryContributionCounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryContributionCountConnection! @underDevelopment(since: "2018-11-29")

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Should the user's first repository ever be excluded from the result.
    """
    excludeFirst: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only
  non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """
  The beginning date and time of this collection.
  """
  startedAt: DateTime!

  """
  How many commits were made by the user in this time span.
  """
  totalCommitContributions: Int!

  """
  How many issues the user opened.
  """
  totalIssueContributions(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull requests the user opened.
  """
  totalPullRequestContributions(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many pull request reviews the user left.
  """
  totalPullRequestReviewContributions: Int!

  """
  How many different repositories the user committed to.
  """
  totalRepositoriesWithContributedCommits: Int!

  """
  How many different repositories the user opened issues in.
  """
  totalRepositoriesWithContributedIssues(
    """
    Should the user's first issue ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented issue be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many different repositories the user left pull request reviews in.
  """
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """
  How many different repositories the user opened pull requests in.
  """
  totalRepositoriesWithContributedPullRequests(
    """
    Should the user's first pull request ever be excluded from this count.
    """
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """
  How many repositories the user created.
  """
  totalRepositoryContributions(
    """
    Should the user's first repository ever be excluded from this count.
    """
    excludeFirst: Boolean = false
  ): Int!

  """
  The user who made the contributions in this collection.
  """
  user: User!
}

"""
Different ways a user can contribute on GitHub.
"""
enum ContributionsCollectionContributionType @underDevelopment(since: "2018-07-02") {
  """
  Created a comment on an issue or pull request
  """
  CREATED_COMMENT

  """
  Created a commit
  """
  CREATED_COMMIT

  """
  Created an issue
  """
  CREATED_ISSUE

  """
  Created a pull request
  """
  CREATED_PULL_REQUEST

  """
  Reviewed a pull request
  """
  CREATED_PULL_REQUEST_REVIEW

  """
  Created a repository
  """
  CREATED_REPOSITORY

  """
  Contributions reported from a GitHub Enterprise installation
  """
  GITHUB_ENTERPRISE

  """
  Signed up for GitHub
  """
  JOINED_GITHUB

  """
  Became a member of an organization
  """
  JOINED_ORGANIZATION
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput @serviceMapping(to: "github/projects") {
  """
  The body of the newly created issue.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to convert.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The ID of the repository to create the issue in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-08-24")

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to convert to draft
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is now a draft.
  """
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & PerformableViaApp & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this convert to draft event.
  """
  resourcePath: URI!

  """
  The HTTP URL for this convert to draft event.
  """
  url: URI!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node & PerformableViaApp & ProjectEvent & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Project referenced by event.
  """
  project: Project

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard

  """
  Column name referenced by this project event.
  """
  projectColumnName: String!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Did this event result from workflow automation?
  """
  wasAutomated: Boolean! @internal
}

"""
Per-field breakdown of total query cost
"""
type CostBreakdown @internal @serviceMapping(to: "github/graphql_api") {
  """
  The column number where this field was written
  """
  column: Int!

  """
  The amount this field contributed to query cost
  """
  cost: Int!

  """
  The field that added to query cost
  """
  fieldName: String!

  """
  The line number where this field was written
  """
  line: Int!
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the owner scoping the reattributable data.
  """
  ownerId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account owning the data to reattribute.
  """
  sourceId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The Node ID of the account which may claim the data.
  """
  targetId: ID!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner scoping the reattributable data.
  """
  owner: Organization

  """
  The account owning the data to reattribute.
  """
  source: Claimable

  """
  The account which may claim the data.
  """
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput @serviceMapping(to: "github/branch_protection_rule") {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Can admins overwrite branch protection.
  """
  isAdminEnforced: Boolean

  """
  Limit of alternate path attempts for merge groups.
  """
  mergeQueueAlternatePaths: Int @internal

  """
  Limit of retries for failed check runs on queued entries.
  """
  mergeQueueCheckRunRetries: Int @internal

  """
  Maximum number of entries per merge group.
  """
  mergeQueueMaxGroupSize: Int @internal

  """
  Merge groups require manual approval
  """
  mergeQueueRequiresManualApproval: Boolean @internal

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String!

  """
  A list of User, Team or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!] @internal

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean @internal

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are merges to this branch managed through a merge queue.
  """
  requiresMergeQueue: Boolean @internal

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload @serviceMapping(to: "github/branch_protection_rule") {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput @serviceMapping(to: "github/checks_api") {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  The node ID of the CheckSuite to create this under.
  """
  checkSuiteId: ID @internal @possibleTypes(concreteTypes: ["CheckSuite"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The completed log information
  """
  completedLog: CompletedLogData @internal

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The concurency information about the check run
  """
  concurrency: Concurrency @internal

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  Optional name that, if defined, will be used in the UI instead of the name.
  """
  displayName: String @internal

  """
  Deployment environment for Actions CD
  """
  environment: String @internal

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The job key.
  """
  jobKey: String @internal

  """
  labels to be applied to this job as a json array
  """
  labels: [String!] @internal

  """
  The name of the check.
  """
  name: String!

  """
  The topological order of the check run within the check suite.
  """
  number: Int @internal

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The ID of the parent job.
  """
  parentJobId: String @internal

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState

  """
  Steps this check run will execute
  """
  steps: [CheckStepData!] @internal

  """
  Streaming log information
  """
  streamingLog: StreamingLogData @internal
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload @serviceMapping(to: "github/checks_api") {
  """
  The newly created check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-16")
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput @serviceMapping(to: "github/checks_api") {
  """
  The action of the webhook event, e.g 'merged', 'closed', 'reopened'. Only used by GitHub Actions.
  """
  action: String @internal

  """
  The annotations that are made as part of the check suite.
  """
  annotations: [CheckAnnotationData!] = [] @internal

  """
  Whether ot not individual check runs in the suite should be re-runnable.
  """
  checkRunsRerunnable: Boolean = true @underDevelopment(since: "2018-11-29")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Set the conclusion of an explicitly completed check suite
  """
  conclusion: String @internal

  """
  The Node ID of the user (could be a bot) that triggered the check suite creation.
  """
  creatorId: ID
    @internal
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  The event that prompted this check suite, e.g 'pull_request'. Only used by GitHub Actions.
  """
  event: String @internal

  """
  Whether or not the conclusion must be calculated as soon as all existing checks have completed.
  """
  explicitCompletion: Boolean @internal

  """
  Used by integrators with which can create >1 check suite per sha to create suites idempotently
  """
  externalId: String @internal

  """
  The branch name associated with this check suite.
  """
  headBranch: String @internal

  """
  The Node ID of the repository where the head_sha belongs to.
  """
  headRepositoryId: ID @internal

  """
  The SHA of the head commit.
  """
  headSha: GitObjectID!

  """
  The creator-supplied name for the CheckSuite. Currently only used by GitHub Actions, where it is the workflow name.
  """
  name: String @internal

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether or not the check suite should be re-requestable.
  """
  rerequestable: Boolean = true @underDevelopment(since: "2018-11-29")

  """
  The entity that triggered the workflow run.
  """
  triggerId: ID
    @internal
    @possibleTypes(
      concreteTypes: ["Deployment", "Issue", "IssueComment", "PullRequest", "Push", "Release"]
      abstractType: "Trigger"
    )

  """
  The generated JSON representing the execution graph for the workflow run
  """
  workflowExecutionGraph: String @internal

  """
  The workflow file path
  """
  workflowFilePath: String @internal

  """
  The workflow name
  """
  workflowName: String @internal
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload @serviceMapping(to: "github/checks_api") {
  """
  The newly created check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-12")
}

"""
Autogenerated input type of CreateCommitOnRef
"""
input CreateCommitOnRefInput @internal @serviceMapping(to: "github/ref") {
  """
  The commit message body.
  """
  body: String

  """
  The data which is being submitted for this change.
  """
  changes: [FileChange!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The commit message headline.
  """
  headline: String!

  """
  The ID of the ref on which these changes are based.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of CreateCommitOnRef
"""
type CreateCommitOnRefPayload @internal @serviceMapping(to: "github/ref") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-25")

  """
  The ref that points to the newly created changes.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateContentAttachment
"""
input CreateContentAttachmentInput @serviceMapping(to: "github/extensibility") {
  """
  The body of the content attachment, which may contain markdown.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the content_reference.
  """
  contentReferenceId: ID! @possibleTypes(concreteTypes: ["ContentReference"])

  """
  The title of the content attachment.
  """
  title: String!
}

"""
Autogenerated return type of CreateContentAttachment
"""
type CreateContentAttachmentPayload @serviceMapping(to: "github/extensibility") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created content attachment.
  """
  contentAttachment: ContentAttachment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-11-26")
}

"""
Autogenerated input type of CreateCustomInbox
"""
input CreateCustomInboxInput @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the new inbox.
  """
  name: String!

  """
  The search query used to filter the inbox.
  """
  queryString: String!
}

"""
Autogenerated return type of CreateCustomInbox
"""
type CreateCustomInboxPayload @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new custom inbox.
  """
  customInbox: NotificationFilter
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @serviceMapping(to: "github/deployments_api") {
  """
  Attempt to automatically merge the default branch into the requested ref, defaults to true.
  """
  autoMerge: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Short description of the deployment.
  """
  description: String = ""

  """
  Name for the target deployment environment.
  """
  environment: String = "production"

  """
  JSON payload with extra information about the deployment.
  """
  payload: String = "{}"

  """
  The node ID of the ref to be deployed.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts.
  """
  requiredContexts: [String!]

  """
  Specifies a task to execute.
  """
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @serviceMapping(to: "github/deployments_api") {
  """
  True if the default branch has been auto-merged into the deployment ref.
  """
  autoMerged: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment.
  """
  deployment: Deployment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-11")
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @serviceMapping(to: "github/deployments_api") {
  """
  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment.
  """
  autoInactive: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the deployment.
  """
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])

  """
  A short description of the status. Maximum length of 140 characters.
  """
  description: String = ""

  """
  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.
  """
  environment: String

  """
  Sets the URL for accessing your environment.
  """
  environmentUrl: String = ""

  """
  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment.
  """
  logUrl: String = ""

  """
  The state of the deployment.
  """
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @serviceMapping(to: "github/deployments_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new deployment status.
  """
  deploymentStatus: DeploymentStatus

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-17")
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput @serviceMapping(to: "github/discussions") {
  """
  The body of the discussion.
  """
  body: String!

  """
  The id of the discussion category to associate with this discussion.
  """
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the repository on which to create the discussion.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just created.
  """
  discussion: Discussion

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-10-25")
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput @serviceMapping(to: "github/admin_experience") {
  """
  The logins for the administrators of the new organization.
  """
  adminLogins: [String!]!

  """
  The email used for sending billing receipts.
  """
  billingEmail: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise owning the new organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the new organization.
  """
  login: String!

  """
  The profile name of the new organization.
  """
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise that owns the created organization.
  """
  enterprise: Enterprise

  """
  The organization that was created.
  """
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the environment.
  """
  name: String!

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new or existing environment.
  """
  environment: Environment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-01-15")
}

"""
Autogenerated input type of CreateGateRequest
"""
input CreateGateRequestInput @internal @serviceMapping(to: "github/actions") {
  """
  The node ID of the check run id.
  """
  checkRunId: ID! @possibleTypes(concreteTypes: ["CheckRun"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the gate request is concluded or not
  """
  concluded: Boolean

  """
  The time that the gate request expires at.
  """
  expiresAt: DateTime

  """
  The node ID of the gate.
  """
  gateId: ID!

  """
  The state of the gate request.
  """
  state: GateRequestState

  """
  The token to store for Actions Service.
  """
  token: String
}

"""
Autogenerated return type of CreateGateRequest
"""
type CreateGateRequestPayload @internal @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The existing gate request or a new gate request.
  """
  gateRequest: GateRequest
}

"""
Autogenerated input type of CreateIntegrationCategory
"""
input CreateIntegrationCategoryInput @internal {
  """
  The category description.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The category name.
  """
  name: String!

  """
  The state the category is currently in.
  """
  state: IntegrationFeatureState!
}

"""
Autogenerated return type of CreateIntegrationCategory
"""
type CreateIntegrationCategoryPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub app.
  """
  integrationCategory: IntegrationFeature
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput @serviceMapping(to: "github/ip_allow_list") {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String

  """
  The ID of the owner for which to create the new IP allow list entry.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was created.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput @serviceMapping(to: "github/issues") {
  """
  The Node ID for the user assignee for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title for the issue.
  """
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-09")

  """
  The new issue.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the color of the label.
  """
  color: String!

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The name of the label.
  """
  name: String!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-25")

  """
  The new label.
  """
  label: Label
}

"""
Autogenerated input type of CreateMarketplaceAgreement
"""
input CreateMarketplaceAgreementInput @internal @serviceMapping(to: "github/marketplace") {
  """
  The Markdown text of the agreement.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Who is the intended audience for this agreement?
  """
  signatoryType: MarketplaceAgreementSignatoryType!

  """
  The version for the new agreement.
  """
  version: String!
}

"""
Autogenerated return type of CreateMarketplaceAgreement
"""
type CreateMarketplaceAgreementPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new Marketplace agreement.
  """
  marketplaceAgreement: MarketplaceAgreement
}

"""
Autogenerated input type of CreateMarketplaceCategory
"""
input CreateMarketplaceCategoryInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the new category.
  """
  description: String

  """
  The position of the category on the Marketplace homepage.
  """
  featuredPosition: Int

  """
  A technical description of how apps in the new category work with GitHub.
  """
  howItWorks: String

  """
  Whether the category is featured on the Marketplace homepage.
  """
  isFeatured: Boolean

  """
  Whether the category is a filter-type.
  """
  isFilter: Boolean

  """
  Whether the category is to be used in Marketplace navigation menus.
  """
  isNavigationVisible: Boolean

  """
  The name of the new category.
  """
  name: String!

  """
  A list of sub category names.
  """
  subCategories: [String!]
}

"""
Autogenerated return type of CreateMarketplaceCategory
"""
type CreateMarketplaceCategoryPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new Marketplace category.
  """
  marketplaceCategory: MarketplaceCategory
}

"""
Autogenerated input type of CreateMarketplaceListing
"""
input CreateMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  The ID of the GitHub App to list.
  """
  appID: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The listing's full description.
  """
  fullDescription: String

  """
  A link to install the listing's application.
  """
  installationUrl: String

  """
  The listing's full name.
  """
  name: String!

  """
  The ID of the OAuth application to list.
  """
  oauthApplicationID: Int

  """
  The name of the category that best describes the listing.
  """
  primaryCategoryName: String!

  """
  A link to the listing's privacy policy.
  """
  privacyPolicyUrl: URI

  """
  The listing's short description.
  """
  shortDescription: String

  """
  A link to the listing's support site.
  """
  supportUrl: URI

  """
  The names of supported programming languages.
  """
  supportedLanguageNames: [String]
}

"""
Autogenerated return type of CreateMarketplaceListing
"""
type CreateMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of CreateMarketplaceListingPlanBullet
"""
input CreateMarketplaceListingPlanBulletInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the payment plan to add the bullet to.
  """
  planId: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])

  """
  The contents of the bullet point.
  """
  value: String!
}

"""
Autogenerated return type of CreateMarketplaceListingPlanBullet
"""
type CreateMarketplaceListingPlanBulletPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new bullet point.
  """
  marketplaceListingPlanBullet: MarketplaceListingPlanBullet
}

"""
Autogenerated input type of CreateMarketplaceListingPlan
"""
input CreateMarketplaceListingPlanInput @internal @serviceMapping(to: "github/marketplace") {
  """
  An array of bullet contents for this plan.
  """
  bulletValues: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the plan.
  """
  description: String!

  """
  The types of accounts that can subscribe to the plan.
  """
  forAccountType: MarketplaceListingPlanSubscriberAccountTypes!

  """
  Does this listing plan have a free trial?
  """
  hasFreeTrial: Boolean

  """
  How much this plan should cost per month in cents.
  """
  monthlyPriceInCents: Int!

  """
  The name of the payment plan.
  """
  name: String!

  """
  The pricing model for the plan.
  """
  priceModel: MarketplaceListingPlanPriceModel!

  """
  Select the listing that matches this slug. It's the short name of the listing used in its URL.
  """
  slug: String!

  """
  The name of the unit if this plan is per-unit.
  """
  unitName: String

  """
  How much this plan should cost annually in cents.
  """
  yearlyPriceInCents: Int!
}

"""
Autogenerated return type of CreateMarketplaceListingPlan
"""
type CreateMarketplaceListingPlanPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new Marketplace listing plan.
  """
  marketplaceListingPlan: MarketplaceListingPlan
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput @serviceMapping(to: "github/octoshift") {
  """
  The Octoshift migration source access token.
  """
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Octoshift migration source name.
  """
  name: String!

  """
  The ID of the organization that will own the Octoshift migration source.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The Octoshift migration source type.
  """
  type: MigrationSourceType!

  """
  The Octoshift migration source URL.
  """
  url: String!
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload @serviceMapping(to: "github/octoshift") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created Octoshift migration source.
  """
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateMobilePushNotificationSchedules
"""
input CreateMobilePushNotificationSchedulesInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The days of the week for the schedule.
  """
  days: [DayOfWeek!]!

  """
  The end start time (0:00..23:59)
  """
  endTime: MobilePushScheduleTime!

  """
  The schedule start time (0:00..23:59)
  """
  startTime: MobilePushScheduleTime!
}

"""
Autogenerated return type of CreateMobilePushNotificationSchedules
"""
type CreateMobilePushNotificationSchedulesPayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-05-26")

  """
  The new mobile push notification schedules.
  """
  mobilePushNotificationSchedules: [MobilePushNotificationSchedule!]
}

"""
Autogenerated input type of CreateMobileSubscription
"""
input CreateMobileSubscriptionInput @serviceMapping(to: "github/mobile_api") {
  """
  The base64 encoded receipt for the apple in-app purchase
  """
  appleReceipt: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateMobileSubscription
"""
type CreateMobileSubscriptionPayload @serviceMapping(to: "github/mobile_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the subscription was successful
  """
  success: Boolean
}

"""
Autogenerated input type of CreateOrganizationDiscussionComment
"""
input CreateOrganizationDiscussionCommentInput
  @underDevelopment(since: "2019-05-07")
  @serviceMapping(to: "github/discussions") {
  """
  The content of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["OrganizationDiscussion"])
}

"""
Autogenerated return type of CreateOrganizationDiscussionComment
"""
type CreateOrganizationDiscussionCommentPayload
  @underDevelopment(since: "2019-05-07")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  comment: OrganizationDiscussionComment
}

"""
Autogenerated input type of CreateOrganizationDiscussion
"""
input CreateOrganizationDiscussionInput
  @underDevelopment(since: "2019-05-08")
  @serviceMapping(to: "github/discussions") {
  """
  The content of the discussion.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to which the discussion belongs.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  If true or not specified, restricts the visibility of this discussion to
  organization members and organization admins. If false, allows any user to
  view this discussion.
  """
  private: Boolean

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateOrganizationDiscussion
"""
type CreateOrganizationDiscussionPayload
  @underDevelopment(since: "2019-05-08")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  discussion: OrganizationDiscussion
}

"""
Autogenerated input type of CreatePackageFile
"""
input CreatePackageFileInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Package file name.
  """
  filename: String!

  """
  MD5 checksum of this package file.
  """
  md5: String

  """
  The shasum of this package file.
  """
  sha1: String

  """
  The sha256 of this package file.
  """
  sha256: String

  """
  Content length of the file.
  """
  size: Int!

  """
  The ID of the Package Version that contains the file.
  """
  versionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of CreatePackageFile
"""
type CreatePackageFilePayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The package file that was created.
  """
  packageFile: PackageFile

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package file.
  """
  viewer: User
}

"""
Autogenerated input type of CreatePackageVersion
"""
input CreatePackageVersionInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Commit OID of this package version.
  """
  commitOid: String

  """
  An array of sha256s which identifies package_files to add to this version
  """
  packageFileSha256s: [String]

  """
  The registry package name to associate the package version with.
  """
  packageName: String!

  """
  The registry package type for the package to associate the package version with.
  """
  packageType: PackageType!

  """
  The platform the package is built for.
  """
  platform: String!

  """
  Whether or not the package version is a prerelease
  """
  preRelease: Boolean = false

  """
  The nameWithOwner of the repository that contains the package.
  """
  repositoryNameWithOwner: String! @possibleTypes(concreteTypes: ["Repository"])

  """
  The sha256 checksum of this package version.
  """
  sha256: String

  """
  The size of this package version.
  """
  size: Int

  """
  Identifies the git tag of the release.
  """
  tagName: String

  """
  Fails the mutation if no Release with the given tag name exists.
  """
  validateTagName: Boolean

  """
  The version string for this package version.
  """
  version: String!
}

"""
Autogenerated input type of CreatePackageVersionMetadata
"""
input CreatePackageVersionMetadataInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The metadatum value.
  """
  metadata: [PackageMetadatumTuple]!

  """
  The package version to add package metadata.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of CreatePackageVersionMetadata
"""
type CreatePackageVersionMetadataPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The package version.
  """
  packageVersion: PackageVersion

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package version metadata.
  """
  viewer: User
}

"""
Autogenerated return type of CreatePackageVersion
"""
type CreatePackageVersionPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new registry package version.
  """
  packageVersion: PackageVersion

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package version.
  """
  viewer: User
}

"""
Autogenerated input type of CreateParentInitiatedTeamChangeParentRequest
"""
input CreateParentInitiatedTeamChangeParentRequestInput @internal @serviceMapping(to: "github/teams") {
  """
  The child team that will be moved as a result of this request
  """
  childTeamId: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The parent team that initiated this request
  """
  parentTeamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of CreateParentInitiatedTeamChangeParentRequest
"""
type CreateParentInitiatedTeamChangeParentRequestPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending request
  """
  request: TeamChangeParentRequest
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput @serviceMapping(to: "github/projects") {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String!

  """
  The owner ID to create the project under.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization", "Repository", "User"], abstractType: "ProjectOwner")

  """
  Whether the project is public or not.
  """
  public: Boolean = false @underDevelopment(since: "2019-02-19")

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the GitHub-provided template.
  """
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new project.
  """
  project: Project
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput @serviceMapping(to: "github/pull_requests") {
  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  """
  baseRefName: String!

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this pull request should be a draft.
  """
  draft: Boolean = false

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  """
  headRefName: String!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean = true

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The title of the pull request.
  """
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-09-14")

  """
  The new pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """
  The GitObjectID that the new Ref shall target. Must point to a commit.
  """
  oid: GitObjectID!

  """
  The Node ID of the Repository to create the Ref in.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created ref.
  """
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the new repository.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean = true

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean = false

  """
  The URL for a web page about this repository.
  """
  homepageUrl: URI

  """
  The name of the new repository.
  """
  name: String!

  """
  The ID of the owner for the new repository.
  """
  ownerId: ID @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository.
  """
  teamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new repository.
  """
  repository: Repository
}

"""
Autogenerated input type of CreateSavedNotificationThread
"""
input CreateSavedNotificationThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The notification thread's id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of CreateSavedNotificationThread
"""
type CreateSavedNotificationThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the saved notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of CreateSubscriptionItem
"""
input CreateSubscriptionItemInput @internal {
  """
  The login of the account that purchased this
  """
  account: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to grant OAP access to the application
  """
  grantOap: Boolean

  """
  The ID of the listing plan that was purchased
  """
  planId: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])

  """
  How many units of this listing were purchased
  """
  quantity: Int!
}

"""
Autogenerated return type of CreateSubscriptionItem
"""
type CreateSubscriptionItemPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new subscription item.
  """
  subscriptionItem: SubscriptionItem
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput @serviceMapping(to: "github/teams") {
  """
  The content of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the discussion to which the comment belongs.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])

  """
  The formatter for the comment body. Defaults to 'MARKDOWN'.
  """
  formatter: CommentBodyFormatter @internal
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new comment.
  """
  teamDiscussionComment: TeamDiscussionComment
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput @serviceMapping(to: "github/teams") {
  """
  The content of the discussion.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If true, restricts the visibility of this discussion to team members and
  organization admins. If false or not specified, allows any organization member
  to view this discussion.
  """
  private: Boolean

  """
  The ID of the team to which the discussion belongs.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  The title of the discussion.
  """
  title: String!
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new discussion.
  """
  teamDiscussion: TeamDiscussion
}

"""
Autogenerated input type of CreateTeam
"""
input CreateTeamInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description of the team.
  """
  description: String

  """
  A list of external groups to map the team to.
  """
  groupMappings: [GroupMapping] @underDevelopment(since: "2019-05-06")

  """
  String for LDAP distinguished name.
  """
  ldap_dn: String

  """
  A list of organization member logins to add as maintainers of the team.
  """
  maintainers: [String] @internal

  """
  The name of the team.
  """
  name: String!

  """
  The organization ID to create the team under.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The parent team ID.
  """
  parentTeamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The legacy team permission.
  """
  permission: LegacyTeamPermission @internal

  """
  The level of privacy the team has.
  """
  privacy: TeamPrivacy!

  """
  A list of repository full names (e.g., "organization-name/repository-name") to add to the team.
  """
  repositories: [String] @internal
}

"""
Autogenerated return type of CreateTeam
"""
type CreateTeamPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new team.
  """
  team: Team
}

"""
Autogenerated input type of CreateUserDashboardPin
"""
input CreateUserDashboardPinInput @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the item you want to pin in the last position on a user's dashboard.
  """
  itemId: ID!
    @possibleTypes(
      concreteTypes: ["Gist", "Issue", "Organization", "Project", "PullRequest", "Repository", "Team", "User"]
      abstractType: "DashboardPinnableItem"
    )

  """
  ID of the owner of the dashboard to modify.
  """
  userId: ID
}

"""
Autogenerated return type of CreateUserDashboardPin
"""
type CreateUserDashboardPinPayload @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the dashboard that was updated.
  """
  user: User
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  How many commits were made on this day to this repository by the user.
  """
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository the user made a commit in.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [CreatedCommitContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedCommitContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  The issue that was opened.
  """
  issue: Issue!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [CreatedIssueContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedIssueContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution @serviceMapping(to: "github/profiles") =
    CreatedIssueContribution
  | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request that was opened.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution @serviceMapping(to: "github/profiles") =
    CreatedPullRequestContribution
  | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The pull request the user reviewed.
  """
  pullRequest: PullRequest!

  """
  The review the user left on the pull request.
  """
  pullRequestReview: PullRequestReview!

  """
  The repository containing the pull request that the user reviewed.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [CreatedPullRequestReviewContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedPullRequestReviewContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The repository that was created.
  """
  repository: Repository!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [CreatedRepositoryContributionEdge]

  """
  A list of nodes.
  """
  nodes: [CreatedRepositoryContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution @serviceMapping(to: "github/profiles") =
    CreatedRepositoryContribution
  | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Identifies when the reference was made.
  """
  referencedAt: DateTime!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  Issue or pull request that made the reference.
  """
  source: ReferencedSubject!

  """
  Issue or pull request to which the reference was made.
  """
  target: ReferencedSubject!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Checks if the target will be closed when the source is merged.
  """
  willCloseTarget: Boolean!
}

"""
The possible custom types to subscribe to
"""
enum CustomSubscriptionType @serviceMapping(to: "github/notifications") {
  """
  Subscribe to a repository's discussions.
  """
  DISCUSSION

  """
  Subscribe to a repository's issues.
  """
  ISSUE

  """
  Subscribe to a repository's pull requests.
  """
  PULL_REQUEST

  """
  Subscribe to a repository's releases.
  """
  RELEASE

  """
  Subscribe to a repository's security alerts.
  """
  SECURITY_ALERT
}

"""
Types that can be pinned to a user's dashboard.
"""
union DashboardPinnableItem @serviceMapping(to: "github/dashboard") =
    Gist
  | Issue
  | Organization
  | Project
  | PullRequest
  | Repository
  | Team
  | User

"""
The connection type for DashboardPinnableItem.
"""
type DashboardPinnableItemConnection @serviceMapping(to: "github/dashboard") {
  """
  A list of edges.
  """
  edges: [DashboardPinnableItemEdge]

  """
  A list of nodes.
  """
  nodes: [DashboardPinnableItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DashboardPinnableItemEdge @serviceMapping(to: "github/dashboard") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DashboardPinnableItem
}

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Days of the week.
"""
enum DayOfWeek @serviceMapping(to: "github/notifications") {
  """
  Friday
  """
  FRIDAY

  """
  Monday
  """
  MONDAY

  """
  Saturday
  """
  SATURDAY

  """
  Sunday
  """
  SUNDAY

  """
  Thursday
  """
  THURSDAY

  """
  Tuesday
  """
  TUESDAY

  """
  Wednesday
  """
  WEDNESDAY
}

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the suggested topic.
  """
  name: String!

  """
  The reason why the suggested topic is declined.
  """
  reason: TopicSuggestionDeclineReason!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The declined topic.
  """
  topic: Topic
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField @serviceMapping(to: "github/admin_experience") {
  """
  Can read, write, and administrate repos by default
  """
  ADMIN

  """
  No access
  """
  NONE

  """
  Can read repos by default
  """
  READ

  """
  Can read and write repos by default
  """
  WRITE
}

"""
Specifies the default workflow permissions level for GITHUB_TOKENs.
"""
interface DefaultWorkflowPermissions @internal @serviceMapping(to: "github/actions") {
  """
  Indicates default workflow permissions level
  """
  defaultWorkflowPermissions: DefaultWorkflowPermissionsValue
}

"""
The possible default workflow permissions levels.
"""
enum DefaultWorkflowPermissionsValue @internal @serviceMapping(to: "github/actions") {
  """
  Read-only access.
  """
  READ
}

"""
Represents a recovery token that can be used as part of the Delegated Account Recovery feature
"""
type DelegatedRecoveryToken implements Node @internal @serviceMapping(to: "github/account_login") {
  """
  When the token was confirmed saved at the recovery provider.
  """
  confirmedAt: DateTime

  """
  When the token was created
  """
  createdAt: DateTime!
  id: ID!

  """
  Identifies the user who created the token.
  """
  owner: User

  """
  The recovery provider for which the token was issued.
  """
  provider: String!

  """
  The last time the token was used in a successful recovery.
  """
  recoveredAt: DateTime

  """
  The external identifier shared with a recovery provider.
  """
  tokenId: String!
}

"""
The connection type for DelegatedRecoveryToken.
"""
type DelegatedRecoveryTokenConnection @internal @serviceMapping(to: "github/account_login") {
  """
  A list of edges.
  """
  edges: [DelegatedRecoveryTokenEdge]

  """
  A list of nodes.
  """
  nodes: [DelegatedRecoveryToken]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DelegatedRecoveryTokenEdge @internal @serviceMapping(to: "github/account_login") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DelegatedRecoveryToken
}

"""
Entities that can be deleted.
"""
interface Deletable {
  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  """
  The global relay id of the branch protection rule to be deleted.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteComment
"""
input DeleteCommentInput @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the comment to delete.
  """
  id: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "GistComment"
        "IssueComment"
        "OrganizationDiscussion"
        "OrganizationDiscussionComment"
        "PullRequestReview"
        "PullRequestReviewComment"
        "RepositoryAdvisoryComment"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Deletable"
    )
}

"""
Autogenerated return type of DeleteComment
"""
type DeleteCommentPayload @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The comment that was just deleted.
  """
  comment: Comment
}

"""
Autogenerated input type of DeleteCustomInbox
"""
input DeleteCustomInboxInput @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the custom inbox to delete.
  """
  customInboxId: ID! @possibleTypes(concreteTypes: ["NotificationFilter"])
}

"""
Autogenerated return type of DeleteCustomInbox
"""
type DeleteCustomInboxPayload @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput @serviceMapping(to: "github/deployments_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the deployment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload @serviceMapping(to: "github/deployments_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node id of the discussion comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion comment that was just deleted.
  """
  comment: DiscussionComment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-11-05")
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the discussion to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that was just deleted.
  """
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the environment to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to delete.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was deleted.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to delete.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-12-14")

  """
  The repository the issue belonged to
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteLabelByName
"""
input DeleteLabelByNameInput @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository the label belongs to.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the label to be deleted.
  """
  subjectName: String!
}

"""
Autogenerated return type of DeleteLabelByName
"""
type DeleteLabelByNamePayload @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the label to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteMarketplaceListingPlanBullet
"""
input DeleteMarketplaceListingPlanBulletInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the bullet point to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlanBullet"])
}

"""
Autogenerated return type of DeleteMarketplaceListingPlanBullet
"""
type DeleteMarketplaceListingPlanBulletPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing plan from which the bullet point was deleted.
  """
  marketplaceListingPlan: MarketplaceListingPlan
}

"""
Autogenerated input type of DeleteMarketplaceListingPlan
"""
input DeleteMarketplaceListingPlanInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing plan ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])
}

"""
Autogenerated return type of DeleteMarketplaceListingPlan
"""
type DeleteMarketplaceListingPlanPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing from which the plan was deleted.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of DeleteMarketplaceListingScreenshot
"""
input DeleteMarketplaceListingScreenshotInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing screenshot ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingScreenshot"])
}

"""
Autogenerated return type of DeleteMarketplaceListingScreenshot
"""
type DeleteMarketplaceListingScreenshotPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing from which the screenshot was deleted.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of DeleteMarketplaceOrderPreview
"""
input DeleteMarketplaceOrderPreviewInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The order preview ID to delete
  """
  orderPreviewId: ID!
}

"""
Autogenerated return type of DeleteMarketplaceOrderPreview
"""
type DeleteMarketplaceOrderPreviewPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the order preview was successfully destroyed.
  """
  isDestroyed: Boolean
}

"""
Autogenerated input type of DeleteMobileDeviceToken
"""
input DeleteMobileDeviceTokenInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The device token to delete.
  """
  deviceToken: String!

  """
  The push notification service that issued the device token.
  """
  service: PushNotificationService!
}

"""
Autogenerated return type of DeleteMobileDeviceToken
"""
type DeleteMobileDeviceTokenPayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteMobilePushNotificationSchedule
"""
input DeleteMobilePushNotificationScheduleInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the mobile push notification schedule to be deleted.
  """
  id: ID! @possibleTypes(concreteTypes: ["MobilePushNotificationSchedule"])
}

"""
Autogenerated return type of DeleteMobilePushNotificationSchedule
"""
type DeleteMobilePushNotificationSchedulePayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteOrganizationDiscussionComment
"""
input DeleteOrganizationDiscussionCommentInput
  @underDevelopment(since: "2019-05-07")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["OrganizationDiscussionComment"])
}

"""
Autogenerated return type of DeleteOrganizationDiscussionComment
"""
type DeleteOrganizationDiscussionCommentPayload
  @underDevelopment(since: "2019-05-07")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteOrganizationDiscussion
"""
input DeleteOrganizationDiscussionInput
  @underDevelopment(since: "2019-05-08")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["OrganizationDiscussion"])
}

"""
Autogenerated return type of DeleteOrganizationDiscussion
"""
type DeleteOrganizationDiscussionPayload
  @underDevelopment(since: "2019-05-08")
  @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeletePackageTag
"""
input DeletePackageTagInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The login of the package owner
  """
  owner: String!

  """
  The name of the package.
  """
  packageName: String!

  """
  The type of the registry package.
  """
  packageType: PackageType!

  """
  The tag name.
  """
  tag: String!
}

"""
Autogenerated return type of DeletePackageTag
"""
type DeletePackageTagPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The package of the deleted tag.
  """
  package: Package

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package version metadata.
  """
  viewer: User
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the package version to be deleted.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the operation succeeded.
  """
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput @serviceMapping(to: "github/projects") {
  """
  The id of the card to delete.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The column the deleted card was in.
  """
  column: ProjectColumn

  """
  The deleted card ID.
  """
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to delete.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted column ID.
  """
  deletedColumnId: ID

  """
  The project the deleted column was in.
  """
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

"""
Autogenerated input type of DeleteProjectNextItem
"""
input DeleteProjectNextItemInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the item to be removed.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectNextItem"])

  """
  The ID of the Project from which the item should be removed.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectNext"])
}

"""
Autogenerated return type of DeleteProjectNextItem
"""
type DeleteProjectNextItemPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the deleted item.
  """
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository or organization the project was removed from.
  """
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectWorkflow
"""
input DeleteProjectWorkflowInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectWorkflow ID to delete.
  """
  projectWorkflowId: ID! @possibleTypes(concreteTypes: ["ProjectWorkflow"])
}

"""
Autogenerated return type of DeleteProjectWorkflow
"""
type DeleteProjectWorkflowPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted project ID.
  """
  deletedProjectWorkflowId: ID

  """
  The project the deleted workflow was in.
  """
  project: Project
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request review the deleted comment belonged to.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to delete.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The deleted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRecoveryToken
"""
input DeleteRecoveryTokenInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The DelegatedRecoveryToken ID to delete.
  """
  id: ID!
}

"""
Autogenerated return type of DeleteRecoveryToken
"""
type DeleteRecoveryTokenPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the token was successfully destroyed.
  """
  isDestroyed: Boolean
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the Ref to be deleted.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryImage
"""
input DeleteRepositoryImageInput @underDevelopment(since: "2019-04-05") @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository image to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["RepositoryImage"])
}

"""
Autogenerated return type of DeleteRepositoryImage
"""
type DeleteRepositoryImagePayload @underDevelopment(since: "2019-04-05") @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository from which the image was deleted.
  """
  repository: Repository
}

"""
Autogenerated input type of DeleteSavedNotificationThread
"""
input DeleteSavedNotificationThreadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The saved notification thread's id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of DeleteSavedNotificationThread
"""
type DeleteSavedNotificationThreadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that deleted the saved notification.
  """
  viewer: User
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion ID to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeam
"""
input DeleteTeamInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Team ID to delete.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of DeleteTeam
"""
type DeleteTeamPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the team was successfully destroyed.
  """
  isDestroyed: Boolean
}

"""
Autogenerated input type of DeleteUserDashboardPin
"""
input DeleteUserDashboardPinInput @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the item you want to unpin from a user's dashboard.
  """
  itemId: ID!
    @possibleTypes(
      concreteTypes: ["Gist", "Issue", "Organization", "Project", "PullRequest", "Repository", "Team", "User"]
      abstractType: "DashboardPinnableItem"
    )

  """
  ID of the owner of the dashboard to modify.
  """
  userId: ID
}

"""
Autogenerated return type of DeleteUserDashboardPin
"""
type DeleteUserDashboardPinPayload @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the dashboard that was updated.
  """
  user: User
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to delete.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owning account from which the domain was deleted.
  """
  owner: VerifiableDomainOwner
}

"""
A record of the deleted issue.
"""
type DeletedIssue implements Node @internal @serviceMapping(to: "github/issues") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor that deleted this issue.
  """
  deletedBy: Actor!
  id: ID!

  """
  The number of the issue that was deleted.
  """
  number: Int!

  """
  The old id of the issue that was deleted.
  """
  oldIssueId: Int

  """
  The repository that this issue was deleted from.
  """
  repository: Repository!
}

"""
Autogenerated input type of DelistMarketplaceListing
"""
input DelistMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Marketplace listing to delist.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListing"])

  """
  A custom message for the integrator.
  """
  message: String
}

"""
Autogenerated return type of DelistMarketplaceListing
"""
type DelistMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of DelistRepositoryAction
"""
input DelistRepositoryActionInput @internal @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the RepositoryAction to delist.
  """
  id: ID

  """
  The slug of the RepositoryAction to delist.
  """
  slug: String
}

"""
Autogenerated return type of DelistRepositoryAction
"""
type DelistRepositoryActionPayload @internal @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated RepositoryAction.
  """
  repositoryAction: RepositoryAction
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The milestone associated with this event.
  """
  milestone: Milestone @internal

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @serviceMapping(to: "github/dependency_graph") {
  """
  Does the dependency itself have dependencies?
  """
  hasDependencies: Boolean!

  """
  More readable dependency version requirements
  """
  humanRequirements: String! @internal

  """
  The dependency graph package ID
  """
  packageId: ID @internal

  """
  The original name of the package, as it appears in the manifest.
  """
  packageLabel: String!

  """
  The dependency package manager
  """
  packageManager: String

  """
  The name of the package in the canonical form used by the package manager.
  This may differ from the original textual form (see packageLabel), for example
  in a package manager that uses case-insensitive comparisons.
  """
  packageName: String!

  """
  The repository containing the package
  """
  repository: Repository

  """
  The dependency version requirements
  """
  requirements: String!

  """
  A list of vulnerability alerts for the manifest
  """
  vulnerabilityAlerts: [RepositoryVulnerabilityAlert!]! @internal
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @serviceMapping(to: "github/dependency_graph") {
  """
  A list of edges.
  """
  edges: [DependencyGraphDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @serviceMapping(to: "github/dependency_graph") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphDependency
}

"""
A package dependent
"""
type DependencyGraphDependent @internal @serviceMapping(to: "github/dependency_graph") {
  cursor: String

  """
  path to the blob for this manifest path
  """
  manifestBlobResourcePath: URI

  """
  URL to the blob for this manifest path
  """
  manifestBlobUrl: URI

  """
  Filename of the manifest containing this dependent
  """
  manifestFilename: String

  """
  Path of the manifest containing this dependent
  """
  manifestPath: String

  """
  The dependent name if applicable
  """
  name: String

  """
  The repository containing the dependent
  """
  repository: Repository
}

"""
The type of package dependent
"""
enum DependencyGraphDependentType @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A package dependent
  """
  PACKAGE

  """
  A repository dependent
  """
  REPOSITORY
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node
  @serviceMapping(to: "github/dependency_graph")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  Path to view the manifest file blob
  """
  blobPath: String!

  """
  A list of manifest dependencies
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyGraphDependencyConnection

  """
  The number of dependencies listed in the manifest
  """
  dependenciesCount: Int

  """
  Is the manifest too big to parse?
  """
  exceedsMaxSize: Boolean!

  """
  Fully qualified manifest filename
  """
  filename: String!
  id: ID!

  """
  Were we able to parse the manifest?
  """
  parseable: Boolean!

  """
  The repository containing the manifest
  """
  repository: Repository!

  """
  Can the viewer view vulnerability alerts in this manifest?
  """
  viewerCanViewAlerts: Boolean! @internal
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @serviceMapping(to: "github/dependency_graph") {
  """
  A list of edges.
  """
  edges: [DependencyGraphManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @serviceMapping(to: "github/dependency_graph") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphManifest
}

"""
A package
"""
type DependencyGraphPackage @internal @serviceMapping(to: "github/dependency_graph") {
  """
  Explanation for value of debug_should_be_associated_to_repo
  """
  debugAssociationExplanation: String

  """
  True if the package is associated to the repo, false otherwise.
  """
  debugShouldBeAssociatedToRepo: Boolean

  """
  A list of package dependents
  """
  dependents: [DependencyGraphDependent]

  """
  Information about dependents field pagination
  """
  dependentsPageInfo: PageInfo

  """
  The package name
  """
  name: String

  """
  The number of packages that depend on this package
  """
  packageDependentsCount: Int

  """
  The internal dependency graph ID
  """
  packageId: String

  """
  The package manager enum value
  """
  packageManager: String

  """
  The human name of the package manager
  """
  packageManagerHumanName: String

  """
  The number of repositories that depend on this package
  """
  repositoryDependentsCount: Int

  """
  The repository of package if it exists on GitHub
  """
  repositoryId: Int
}

"""
The connection type for DependencyGraphPackage.
"""
type DependencyGraphPackageConnection @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A list of edges.
  """
  edges: [DependencyGraphPackageEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphPackage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphPackageEdge @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphPackage
}

"""
A package release
"""
type DependencyGraphPackageRelease @internal @serviceMapping(to: "github/dependency_graph") {
  """
  The ClearlyDefined score for the package release license, if available
  """
  clearlyDefinedScore: Int @underDevelopment(since: "2019-04-22")

  """
  A list of package release dependencies
  """
  dependencies: [DependencyGraphDependency]

  """
  The number of dependencies specified by the package release
  """
  dependenciesCount: Int

  """
  The URL to a package release on its respective registry
  """
  externalPackageManagerUrl: URI

  """
  The license for the package release
  """
  license: String

  """
  The package manager
  """
  packageManager: String @underDevelopment(since: "2019-03-01")

  """
  The package name
  """
  packageName: String @underDevelopment(since: "2019-03-01")

  """
  The date the package release was published
  """
  publishedOn: Date @underDevelopment(since: "2019-03-01")

  """
  The repository containing the package release
  """
  repository: Repository

  """
  The package release version
  """
  version: String
}

"""
The connection type for DependencyGraphPackageRelease.
"""
type DependencyGraphPackageReleaseConnection @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A list of edges.
  """
  edges: [DependencyGraphPackageReleaseEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphPackageRelease]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A package release dependent
"""
type DependencyGraphPackageReleaseDependent @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A list of package dependents
  """
  dependents: [DependencyGraphDependent]

  """
  Number of dependent repositories on a Package Release
  """
  dependentsCount: Int!

  """
  Package dependents pagination information
  """
  dependentsPageInfo: PageInfo

  """
  Number of dependents on earlier package release versions
  """
  lowerVersionCount: Int!

  """
  Package Release object
  """
  packageRelease: DependencyGraphPackageRelease!

  """
  Number of dependents on newer package release versions
  """
  upperVersionCount: Int!

  """
  Number of vulnerabilities on a Package Release
  """
  vulnerabilitiesCount: Int!
}

"""
The connection type for DependencyGraphPackageReleaseDependent.
"""
type DependencyGraphPackageReleaseDependentConnection @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A list of edges.
  """
  edges: [DependencyGraphPackageReleaseDependentEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyGraphPackageReleaseDependent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphPackageReleaseDependentEdge @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphPackageReleaseDependent
}

"""
An edge in a connection.
"""
type DependencyGraphPackageReleaseEdge @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyGraphPackageRelease
}

"""
Autogenerated input type of DependencyGraphReassignPackage
"""
input DependencyGraphReassignPackageInput @internal @serviceMapping(to: "github/dependency_graph") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the package manager.
  """
  packageManager: String!

  """
  The name of the package.
  """
  packageName: String!

  """
  The target repository.
  """
  targetRepository: String!
}

"""
Autogenerated return type of DependencyGraphReassignPackage
"""
type DependencyGraphReassignPackagePayload @internal @serviceMapping(to: "github/dependency_graph") {
  """
  The client mutation ID
  """
  clientMutationId: ID
}

"""
Repository package release license stats
"""
type DependencyGraphRepositoryPackageReleaseLicense @internal @serviceMapping(to: "github/dependency_graph") {
  """
  License spdx id
  """
  licenseId: String!

  """
  Count of repository package releases with this license
  """
  totalCount: Int!
}

"""
Repository package release vulnerability stats
"""
type DependencyGraphRepositoryPackageReleaseVulnerability @internal @serviceMapping(to: "github/dependency_graph") {
  """
  Count of repository package release dependents
  """
  dependentsCount: Int!

  """
  Vulnerability severity
  """
  severity: String!

  """
  Count of repository package releases with this vulnerability severity
  """
  totalCount: Int!
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  The deploy key.
  """
  key: String!

  """
  Whether or not the deploy key is read only.
  """
  readOnly: Boolean!

  """
  The deploy key title.
  """
  title: String!

  """
  Whether or not the deploy key has been verified.
  """
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  """
  A list of edges.
  """
  edges: [DeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [DeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The deployment associated with the 'deployed' event.
  """
  deployment: Deployment!
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The ref associated with the 'deployed' event.
  """
  ref: Ref

  """
  The HTTP path for this deployed event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this deployed event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node & PerformableViaApp & Trigger
  @serviceMapping(to: "github/deployments_api")
  @useNextGlobalIdFormat(after: "2021-07-02") {
  """
  Identifies the commit sha of the deployment.
  """
  commit: Commit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The websocket channel for this deployment's environment on the deployment dashboard.
  """
  deploymentDashboardEnvironmentChannel: String! @internal

  """
  The deployment description.
  """
  description: String

  """
  The latest environment to which this deployment was made.
  """
  environment: String
  id: ID!

  """
  Whether or not the deployment is to a production environment.
  """
  isProductionEnvironment: Boolean! @internal

  """
  Check if the deployment environment temporary.
  """
  isTransientEnvironment: Boolean! @internal

  """
  The latest environment to which this deployment was made.
  """
  latestEnvironment: String

  """
  The latest status of this deployment.
  """
  latestStatus: DeploymentStatus

  """
  The original environment to which this deployment was made.
  """
  originalEnvironment: String

  """
  Extra information that a deployment system might need.
  """
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: Ref

  """
  Identifies the repository associated with the deployment.
  """
  repository: Repository!

  """
  The current state of the deployment.
  """
  state: DeploymentState

  """
  A list of statuses associated with the deployment.
  """
  statuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentStatusConnection

  """
  The deployment task.
  """
  task: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
The connection type for Deployment.
"""
type DeploymentConnection @serviceMapping(to: "github/deployments_api") {
  """
  A list of edges.
  """
  edges: [DeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [Deployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge @serviceMapping(to: "github/deployments_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The deployment status that updated the deployment environment.
  """
  deploymentStatus: DeploymentStatus!
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this deployment_environment_changed event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this deployment_environment_changed event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder @serviceMapping(to: "github/deployments_api") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order deployments by.
  """
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField @serviceMapping(to: "github/deployments_api") {
  """
  Order collection by creation time
  """
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule implements Node @serviceMapping(to: "github/actions") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The timeout in minutes for this protection rule.
  """
  timeout: Int!

  """
  The type of protection rule.
  """
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [DeploymentProtectionRuleEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentProtectionRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType @serviceMapping(to: "github/actions") {
  """
  Required reviewers
  """
  REQUIRED_REVIEWERS

  """
  Wait timer
  """
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest @serviceMapping(to: "github/deployments_api") {
  """
  Whether or not the current user can approve the deployment
  """
  currentUserCanApprove: Boolean!

  """
  The target environment of the deployment
  """
  environment: Environment!

  """
  The teams or users that can review the deployment
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewerConnection!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimer: Int!

  """
  The wait timer in minutes configured in the environment
  """
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection @serviceMapping(to: "github/deployments_api") {
  """
  A list of edges.
  """
  edges: [DeploymentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge @serviceMapping(to: "github/deployments_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node @serviceMapping(to: "github/deployments_api") {
  """
  The comment the user left.
  """
  comment: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The environments approved or rejected
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!
  id: ID!

  """
  The decision of the user.
  """
  state: DeploymentReviewState!

  """
  The user that reviewed the deployment.
  """
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection @serviceMapping(to: "github/deployments_api") {
  """
  A list of edges.
  """
  edges: [DeploymentReviewEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge @serviceMapping(to: "github/deployments_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState @serviceMapping(to: "github/deployments_api") {
  """
  The deployment was approved.
  """
  APPROVED

  """
  The deployment was rejected.
  """
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer @serviceMapping(to: "github/deployments_api") = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection @serviceMapping(to: "github/deployments_api") {
  """
  A list of edges.
  """
  edges: [DeploymentReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge @serviceMapping(to: "github/deployments_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState @serviceMapping(to: "github/deployments_api") {
  """
  The pending deployment was not updated after 30 minutes.
  """
  ABANDONED

  """
  The deployment is currently active.
  """
  ACTIVE

  """
  An inactive transient deployment.
  """
  DESTROYED

  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment has queued
  """
  QUEUED

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node & PerformableViaApp
  @serviceMapping(to: "github/deployments_api")
  @useNextGlobalIdFormat(after: "2021-07-02") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who triggered the deployment.
  """
  creator: Actor!

  """
  Identifies the deployment associated with status.
  """
  deployment: Deployment!

  """
  Identifies the description of the deployment.
  """
  description: String

  """
  Identifies the environment of the deployment at the time of this deployment status
  """
  environment: String

  """
  Identifies the environment URL of the deployment.
  """
  environmentUrl: URI
  id: ID!

  """
  Identifies the log URL of the deployment.
  """
  logUrl: URI

  """
  Identifies the current state of the deployment.
  """
  state: DeploymentStatusState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection @serviceMapping(to: "github/deployments_api") {
  """
  A list of edges.
  """
  edges: [DeploymentStatusEdge]

  """
  A list of nodes.
  """
  nodes: [DeploymentStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge @serviceMapping(to: "github/deployments_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState @serviceMapping(to: "github/deployments_api") {
  """
  The deployment experienced an error.
  """
  ERROR

  """
  The deployment has failed.
  """
  FAILURE

  """
  The deployment is inactive.
  """
  INACTIVE

  """
  The deployment is in progress.
  """
  IN_PROGRESS

  """
  The deployment is pending.
  """
  PENDING

  """
  The deployment is queued
  """
  QUEUED

  """
  The deployment was successful.
  """
  SUCCESS

  """
  The deployment is waiting.
  """
  WAITING
}

"""
Represents a diff between two commits objects.
"""
type Diff @serviceMapping(to: "github/diff") {
  """
  The number of files changed in this diff.
  """
  filesChanged: Int!

  """
  The number of lines added in this diff.
  """
  linesAdded: Int!

  """
  The total lines added or removed in this diff.
  """
  linesChanged: Int!

  """
  The number of lines removed in this diff.
  """
  linesDeleted: Int!

  """
  The set of patches constituting this diff.
  """
  patches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PatchConnection!
}

"""
Represents a line of a diff between two commits objects.
"""
type DiffLine @serviceMapping(to: "github/diff") {
  """
  HTML formatted contents of this line.
  """
  html: String!

  """
  Indicates whether this line is missing a newline character at the end.
  """
  isMissingNewlineAtEnd: Boolean!

  """
  Left side line number.
  """
  left: Int

  """
  Position of this line in the diff.
  """
  position: Int!

  """
  Plain text contents of this line without any formatting/prefixing.
  """
  raw: String!

  """
  Right side line number.
  """
  right: Int

  """
  Plain text contents of this line.
  """
  text: String!

  """
  Type of this line.
  """
  type: DiffLineType!
}

"""
The possible DiffLine types.
"""
enum DiffLineType {
  """
  A diff addition line.
  """
  ADDITION

  """
  A diff context line.
  """
  CONTEXT

  """
  A diff deletion line.
  """
  DELETION

  """
  A diff hunk header line.
  """
  HUNK

  """
  An injected diff context line.
  """
  INJECTED_CONTEXT
}

"""
A range of commits which define a diff.
"""
input DiffRange @internal {
  """
  The OID of the latest merge base commit for this range. Used for excluding changes from base branches.
  """
  baseCommitOid: GitObjectID

  """
  The OID of the end commit for the range.
  """
  endCommitOid: GitObjectID!

  """
  The OID of the start commit for the range.
  """
  startCommitOid: GitObjectID!
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  """
  The left side of the diff.
  """
  LEFT

  """
  The right side of the diff.
  """
  RIGHT
}

"""
Autogenerated input type of DisableBetaFeature
"""
input DisableBetaFeatureInput @internal @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the feature to be disabled.
  """
  name: String!
}

"""
Autogenerated return type of DisableBetaFeature
"""
type DisableBetaFeaturePayload @internal @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput @serviceMapping(to: "github/merge") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to disable auto merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload @serviceMapping(to: "github/merge") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-11-05")

  """
  The pull request auto merge was disabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of DisableRepositories
"""
input DisableRepositoriesInput @internal @serviceMapping(to: "github/repo_state") {
  """
  Perform in a background job
  """
  async: Boolean = false

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Detailed reason tag for disabling the repositories
  """
  disablingDetail: String

  """
  Message emailed to owner
  """
  instructions: String

  """
  Reason for disabling the repositories
  """
  reason: String!

  """
  The global relay ids of repositories to disable.
  """
  repositoryIds: [ID!]! @possibleTypes(concreteTypes: ["Repository"])

  """
  Adds a staff note to the repository owner
  """
  staffNote: String
}

"""
Autogenerated return type of DisableRepositories
"""
type DisableRepositoriesPayload @internal @serviceMapping(to: "github/repo_state") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The disabled repositories.
  """
  repositories: [Repository!]
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node & TimelineEvent
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Issue or pull request from which the issue was disconnected.
  """
  source: ReferencedSubject!

  """
  Issue or pull request which was disconnected.
  """
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements AbuseReportable & Blockable & Comment & Deletable & Labelable & Lockable & Node & PerformableViaApp & Reactable & RepositoryNode & Subscribable & Updatable & Votable
  @serviceMapping(to: "github/discussions") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The comment chosen as this discussion's answer, if any.
  """
  answer: DiscussionComment

  """
  The time when a user chose this discussion's answer, if answered.
  """
  answerChosenAt: DateTime

  """
  The user who chose this discussion's answer, if answered.
  """
  answerChosenBy: Actor

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The main text of the discussion post.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The comment body hash.
  """
  bodyVersion: String! @internal

  """
  The category for this discussion.
  """
  category: DiscussionCategory!

  """
  Get a comment from a url
  """
  comment(
    """
    The url to decode.
    """
    url: String
  ): DiscussionComment

  """
  Type of comment
  """
  commentType: String! @internal

  """
  The replies to the discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussion comments returned from the connection.
    """
    orderBy: DiscussionCommentOrder = {field: CREATED_AT, direction: ASC}
  ): DiscussionCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2020-11-05")

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  The number identifying this discussion within the repository.
  """
  number: Int!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The linked release for this discussion
  """
  release: Release

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The path for this discussion.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2020-11-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  The title of this discussion.
  """
  title: String!

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode
  @serviceMapping(to: "github/discussions")
  @useNextGlobalIdFormat(after: "2021-07-02") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  A description of this category.
  """
  description: String

  """
  An emoji representing this category.
  """
  emoji: String!

  """
  This category's emoji rendered as HTML.
  """
  emojiHTML: HTML!
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """
  The name of this category.
  """
  name: String!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [DiscussionCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionCategory
}

"""
A comment on a discussion.
"""
type DiscussionComment implements AbuseReportable & Blockable & Comment & Deletable & Minimizable & Node & PerformableViaApp & Reactable & Updatable & UpdatableComment & Votable
  @serviceMapping(to: "github/discussions")
  @useNextGlobalIdFormat(after: "2021-08-30") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The time when this replied-to comment was deleted
  """
  deletedAt: DateTime

  """
  The discussion this comment was created in
  """
  discussion: Discussion

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Has this comment been chosen as the answer of its discussion?
  """
  isAnswer: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2020-01-22")

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The threaded replies to this comment.
  """
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for threaded discussion comments returned from the connection.
    """
    orderBy: DiscussionCommentOrder = {field: CREATED_AT, direction: ASC}
  ): DiscussionCommentConnection!

  """
  The discussion comment this comment is a reply to
  """
  replyTo: DiscussionComment

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The path for this discussion comment.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2020-01-22")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  The URL for this discussion comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can the current user mark this comment as an answer?
  """
  viewerCanMarkAsAnswer: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Can the current user unmark this comment as an answer?
  """
  viewerCanUnmarkAsAnswer: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [DiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [DiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DiscussionComment
}

"""
Ways in which lists of discussion comments can be ordered upon return.
"""
input DiscussionCommentOrder @underDevelopment(since: "2020-05-11") @serviceMapping(to: "github/discussions") {
  """
  The direction in which to order discussion comments by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussion comments.
  """
  field: DiscussionCommentOrderField!
}

"""
Properties by which discussion comment connections can be ordered.
"""
enum DiscussionCommentOrderField @underDevelopment(since: "2020-05-11") @serviceMapping(to: "github/discussions") {
  """
  Order discussion comments by creation time.
  """
  CREATED_AT

  """
  Order discussion comments by updated time.
  """
  UPDATED_AT
}

"""
The connection type for Discussion.
"""
type DiscussionConnection @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder @serviceMapping(to: "github/discussions") {
  """
  The direction in which to order discussions by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order discussions.
  """
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField @serviceMapping(to: "github/discussions") {
  """
  Order discussions by creation time.
  """
  CREATED_AT

  """
  Order discussions by most recent modification time.
  """
  UPDATED_AT
}

"""
Autogenerated input type of DismissNotice
"""
input DismissNoticeInput @internal @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The type of notice to dismiss.
  """
  notice: String!
}

"""
Autogenerated return type of DismissNotice
"""
type DismissNoticePayload @internal @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contents of the pull request review dismissal message.
  """
  message: String!

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DismissRepositoryRecommendation
"""
input DismissRepositoryRecommendationInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of DismissRepositoryRecommendation
"""
type DismissRepositoryRecommendationPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dismissed repository.
  """
  repository: Repository
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment @serviceMapping(to: "github/pull_request_reviews") {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  Position in the file to leave a comment on.
  """
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread @serviceMapping(to: "github/pull_request_reviews") {
  """
  Body of the comment to leave.
  """
  body: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  Path to the file being commented on.
  """
  path: String!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: DiffSide = RIGHT

  """
  The first line of the range to which the comment refers.
  """
  startLine: Int

  """
  The side of the diff on which the start line resides.
  """
  startSide: DiffSide = RIGHT
}

"""
A submitted user request for an account to join an early access program
"""
type EarlyAccessMembership implements Node @internal {
  """
  The user, organization, or enterprise account to grant early access to
  """
  account: Account

  """
  The user that submitted the early access request
  """
  actor: User

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The feature that this request is for
  """
  feature: EarlyAccessMembershipFeature!
  id: ID!

  """
  Indicates if this request is approved and access to the feature has been granted
  """
  isApproved: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for EarlyAccessMembership.
"""
type EarlyAccessMembershipConnection @internal {
  """
  A list of edges.
  """
  edges: [EarlyAccessMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EarlyAccessMembership]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EarlyAccessMembershipEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EarlyAccessMembership
}

"""
An early access feature that a user can apply for access to.
"""
enum EarlyAccessMembershipFeature @internal {
  """
  The GitHub Sponsors beta
  """
  GITHUB_SPONSORS

  """
  The GitHub Package Registry beta
  """
  REGISTRY

  """
  The team synchronization beta
  """
  TEAM_SYNC

  """
  For testing only
  """
  TESTING_ONLY
}

"""
Condition to filter early access memberships on.
"""
enum EarlyAccessMembershipFilter @internal {
  """
  Early access requests that have been accepted
  """
  ACCEPTED

  """
  All submitted early access requests
  """
  ALL

  """
  Early access requests that have not been accepted
  """
  PENDING
}

"""
Ordering options for early access membership connections.
"""
input EarlyAccessMembershipOrder @internal {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order memberships by.
  """
  field: EarlyAccessMembershipOrderField!
}

"""
Properties by which early access membership connections can be ordered.
"""
enum EarlyAccessMembershipOrderField @internal {
  """
  Order early access membership by creation time.
  """
  CREATED_AT
}

"""
Email domain address type.
"""
enum EmailDomainAddressType @internal @serviceMapping(to: "github/email_domain_reputation") {
  """
  A record.
  """
  A_RECORD

  """
  Email address domain name.
  """
  EMAIL_DOMAIN

  """
  MX exchange.
  """
  MX_EXCHANGE
}

"""
Email domain metadata from EmailDomainReputationRecord.
"""
type EmailDomainMetadata @internal @serviceMapping(to: "github/email_domain_reputation") {
  """
  Associated A records.
  """
  aRecords: [String!]!

  """
  Associated email domains.
  """
  emailDomains: [String!]!

  """
  Does email domain have a valid public suffix?
  """
  hasValidPublicSuffix: Boolean

  """
  Associated MX exchanges.
  """
  mxExchanges: [String!]!
}

"""
Autogenerated input type of EnableBetaFeature
"""
input EnableBetaFeatureInput @internal @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the feature to be enabled.
  """
  name: String!
}

"""
Autogenerated return type of EnableBetaFeature
"""
type EnableBetaFeaturePayload @internal @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput @serviceMapping(to: "github/merge") {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
  """
  commitBody: String

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
  """
  commitHeadline: String

  """
  The merge method to use. If omitted, defaults to 'MERGE'
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to enable auto-merge on.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload @serviceMapping(to: "github/merge") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-11-05")

  """
  The pull request auto-merge was enabled on.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnrollInToggleableFeature
"""
input EnrollInToggleableFeatureInput
  @underDevelopment(since: "2019-04-10")
  @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the enrollee to enroll in the toggleable feature.
  """
  enrolleeId: ID! @possibleTypes(concreteTypes: ["User"])

  """
  The Node ID of the toggleable feature to be enrolled in.
  """
  toggleableFeatureId: ID! @possibleTypes(concreteTypes: ["ToggleableFeature"])
}

"""
Autogenerated return type of EnrollInToggleableFeature
"""
type EnrollInToggleableFeaturePayload
  @underDevelopment(since: "2019-04-10")
  @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user toggling the feature
  """
  enrollee: User

  """
  The toggleable feature
  """
  toggleableFeature: ToggleableFeature
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements Node @serviceMapping(to: "github/admin_experience") {
  """
  A URL pointing to the enterprise's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Enterprise billing information visible to enterprise billing managers.
  """
  billingInfo: EnterpriseBillingInfo

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the enterprise.
  """
  description: String

  """
  The description of the enterprise as HTML.
  """
  descriptionHTML: HTML!
  id: ID!

  """
  The location of the enterprise.
  """
  location: String

  """
  A list of users who are members of this enterprise.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return members within the selected GitHub Enterprise deployment
    """
    deployment: EnterpriseUserDeployment

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return members with the selected user license type
    """
    license: EnterpriseLicenseType

    """
    Ordering options for members returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return members within the organizations with these logins
    """
    organizationLogins: [String!]

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization or server.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!

  """
  The name of the enterprise.
  """
  name: String!

  """
  A list of organizations that belong to this enterprise.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String
  ): OrganizationConnection!

  """
  Enterprise information only visible to enterprise owners.
  """
  ownerInfo: EnterpriseOwnerInfo

  """
  The HTTP path for this enterprise.
  """
  resourcePath: URI!

  """
  The URL-friendly identifier for the enterprise.
  """
  slug: String!

  """
  The HTTP URL for this enterprise.
  """
  url: URI!

  """
  A list of user accounts on this enterprise.
  """
  userAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnterpriseUserAccountConnection!

  """
  Is the current viewer an admin of this enterprise?
  """
  viewerIsAdmin: Boolean!

  """
  The URL of the enterprise website.
  """
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node
  @serviceMapping(to: "github/admin_experience")
  @useNextGlobalIdFormat(after: "2021-06-18") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email of the person who was invited to the enterprise.
  """
  email: String

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise!
  id: ID!

  """
  The user who was invited to the enterprise.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseAdministratorInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseAdministratorInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise administrator invitations by.
  """
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order enterprise administrator member invitations by creation time
  """
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole @serviceMapping(to: "github/admin_experience") {
  """
  Represents a billing manager of the enterprise account.
  """
  BILLING_MANAGER

  """
  Represents an owner of the enterprise account.
  """
  OWNER
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData @serviceMapping(to: "github/admin_experience") {
  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo @serviceMapping(to: "github/admin_experience") {
  """
  The number of licenseable users/emails across the enterprise.
  """
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The number of available seats across all owned organizations based on the unique number of billable users.
  """
  availableSeats: Int!
    @deprecated(
      reason: "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC."
    )

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """
  The bandwidth usage as a percentage of the bandwidth quota.
  """
  bandwidthUsagePercentage: Int!

  """
  The total seats across all organizations owned by the enterprise.
  """
  seats: Int!
    @deprecated(
      reason: "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC."
    )

  """
  The storage quota in GB for all organizations owned by the enterprise.
  """
  storageQuota: Float!

  """
  The storage usage in GB for all organizations owned by the enterprise.
  """
  storageUsage: Float!

  """
  The storage usage as a percentage of the storage quota.
  """
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """
  The total number of licenses allocated.
  """
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseEdge]

  """
  A list of nodes.
  """
  nodes: [Enterprise]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents an enterprise contribution a user made on GitHub.
"""
type EnterpriseContribution implements Contribution @internal @serviceMapping(to: "github/admin_experience") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for EnterpriseContribution.
"""
type EnterpriseContributionConnection @internal @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseContributionEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of enterprise contributions across all enterprise installations.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseContributionEdge @internal @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseContribution
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue @serviceMapping(to: "github/admin_experience") {
  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE

  """
  Organizations in the enterprise choose base repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue @serviceMapping(to: "github/admin_experience") {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue @serviceMapping(to: "github/admin_experience") {
  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED

  """
  There is no policy set for organizations in the enterprise.
  """
  NO_POLICY
}

"""
An identity provider configured to provision identities for an enterprise.
"""
type EnterpriseIdentityProvider implements Node
  @serviceMapping(to: "github/admin_experience")
  @useNextGlobalIdFormat(after: "2021-05-15") {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm

  """
  The enterprise this identity provider belongs to.
  """
  enterprise: Enterprise

  """
  ExternalIdentities provisioned by this identity provider.
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean
  ): ExternalIdentityConnection! @serviceMapping(to: "github/external_identities")
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML identity provider.
  """
  issuer: String

  """
  Has user provisioning been enabled for the enterprise
  """
  provisioningEnabled: Boolean! @underDevelopment(since: "2019-12-12")

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  Has SAML user deprovisioning been enabled for the enterprise
  """
  samlDeprovisioningEnabled: Boolean! @underDevelopment(since: "2019-12-12")

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
Enterprise license types
"""
enum EnterpriseLicenseType @internal @serviceMapping(to: "github/licensing") {
  """
  Enterprise
  """
  ENTERPRISE

  """
  Visual Studio subscription
  """
  VSS_BUNDLE
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember @serviceMapping(to: "github/admin_experience") = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseMemberEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Whether the user does not have a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All members consume a license Removal on 2021-01-01 UTC.")

  """
  The item at the end of the edge.
  """
  node: EnterpriseMember

  """
  The user license for the enterprise.
  """
  userLicense: UserLicense
    @deprecated(reason: "Not all members will have a user license record Removal on 2021-01-01 UTC.")
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise members by.
  """
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order enterprise members by creation time
  """
  CREATED_AT

  """
  Order enterprise members by login
  """
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue @serviceMapping(to: "github/admin_experience") {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Organization administrators choose whether to allow members to create repositories.
  """
  NO_POLICY

  """
  Members will be able to create only private repositories.
  """
  PRIVATE

  """
  Members will be able to create only public repositories.
  """
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue @serviceMapping(to: "github/admin_experience") {
  """
  The setting is disabled for organizations in the enterprise.
  """
  DISABLED

  """
  The setting is enabled for organizations in the enterprise.
  """
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType @serviceMapping(to: "github/admin_experience") {
  """
  Returns all enterprises in which the user is an admin.
  """
  ADMIN

  """
  Returns all enterprises in which the user is a member, admin, or billing manager.
  """
  ALL

  """
  Returns all enterprises in which the user is a billing manager.
  """
  BILLING_MANAGER

  """
  Returns all enterprises in which the user is a member of an org that is owned by the enterprise.
  """
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprises by.
  """
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order enterprises by name
  """
  NAME
}

"""
An invitation for an organization to become a part of an enterprise.
"""
type EnterpriseOrganizationInvitation implements Node
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  The date and time when the invitation was accepted.
  """
  acceptedAt: DateTime

  """
  The date and time when the invitation was canceled.
  """
  canceledAt: DateTime

  """
  The date and time when the invitation was confirmed.
  """
  confirmedAt: DateTime

  """
  The date and time when the invitation was created.
  """
  createdAt: DateTime!

  """
  The enterprise the invitation is for.
  """
  enterprise: Enterprise
  id: ID!

  """
  The organization who was invited to become a part of the enterprise.
  """
  invitee: Organization!

  """
  The user who created the invitation.
  """
  inviter: User!

  """
  The number of unique users in the invited organization that are not already members of the enterprise.
  """
  neededSeatCount: Int!

  """
  The stage of the flow where this invitation is.
  """
  status: EnterpriseOrganizationInvitationStatus!
}

"""
The connection type for EnterpriseOrganizationInvitation.
"""
type EnterpriseOrganizationInvitationConnection
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseOrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseOrganizationInvitationEdge
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseOrganizationInvitation
}

"""
Ordering options for enterprise organization invitation connections
"""
input EnterpriseOrganizationInvitationOrder
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order enterprise organization invitations by.
  """
  field: EnterpriseOrganizationInvitationOrderField!
}

"""
Properties by which enterprise organization invitation connections can be ordered.
"""
enum EnterpriseOrganizationInvitationOrderField
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  Order enterprise organization invitations by creation time
  """
  CREATED_AT
}

"""
The possible statuses of an enterprise organization invitation.
"""
enum EnterpriseOrganizationInvitationStatus
  @underDevelopment(since: "2019-06-28")
  @serviceMapping(to: "github/admin_experience") {
  """
  An invitation accepted by the organization administration, not yet confirmed.
  """
  ACCEPTED

  """
  An invitation declined by either the enterprise administrator or the
  organization administrator, meaning the organization did not become part of
  the enterprise.
  """
  CANCELED

  """
  An invitation confirmed by an enterprise administrator, meaning the organization became part of the enterprise.
  """
  CONFIRMED

  """
  An invitation created by an enterprise administrator, not yet accepted.
  """
  CREATED
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseOrganizationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseOutsideCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Whether the outside collaborator does not have a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All outside collaborators consume a license Removal on 2021-01-01 UTC.")

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information only visible to enterprise owners.
"""
type EnterpriseOwnerInfo @serviceMapping(to: "github/admin_experience") {
  """
  A list of all of the administrators for this enterprise.
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for administrators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection! @serviceMapping(to: "github/account_login")

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided base repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The permission to find organizations for.
    """
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!

  """
  A list of domains owned by the enterprise.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter whether or not the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter whether or not the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection!

  """
  Enterprise Server installations owned by the enterprise.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
  """
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!

  """
  Whether or not the base repository permission is currently being updated.
  """
  isUpdatingDefaultRepositoryPermission: Boolean!

  """
  Whether the two-factor authentication requirement is currently being enforced.
  """
  isUpdatingTwoFactorRequirement: Boolean!

  """
  The setting value for whether organization members with admin permissions on a
  repository can change repository visibility.
  """
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided can change repository visibility setting value.
  """
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for whether members of organizations in the enterprise can create internal repositories.
  """
  membersCanCreateInternalRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create private repositories.
  """
  membersCanCreatePrivateRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create public repositories.
  """
  membersCanCreatePublicRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create repositories.
  """
  membersCanCreateRepositoriesSetting: EnterpriseMembersCanCreateRepositoriesSettingValue

  """
  A list of enterprise organizations configured with the provided repository creation setting value.
  """
  membersCanCreateRepositoriesSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting to find organizations for.
    """
    value: OrganizationMembersCanCreateRepositoriesSettingValue!
  ): OrganizationConnection!

  """
  The setting value for whether members with admin permissions for repositories can delete issues.
  """
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can delete issues setting value.
  """
  membersCanDeleteIssuesSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
  """
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can delete repositories setting value.
  """
  membersCanDeleteRepositoriesSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for whether members of organizations in the enterprise can invite outside collaborators.
  """
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can invite collaborators setting value.
  """
  membersCanInviteCollaboratorsSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
  """
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue!

  """
  The setting value for whether members with admin permissions for repositories can update protected branches.
  """
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can update protected branches setting value.
  """
  membersCanUpdateProtectedBranchesSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for whether members can view dependency insights.
  """
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can view dependency insights setting value.
  """
  membersCanViewDependencyInsightsSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
  """
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!

  """
  A list of invitations for organizations to join this enterprise.
  """
  organizationInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EnterpriseOrganizationInvitations returned from the connection.
    """
    orderBy: EnterpriseOrganizationInvitationOrder = {field: CREATED_AT, direction: ASC}

    """
    If supplied, only returns invitations in that state.
    """
    status: EnterpriseOrganizationInvitationStatus
  ): EnterpriseOrganizationInvitationConnection @underDevelopment(since: "2019-06-28")

  """
  The setting value for whether organization projects are enabled for organizations in this enterprise.
  """
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided organization projects setting value.
  """
  organizationProjectsSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  A list of outside collaborators across the repositories in the enterprise.
  """
  outsideCollaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific outside collaborator.
    """
    login: String

    """
    Ordering options for outside collaborators returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    Only return outside collaborators on repositories with this visibility.
    """
    visibility: RepositoryVisibility
  ): EnterpriseOutsideCollaboratorConnection!

  """
  A list of pending administrator invitations for the enterprise.
  """
  pendingAdminInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pending enterprise administrator invitations returned from the connection.
    """
    orderBy: EnterpriseAdministratorInvitationOrder = {field: CREATED_AT, direction: DESC}

    """
    The search string to look for.
    """
    query: String

    """
    The role to filter by.
    """
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorInvitationConnection!

  """
  A list of pending collaborator invitations across the repositories in the enterprise.
  """
  pendingCollaboratorInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pending repository collaborator invitations returned from the connection.
    """
    orderBy: RepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    """
    The search string to look for.
    """
    query: String
  ): RepositoryInvitationConnection!

  """
  A list of pending collaborators across the repositories in the enterprise.
  """
  pendingCollaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pending repository collaborator invitations returned from the connection.
    """
    orderBy: RepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    """
    The search string to look for.
    """
    query: String
  ): EnterprisePendingCollaboratorConnection!
    @deprecated(
      reason: "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC."
    )

  """
  A list of pending member invitations for organizations in the enterprise.
  """
  pendingMemberInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pending enterprise organization member invitations returned from the connection.
    """
    orderBy: OrganizationInvitationOrder = {field: CREATED_AT, direction: DESC}

    """
    The search string to look for.
    """
    query: String
  ): EnterprisePendingMemberInvitationConnection!

  """
  The setting value for whether repository projects are enabled in this enterprise.
  """
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided repository projects setting value.
  """
  repositoryProjectsSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The SAML Identity Provider for the enterprise.
  """
  samlIdentityProvider: EnterpriseIdentityProvider

  """
  A list of enterprise organizations configured with the SAML single sign-on setting value.
  """
  samlIdentityProviderSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: IdentityProviderConfigurationState!
  ): OrganizationConnection!

  """
  A list of members with a support entitlement.
  """
  supportEntitlements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for support entitlement users returned from the connection.
    """
    orderBy: EnterpriseMemberOrder = {field: LOGIN, direction: ASC}
  ): EnterpriseMemberConnection!

  """
  The setting value for whether team discussions are enabled for organizations in this enterprise.
  """
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided team discussions setting value.
  """
  teamDiscussionsSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!

  """
  The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
  """
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue!

  """
  A list of enterprise organizations configured with the two-factor authentication setting value.
  """
  twoFactorRequiredSettingOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations with this setting.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The setting value to find organizations for.
    """
    value: Boolean!
  ): OrganizationConnection!
}

"""
The connection type for User.
"""
type EnterprisePendingCollaboratorConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterprisePendingCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
"""
type EnterprisePendingCollaboratorEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Whether the invited collaborator does not have a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All pending collaborators consume a license Removal on 2021-01-01 UTC.")

  """
  The item at the end of the edge.
  """
  node: User

  """
  The enterprise organization repositories this user is a member of.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories.
    """
    orderBy: RepositoryOrder = {field: NAME, direction: ASC}
  ): EnterpriseRepositoryInfoConnection!
}

"""
The connection type for OrganizationInvitation.
"""
type EnterprisePendingMemberInvitationConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterprisePendingMemberInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the total count of unique users in the connection.
  """
  totalUniqueUserCount: Int!
}

"""
An invitation to be a member in an enterprise organization.
"""
type EnterprisePendingMemberInvitationEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Whether the invitation has a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All pending members consume a license Removal on 2020-07-01 UTC.")

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node @serviceMapping(to: "github/admin_experience") {
  id: ID!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  The repository's name.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!
}

"""
The connection type for EnterpriseRepositoryInfo.
"""
type EnterpriseRepositoryInfoConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseRepositoryInfoEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseRepositoryInfo]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseRepositoryInfoEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseRepositoryInfo
}

"""
An Enterprise Server installation.
"""
type EnterpriseServerInstallation implements Node
  @serviceMapping(to: "github/admin_experience")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The customer name to which the Enterprise Server installation belongs.
  """
  customerName: String!

  """
  The host name of the Enterprise Server installation.
  """
  hostName: String!
  id: ID!

  """
  Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
  """
  isConnected: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  User accounts on this Enterprise Server installation.
  """
  userAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server user accounts returned from the connection.
    """
    orderBy: EnterpriseServerUserAccountOrder = {field: LOGIN, direction: ASC}
  ): EnterpriseServerUserAccountConnection!

  """
  User accounts uploads for the Enterprise Server installation.
  """
  userAccountsUploads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server user accounts uploads returned from the connection.
    """
    orderBy: EnterpriseServerUserAccountsUploadOrder = {field: CREATED_AT, direction: DESC}
  ): EnterpriseServerUserAccountsUploadConnection!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerInstallationEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection
  @underDevelopment(since: "2019-05-03")
  @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseServerInstallationMembershipEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge
  @underDevelopment(since: "2019-09-09")
  @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerInstallation

  """
  The role of the user in the enterprise membership.
  """
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order Enterprise Server installations by.
  """
  field: EnterpriseServerInstallationOrderField!
}

"""
Properties by which Enterprise Server installation connections can be ordered.
"""
enum EnterpriseServerInstallationOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order Enterprise Server installations by creation time
  """
  CREATED_AT

  """
  Order Enterprise Server installations by customer name
  """
  CUSTOMER_NAME

  """
  Order Enterprise Server installations by host name
  """
  HOST_NAME
}

"""
A user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccount implements Node
  @serviceMapping(to: "github/admin_experience")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  User emails belonging to this user account.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server user account emails returned from the connection.
    """
    orderBy: EnterpriseServerUserAccountEmailOrder = {field: EMAIL, direction: ASC}
  ): EnterpriseServerUserAccountEmailConnection!

  """
  The Enterprise Server installation on which this user account exists.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!

  """
  Whether the user account is a site administrator on the Enterprise Server installation.
  """
  isSiteAdmin: Boolean!

  """
  The login of the user account on the Enterprise Server installation.
  """
  login: String!

  """
  The profile name of the user account on the Enterprise Server installation.
  """
  profileName: String

  """
  The date and time when the user account was created on the Enterprise Server installation.
  """
  remoteCreatedAt: DateTime!

  """
  The ID of the user account on the Enterprise Server installation.
  """
  remoteUserId: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for EnterpriseServerUserAccount.
"""
type EnterpriseServerUserAccountConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseServerUserAccountEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerUserAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node @serviceMapping(to: "github/admin_experience") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The email address.
  """
  email: String!
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user account to which the email belongs.
  """
  userAccount: EnterpriseServerUserAccount!
}

"""
The connection type for EnterpriseServerUserAccountEmail.
"""
type EnterpriseServerUserAccountEmailConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseServerUserAccountEmailEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerUserAccountEmail]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountEmailEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountEmail
}

"""
Ordering options for Enterprise Server user account email connections.
"""
input EnterpriseServerUserAccountEmailOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order emails by.
  """
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order emails by email
  """
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user accounts by.
  """
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order user accounts by login
  """
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node @serviceMapping(to: "github/admin_experience") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise to which this upload belongs.
  """
  enterprise: Enterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!

  """
  The name of the file uploaded.
  """
  name: String!

  """
  The synchronization state of the upload
  """
  syncState: EnterpriseServerUserAccountsUploadSyncState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for EnterpriseServerUserAccountsUpload.
"""
type EnterpriseServerUserAccountsUploadConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseServerUserAccountsUploadEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseServerUserAccountsUpload]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountsUploadEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseServerUserAccountsUpload
}

"""
Ordering options for Enterprise Server user accounts upload connections.
"""
input EnterpriseServerUserAccountsUploadOrder @serviceMapping(to: "github/admin_experience") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user accounts uploads by.
  """
  field: EnterpriseServerUserAccountsUploadOrderField!
}

"""
Properties by which Enterprise Server user accounts upload connections can be ordered.
"""
enum EnterpriseServerUserAccountsUploadOrderField @serviceMapping(to: "github/admin_experience") {
  """
  Order user accounts uploads by creation time
  """
  CREATED_AT
}

"""
Synchronization state of the Enterprise Server user accounts upload
"""
enum EnterpriseServerUserAccountsUploadSyncState @serviceMapping(to: "github/admin_experience") {
  """
  The synchronization of the upload failed.
  """
  FAILURE

  """
  The synchronization of the upload is pending.
  """
  PENDING

  """
  The synchronization of the upload succeeded.
  """
  SUCCESS
}

"""
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
"""
type EnterpriseUserAccount implements Actor & AvatarOwner & Node
  @serviceMapping(to: "github/admin_experience")
  @useNextGlobalIdFormat(after: "2021-06-18") {
  """
  A URL pointing to the enterprise user account's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The avatars of the user
  """
  avatars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AvatarConnection @underDevelopment(since: "2019-06-28")

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The enterprise in which this user account exists.
  """
  enterprise: Enterprise!

  """
  A list of Enterprise Server installations this user is a member of.
  """
  enterpriseInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for installations returned from the connection.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the installation.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """
  The name of the enterprise user account
  """
  name: String

  """
  A list of enterprise organizations this user is a member of.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: LOGIN, direction: ASC}

    """
    The search string to look for.
    """
    query: String

    """
    The role of the user in the enterprise organization.
    """
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseOrganizationMembershipConnection!

  """
  The HTTP path for this user.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user.
  """
  url: URI!

  """
  The user within the enterprise.
  """
  user: User
}

"""
The connection type for EnterpriseUserAccount.
"""
type EnterpriseUserAccountConnection @serviceMapping(to: "github/admin_experience") {
  """
  A list of edges.
  """
  edges: [EnterpriseUserAccountEdge]

  """
  A list of nodes.
  """
  nodes: [EnterpriseUserAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseUserAccountEdge @serviceMapping(to: "github/admin_experience") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EnterpriseUserAccount
}

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole @serviceMapping(to: "github/admin_experience") {
  """
  The user is a member of the enterprise membership.
  """
  MEMBER

  """
  The user is an owner of the enterprise membership.
  """
  OWNER
}

"""
The possible GitHub Enterprise deployments where this user can exist.
"""
enum EnterpriseUserDeployment @serviceMapping(to: "github/admin_experience") {
  """
  The user is part of a GitHub Enterprise Cloud deployment.
  """
  CLOUD

  """
  The user is part of a GitHub Enterprise Server deployment.
  """
  SERVER
}

"""
An environment.
"""
type Environment implements Node @serviceMapping(to: "github/actions") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The gates defined for this environment
  """
  gates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): GateConnection! @internal
  id: ID!

  """
  The name of the environment
  """
  name: String!

  """
  The protection rules defined for this environment
  """
  protectionRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): DeploymentProtectionRuleConnection!
}

"""
The connection type for Environment.
"""
type EnvironmentConnection @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [EnvironmentEdge]

  """
  A list of nodes.
  """
  nodes: [Environment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnvironmentEdge @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Environment
}

"""
An Explore Collection aggregates interesting content related to a subject.
"""
type ExploreCollection implements Node @internal @serviceMapping(to: "github/explore") {
  """
  The collection's author.
  """
  author: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  A brief description of what the collection is about.
  """
  description: String!

  """
  The collection's name.
  """
  displayName: String
  id: ID!

  """
  Returns the URL for an image representing this collection.
  """
  imageUrl: URI

  """
  Whether this collection is featured on GitHub.
  """
  isFeatured: Boolean!

  """
  Whether or not this collection is published on GitHub.
  """
  isPublished: Boolean!

  """
  Returns a list of the collection items.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CollectionItemConnection! @internal

  """
  The HTTP path for this collection.
  """
  resourcePath: URI! @internal

  """
  A description of the collection description, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  The collection's short URL name.
  """
  slug: String!

  """
  The HTTP URL for this collection.
  """
  url: URI! @internal
}

"""
The connection type for ExploreCollection.
"""
type ExploreCollectionConnection @internal @serviceMapping(to: "github/explore") {
  """
  A list of edges.
  """
  edges: [ExploreCollectionEdge]

  """
  A list of nodes.
  """
  nodes: [ExploreCollection]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ExploreCollectionEdge @internal @serviceMapping(to: "github/explore") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ExploreCollection
}

"""
Ordering options for collection connections.
"""
input ExploreCollectionOrder @internal @serviceMapping(to: "github/explore") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order collections by.
  """
  field: ExploreCollectionOrderField!
}

"""
Properties by which collection connections can be ordered.
"""
enum ExploreCollectionOrderField @internal @serviceMapping(to: "github/explore") {
  """
  Order collection by creation time
  """
  CREATED_AT

  """
  Order collection by display name
  """
  DISPLAY_NAME

  """
  Order collection by update time
  """
  UPDATED_AT
}

"""
An external identity provisioned by SAML SSO or SCIM.
"""
type ExternalIdentity implements Node
  @serviceMapping(to: "github/external_auth")
  @useNextGlobalIdFormat(after: "2021-07-02") {
  """
  A list of AuthorizedCredentials for the user and SAML provider of this ExternalIdentity
  """
  authorizedCredentials(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationCredentialAuthorizationConnection!

  """
  The date and time that this external identity was created
  """
  createdAt: DateTime! @internal

  """
  The GUID for this identity
  """
  guid: String!
  id: ID!

  """
  Organization invitation for this SCIM-provisioned external identity
  """
  organizationInvitation: OrganizationInvitation

  """
  SAML Identity attributes
  """
  samlIdentity: ExternalIdentitySamlAttributes

  """
  SAML user data for the external identity formatted as JSON
  """
  samlUserData: String @internal

  """
  SCIM Identity attributes
  """
  scimIdentity: ExternalIdentityScimAttributes

  """
  SCIM user data for the external identity formatted as JSON
  """
  scimUserData: String @internal

  """
  The date and time that this external identity was updated
  """
  updatedAt: DateTime! @internal

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: User

  """
  The user sessions for this external identity
  """
  userSessions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserSessionConnection! @internal
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute @serviceMapping(to: "github/external_auth") {
  """
  The attribute metadata as JSON
  """
  metadata: String

  """
  The attribute name
  """
  name: String!

  """
  The attribute value
  """
  value: String!
}

"""
The connection type for ExternalIdentity.
"""
type ExternalIdentityConnection @serviceMapping(to: "github/external_auth") {
  """
  A list of edges.
  """
  edges: [ExternalIdentityEdge]

  """
  A list of nodes.
  """
  nodes: [ExternalIdentity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ExternalIdentityEdge @serviceMapping(to: "github/external_auth") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ExternalIdentity
}

"""
SAML attributes for the External Identity
"""
type ExternalIdentitySamlAttributes @serviceMapping(to: "github/external_auth") {
  """
  SAML Identity attributes
  """
  attributes: [ExternalIdentityAttribute!]!

  """
  The emails associated with the SAML identity
  """
  emails: [UserEmailMetadata!]

  """
  The externalId of the SAML identity
  """
  externalId: String @internal

  """
  Family name of the SAML identity
  """
  familyName: String

  """
  Given name of the SAML identity
  """
  givenName: String

  """
  The groups linked to this identity in IDP
  """
  groups: [String!]

  """
  The NameID of the SAML identity
  """
  nameId: String

  """
  The userName of the SAML identity
  """
  username: String
}

"""
SCIM attributes for the External Identity
"""
type ExternalIdentityScimAttributes @serviceMapping(to: "github/external_identities") {
  """
  The emails associated with the SCIM identity
  """
  emails: [UserEmailMetadata!]

  """
  The externalId of the SCIM identity
  """
  externalId: String @internal

  """
  Family name of the SCIM identity
  """
  familyName: String

  """
  Given name of the SCIM identity
  """
  givenName: String

  """
  The groups linked to this identity in IDP
  """
  groups: [String!]

  """
  The userName of the SCIM identity
  """
  username: String
}

"""
Set of client side exposed feature flags.
"""
enum FeatureFlag @internal @serviceMapping(to: "github/feature_management") {
  """
  Include the top ~500 GitHub Apps by installation count in Marketplace Search results

  CC: @github/marketplace-eng
  """
  GITHUB_APPS_IN_MARKETPLACE_SEARCH

  """
  Enables github token permission intellisense when updating workflow
  CC: @github/c2c-actions-experience
  """
  GITHUB_TOKEN_PERMISSION

  """
  Display Marketplace purchases that have not been properly installed.

  Project board: https://github.com/orgs/github/projects/768

  CC: @github/marketplace-eng

  https://github.com/devtools/feature_flags/marketplace_pending_installations
  """
  MARKETPLACE_PENDING_INSTALLATIONS

  """
  Only load frameworks.css as blocking resources for performance gains.

  CC: @github/ui-frameworks-reviewers
  """
  NON_BLOCKING_CSS
}

"""
An object for which features can be enabled or disabled
"""
interface FeatureFlaggable @internal @serviceMapping(to: "github/feature_management") {
  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal
}

"""
TreeEntry file types.
"""
union File @serviceMapping(to: "github/repo_info") = ImageFileType | MarkdownFileType | PdfFileType | TextFileType

"""
Describes a change to a file to be applied in a new commit.
"""
input FileChange @internal {
  """
  The new content of this file.
  """
  content: String

  """
  True if we are removing the file.
  """
  isDeletion: Boolean = false

  """
  The path to which an existing file will be moved.
  """
  newPath: String

  """
  The file path for this content.
  """
  path: String!
}

"""
Represents a line of a file.
"""
type FileLine @serviceMapping(to: "github/repo_info") {
  """
  HTML formatted contents of this line.
  """
  html: String!

  """
  Line number for this line.
  """
  number: Int!
}

"""
The possible viewed states of a file .
"""
enum FileViewedState @serviceMapping(to: "github/pull_requests") {
  """
  The file has new changes since last viewed.
  """
  DISMISSED

  """
  The file has not been marked as viewed.
  """
  UNVIEWED

  """
  The file has been marked as viewed.
  """
  VIEWED
}

"""
Ordering options for user follow connections.
"""
input FollowOrder @underDevelopment(since: "2018-10-01") @serviceMapping(to: "github/profiles") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order follows by.
  """
  field: FollowOrderField!
}

"""
Properties by which follow connections can be ordered.
"""
enum FollowOrderField @underDevelopment(since: "2018-10-01") @serviceMapping(to: "github/profiles") {
  """
  Order users by when they began following the user.
  """
  FOLLOWED_AT
}

"""
Autogenerated input type of FollowUser
"""
input FollowUserInput @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to follow.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of FollowUser
"""
type FollowUserPayload @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that was followed.
  """
  user: User
}

"""
The connection type for User.
"""
type FollowerConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The connection type for User.
"""
type FollowingConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents the policy applied to running workflows from fork pull requests.
"""
interface ForkPrWorkflowsPolicy @internal @serviceMapping(to: "github/actions") {
  """
  Indicates the fork PR workflow policy for this object
  """
  forkPrWorkflowsPolicy: ForkPrWorkflowsPolicyValue!
}

"""
The possible fork PR workflows policies.
"""
enum ForkPrWorkflowsPolicyValue @internal @serviceMapping(to: "github/actions") {
  """
  Fork PR workflows are disabled.
  """
  DISABLED

  """
  Fork PR workflows are enabled, and secrets are provided.
  """
  RUN_WITH_SECRETS

  """
  Fork PR workflows are enabled, and write tokens are provided.
  """
  RUN_WITH_TOKENS

  """
  Fork PR workflows are enabled, and write tokens and secrets are provided.
  """
  RUN_WITH_TOKENS_AND_SECRETS

  """
  Fork PR workflows are enabled.
  """
  RUN_WORKFLOWS
}

"""
A funding platform link for a repository.
"""
type FundingLink @serviceMapping(to: "github/funding_links") {
  """
  The funding platform this link is for.
  """
  platform: FundingPlatform!

  """
  The configured URL for this funding link.
  """
  url: URI!
}

"""
The possible funding platforms for repository funding links.
"""
enum FundingPlatform @serviceMapping(to: "github/funding_links") {
  """
  Community Bridge funding platform.
  """
  COMMUNITY_BRIDGE

  """
  Custom funding platform.
  """
  CUSTOM

  """
  GitHub funding platform.
  """
  GITHUB

  """
  IssueHunt funding platform.
  """
  ISSUEHUNT

  """
  Ko-fi funding platform.
  """
  KO_FI

  """
  Liberapay funding platform.
  """
  LIBERAPAY

  """
  Open Collective funding platform.
  """
  OPEN_COLLECTIVE

  """
  Otechie funding platform.
  """
  OTECHIE

  """
  Patreon funding platform.
  """
  PATREON

  """
  Tidelift funding platform.
  """
  TIDELIFT
}

"""
An environment gate.
"""
type Gate implements Node @internal @serviceMapping(to: "github/actions") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The timeout in minutes for this gate.
  """
  timeout: Int!

  """
  The type of gate.
  """
  type: GateType!
}

"""
The connection type for Gate.
"""
type GateConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [GateEdge]

  """
  A list of nodes.
  """
  nodes: [Gate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GateEdge @internal @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Gate
}

"""
A gate request.
"""
type GateRequest implements Node @internal @serviceMapping(to: "github/actions") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The state of the gate
  """
  state: GateRequestState!

  """
  The token for Actions Service
  """
  token: String!
}

"""
The possible states of a gate request.
"""
enum GateRequestState @serviceMapping(to: "github/actions") {
  """
  The gate request is closed.
  """
  CLOSED

  """
  The gate request is open
  """
  OPEN
}

"""
The possible gate types.
"""
enum GateType @serviceMapping(to: "github/actions") {
  """
  The gate is a branch policy gate
  """
  BRANCH_POLICY

  """
  The gate requires one or more manual approvals to be open.
  """
  MANUAL_APPROVAL

  """
  The gate is a timeout gate
  """
  TIMEOUT
}

"""
A generic hovercard context with a message and icon
"""
type GenericHovercardContext implements HovercardContext @serviceMapping(to: "github/hovercards") {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!
}

"""
A Gist.
"""
type Gist implements AbuseReportable & Node & Starrable & UniformResourceLocatable
  @serviceMapping(to: "github/gist")
  @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  A list of comments associated with the gist
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gist comments returned from the connection.
    """
    orderBy: GistCommentOrder @internal
  ): GistCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The gist description.
  """
  description: String

  """
  The files in this gist.
  """
  files(
    """
    The maximum number of files to return.
    """
    limit: Int = 10

    """
    The oid of the files to return
    """
    oid: GitObjectID
  ): [GistFile]

  """
  A list of forks associated with the gist
  """
  forks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder
  ): GistConnection!
  id: ID!

  """
  Identifies if the gist is a fork.
  """
  isFork: Boolean!

  """
  Returns whether this gist is pinned to the profile of the specified repository owner.
  """
  isPinned(
    """
    The ID of the owner of the profile you want to check.
    """
    profileOwnerId: ID!
  ): Boolean! @underDevelopment(since: "2019-02-08")

  """
  Whether the gist is public or not.
  """
  isPublic: Boolean!

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The gist name.
  """
  name: String!

  """
  The gist owner.
  """
  owner: RepositoryOwner

  """
  Identifies when the gist was last pushed to.
  """
  pushedAt: DateTime

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  The gist's git sha.
  """
  sha: String @underDevelopment(since: "2019-02-20")

  """
  Gist information only visible to site admin
  """
  stafftoolsInfo: GistStafftoolsInfo @internal

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  A short summary of this gist
  """
  title: String @internal

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this Gist.
  """
  url: URI!

  """
  Returns a boolean indicating whether the viewing user has the ability to star this starrable.
  """
  viewerCanStar: Boolean! @underDevelopment(since: "2020-05-18")

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""
Represents a comment on an Gist.
"""
type GistComment implements Comment & Deletable & Minimizable & Node & Reportable & Updatable & UpdatableComment
  @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the gist.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  Identifies the comment body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The associated gist.
  """
  gist: Gist!
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The HTTP path for this object
  """
  resourcePath: URI! @internal

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this object
  """
  url: URI! @internal

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal
}

"""
The connection type for GistComment.
"""
type GistCommentConnection {
  """
  A list of edges.
  """
  edges: [GistCommentEdge]

  """
  A list of nodes.
  """
  nodes: [GistComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GistCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GistComment
}

"""
Ways in which lists of gist comments can be ordered upon return.
"""
input GistCommentOrder @serviceMapping(to: "github/gist") {
  """
  The direction in which to order gist comments by the specified field.
  """
  direction: OrderDirection!

  """
  The field by which to order gist comments.
  """
  field: GistCommentOrderField!
}

"""
Properties by which gist comment connections can be ordered.
"""
enum GistCommentOrderField @serviceMapping(to: "github/gist") {
  """
  Order gist comments by updated at time.
  """
  UPDATED_AT
}

"""
The connection type for Gist.
"""
type GistConnection @serviceMapping(to: "github/gist") {
  """
  A list of edges.
  """
  edges: [GistEdge]

  """
  A list of nodes.
  """
  nodes: [Gist]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GistEdge @serviceMapping(to: "github/gist") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Gist
}

"""
A file in a gist.
"""
type GistFile {
  """
  Indicates whether this file can be rendered. Will return false if the file is binary or too large.
  """
  canRender: Boolean! @internal

  """
  The file name encoded to remove characters that are invalid in URL paths.
  """
  encodedName: String

  """
  The gist file encoding.
  """
  encoding: String

  """
  The file extension from the file name.
  """
  extension: String

  """
  Indicates if this file is an image.
  """
  isImage: Boolean!

  """
  Whether the file's contents were truncated.
  """
  isTruncated: Boolean!

  """
  The programming language this file is written in.
  """
  language: Language

  """
  Get the text data of this file as separate lines with syntax highlighting. If
  any syntax highlighting is applied, HTML strings will be returned.
  """
  lines(
    """
    Optionally limit how many lines are returned.
    """
    limit: Int = 100
  ): [String!]!

  """
  The gist file name.
  """
  name: String

  """
  The gist file size in bytes.
  """
  size: Int

  """
  UTF8 text data or null if the file is binary
  """
  text(
    """
    Optionally truncate the returned file to this length.
    """
    truncate: Int
  ): String
}

"""
Ordering options for gist connections
"""
input GistOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repositories by.
  """
  field: GistOrderField!
}

"""
Properties by which gist connections can be ordered.
"""
enum GistOrderField {
  """
  Order gists by creation time
  """
  CREATED_AT

  """
  Order gists by push time
  """
  PUSHED_AT

  """
  Order gists by update time
  """
  UPDATED_AT
}

"""
The privacy of a Gist
"""
enum GistPrivacy {
  """
  Gists that are public and secret
  """
  ALL

  """
  Public
  """
  PUBLIC

  """
  Secret
  """
  SECRET
}

"""
Gist information only visible to site admin
"""
type GistStafftoolsInfo @internal @serviceMapping(to: "github/gist") {
  """
  Gist file previews
  """
  files(
    """
    The max number of files to return.
    """
    limit: Int = 10
  ): [GistFile] @internal
}

"""
Represents an actor in a Git commit (ie. an author or committer).
"""
type GitActor @serviceMapping(to: "github/commit") {
  """
  The actor corresponding to the email field. Null if no such actor exists.
  """
  actor: Actor @underDevelopment(since: "2018-06-25")

  """
  A URL pointing to the author's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The HTTP URL to the actor's list of commits for the associated repository.
  """
  commitsResourcePath: URI @internal

  """
  The timestamp of the Git action (authoring or committing).
  """
  date: GitTimestamp

  """
  The email in the Git commit.
  """
  email: String

  """
  The name in the Git commit.
  """
  name: String

  """
  The GitHub user corresponding to the email field. Null if no such user exists.
  """
  user: User
}

"""
The connection type for GitActor.
"""
type GitActorConnection @serviceMapping(to: "github/commit") {
  """
  A list of edges.
  """
  edges: [GitActorEdge]

  """
  A list of nodes.
  """
  nodes: [GitActor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GitActorEdge @serviceMapping(to: "github/commit") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GitActor
}

"""
Represents information about the GitHub instance.
"""
type GitHubMetadata {
  """
  Returns a String that's a SHA of `github-services`
  """
  gitHubServicesSha: GitObjectID!

  """
  IP addresses that users connect to for git operations
  """
  gitIpAddresses: [String!]

  """
  IP addresses that service hooks are sent from
  """
  hookIpAddresses: [String!]

  """
  IP addresses that the importer connects from
  """
  importerIpAddresses: [String!]

  """
  Whether or not users are verified
  """
  isPasswordAuthenticationVerifiable: Boolean!

  """
  IP addresses for GitHub Pages' A records
  """
  pagesIpAddresses: [String!]
}

"""
Represents a Git object.
"""
interface GitObject {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!
  id: ID!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!
}

"""
A Git object ID.
"""
scalar GitObjectID

"""
A fully qualified reference name (e.g. `refs/heads/master`).
"""
scalar GitRefname @serviceMapping(to: "github/repo_info")

"""
Git SSH string
"""
scalar GitSSHRemote

"""
Information about a signature (GPG or S/MIME) on a Commit or Tag.
"""
interface GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
The state of a Git signature.
"""
enum GitSignatureState {
  """
  The signing certificate or its chain could not be verified
  """
  BAD_CERT

  """
  Invalid email used for signing
  """
  BAD_EMAIL

  """
  Signing key expired
  """
  EXPIRED_KEY

  """
  Internal error - the GPG verification service misbehaved
  """
  GPGVERIFY_ERROR

  """
  Internal error - the GPG verification service is unavailable at the moment
  """
  GPGVERIFY_UNAVAILABLE

  """
  Invalid signature
  """
  INVALID

  """
  Malformed signature
  """
  MALFORMED_SIG

  """
  The usage flags for the key that signed this don't allow signing
  """
  NOT_SIGNING_KEY

  """
  Email used for signing not known to GitHub
  """
  NO_USER

  """
  Valid signature, though certificate revocation check failed
  """
  OCSP_ERROR

  """
  Valid signature, pending certificate revocation checking
  """
  OCSP_PENDING

  """
  One or more certificates in chain has been revoked
  """
  OCSP_REVOKED

  """
  Key used for signing not known to GitHub
  """
  UNKNOWN_KEY

  """
  Unknown signature type
  """
  UNKNOWN_SIG_TYPE

  """
  Unsigned
  """
  UNSIGNED

  """
  Email used for signing unverified on GitHub
  """
  UNVERIFIED_EMAIL

  """
  Valid signature and verified by GitHub
  """
  VALID
}

"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""
scalar GitTimestamp

"""
Represents a GPG signature on a Commit or Tag.
"""
type GpgSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Hex-encoded ID of the key that signed this object.
  """
  keyId: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Autogenerated input type of GrantMigratorRole
"""
input GrantMigratorRoleInput @serviceMapping(to: "github/octoshift") {
  """
  The user login or Team slug to grant the migrator role.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of GrantMigratorRole
"""
type GrantMigratorRolePayload @serviceMapping(to: "github/octoshift") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of GrantOapForMarketplaceListing
"""
input GrantOapForMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Grant access to the OAuth app for the listing that matches this slug. It's the short name of the listing used in its URL.
  """
  listingSlug: String!

  """
  The Organization ID to grant the OAuth application policy.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of GrantOapForMarketplaceListing
"""
type GrantOapForMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
An external group mapping.
"""
input GroupMapping @underDevelopment(since: "2019-05-06") @serviceMapping(to: "github/teams") {
  """
  The description for the external Group.
  """
  groupDescription: String

  """
  ID of the external Group to map the Team to.
  """
  groupId: ID!

  """
  The name for the external Group.
  """
  groupName: String
}

"""
A string containing HTML code.
"""
scalar HTML

"""
Represents a 'head_ref_deleted' event on a given pull request.
"""
type HeadRefDeletedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  Identifies the Ref associated with the `head_ref_deleted` event.
  """
  headRef: Ref

  """
  Identifies the name of the Ref associated with the `head_ref_deleted` event.
  """
  headRefName: String!
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'head_ref_force_pushed' event on a given pull request.
"""
type HeadRefForcePushedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the after commit SHA for the 'head_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """
  The HTTP URL link to see what changes were force pushed
  """
  comparisonPath: URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  """
  ref: Ref

  """
  Identifies the name of the ref of the force push.
  """
  refName: String! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'head_ref_restored' event on a given pull request.
"""
type HeadRefRestoredEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Detail needed to display a hovercard for a user
"""
type Hovercard @serviceMapping(to: "github/hovercards") {
  """
  Each of the contexts for this hovercard
  """
  contexts: [HovercardContext!]!

  """
  The organization (if any) for the given subject
  """
  organization: Organization @internal
}

"""
An individual line of a hovercard
"""
interface HovercardContext {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!
}

"""
The possible states in which authentication can be configured with an identity provider.
"""
enum IdentityProviderConfigurationState {
  """
  Authentication with an identity provider is configured but not enforced.
  """
  CONFIGURED

  """
  Authentication with an identity provider is configured and enforced.
  """
  ENFORCED

  """
  Authentication with an identity provider is not configured.
  """
  UNCONFIGURED
}

"""
Represents an image file (png, jpeg, gif).
"""
type ImageFileType implements RawBlobUrl @serviceMapping(to: "github/repo_info") {
  """
  The URL to this file.
  """
  url: URI
}

"""
An import to GitHub
"""
type Import implements Node @serviceMapping(to: "github/import_export") @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The user that created the Import
  """
  creator: Actor!
  id: ID!

  """
  The repositories associated with this Import
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository
    """
    orderBy: RepositoryOrder = {field: CREATED_AT, direction: ASC}
  ): RepositoryConnection!
}

"""
The state of an import or export of GitHub data.
"""
enum ImportExportState @serviceMapping(to: "github/import_export") {
  """
  The import archive has been uploaded
  """
  ARCHIVE_UPLOADED

  """
  The import has conflicts to resolve
  """
  CONFLICTS

  """
  The export has been completed
  """
  EXPORTED

  """
  The export is being processed
  """
  EXPORTING

  """
  The import or export is has encountered an error
  """
  FAILED

  """
  The import encountered an error
  """
  FAILED_IMPORT

  """
  The import has completed
  """
  IMPORTED

  """
  The import is being processed
  """
  IMPORTING

  """
  Mappings are being applied to the import in a background job
  """
  MAPPING

  """
  The import or export is queued and waiting to be processed
  """
  PENDING

  """
  The archive is being unpacked
  """
  PREPARING

  """
  The import is ready to be imported
  """
  READY

  """
  The migration repositories have been unlocked
  """
  UNLOCKED

  """
  The import archive is ready to be uploaded
  """
  WAITING
}

"""
What action to take when performing an import migration.
"""
enum ImportMapAction @serviceMapping(to: "github/import_export") {
  """
  Forced conflict.
  """
  CONFLICT

  """
  Import a record as a new record.
  """
  IMPORT

  """
  Map a record for import with an existing record.
  """
  MAP

  """
  Merge a record for import with an existing record.
  """
  MERGE

  """
  Rename a record for import as a new record.
  """
  RENAME

  """
  Skip importing a record.
  """
  SKIP
}

"""
Autogenerated input type of ImportProject
"""
input ImportProjectInput @serviceMapping(to: "github/projects") {
  """
  The description of Project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of columns containing issues and pull requests.
  """
  columnImports: [ProjectColumnImport!]!

  """
  The name of Project.
  """
  name: String!

  """
  The name of the Organization or User to create the Project under.
  """
  ownerName: String!

  """
  Whether the Project is public or not.
  """
  public: Boolean = false
}

"""
Autogenerated return type of ImportProject
"""
type ImportProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-03-01")

  """
  The new Project!
  """
  project: Project
}

"""
Autogenerated input type of IncrementRegistryPackageDownloadCount
"""
input IncrementRegistryPackageDownloadCountInput @internal @serviceMapping(to: "github/package_registry") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Package Version ID to log a download.
  """
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of IncrementRegistryPackageDownloadCount
"""
type IncrementRegistryPackageDownloadCountPayload @internal @serviceMapping(to: "github/package_registry") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Package Version ID to log a download.
  """
  packageVersionId: ID
}

"""
The connection type for App.
"""
type InstalledAppConnection @internal @serviceMapping(to: "github/apps") {
  """
  A list of edges.
  """
  edges: [InstalledAppEdge]

  """
  A list of nodes.
  """
  nodes: [App]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An installation on a repository
"""
type InstalledAppEdge @internal @serviceMapping(to: "github/apps") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: App
}

"""
The connection type for IntegrationInstallation.
"""
type InstalledAppInstallationsConnection @internal @serviceMapping(to: "github/apps") {
  """
  A list of edges.
  """
  edges: [IntegrationInstallationEdge]

  """
  A list of nodes.
  """
  nodes: [IntegrationInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A description of an Integration category.
"""
type IntegrationFeature @internal {
  """
  The description of the category
  """
  body: String!

  """
  The category's full name.
  """
  name: String!

  """
  The HTTP path for this category.
  """
  resourcePath: URI!

  """
  The category's URL name.
  """
  slug: String!

  """
  The state of the category
  """
  state: IntegrationFeatureState!

  """
  The HTTP URL for this category.
  """
  url: URI!
}

"""
Track the state of this feature if it should be visible and or filterable.
"""
enum IntegrationFeatureState @internal {
  """
  Default state. Feature is being built but shouldn't be visible or filterable.
  """
  DRAFT

  """
  Feature will display on IntegrationListing pages and will also appear within the filtering bar.
  """
  FILTERABLE

  """
  Feature is hidden for changes or temporary problems.
  """
  HIDDEN

  """
  Feature will display on IntegrationListing pages.
  """
  VISIBLE
}

"""
The installation of a GitHub App on a target account
"""
type IntegrationInstallation implements FeatureFlaggable & Node @internal @serviceMapping(to: "github/apps") {
  """
  The installed GitHub app.
  """
  app: App!

  """
  The HTTP URL for the installation configuration
  """
  configurationUrl: URI!
  id: ID!

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  The target user or org account for this installation.
  """
  target: Account!
}

"""
The connection type for IntegrationInstallation.
"""
type IntegrationInstallationConnection @internal @serviceMapping(to: "github/apps") {
  """
  A list of edges.
  """
  edges: [IntegrationInstallationEdge]

  """
  A list of nodes.
  """
  nodes: [IntegrationInstallation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IntegrationInstallationEdge @internal @serviceMapping(to: "github/apps") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IntegrationInstallation
}

"""
A public description of an Integration.
"""
type IntegrationListing @internal {
  """
  The GitHub App this listing represents.
  """
  app: App

  """
  The integration's short description.
  """
  avatarColor: String!

  """
  The integration's short description.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The integration's short description.
  """
  blurb: String!

  """
  The integration's rendered description.
  """
  body: HTML!

  """
  Get alphabetically sorted list of Integration categories
  """
  categories: [IntegrationFeature!]! @internal

  """
  A link to the developer of the integrations website.
  """
  companyUrl: URI

  """
  The HTTP path for the configuration endpoint
  """
  configurationResourcePath: URI!

  """
  The HTTP URL for the configuration endpoint
  """
  configurationUrl: URI!

  """
  A link to the integration's documentation.
  """
  documentationUrl: URI

  """
  The internal integration's id.
  """
  id: Int!

  """
  The number of times this integration has been installed.
  """
  installationCount(
    """
    Only count installations created after this epoch time
    """
    since: Int
  ): Int!

  """
  The HTTP path for the installation endpoint
  """
  installationResourcePath: URI!

  """
  The HTTP URL for the installation endpoint
  """
  installationUrl: URI!

  """
  Whether this integration has been installed for this user
  """
  integrationInstalled: Boolean!

  """
  The type of integration that this describes
  """
  integrationType: IntegrationType!

  """
  Get alphabetically sorted list of supported languages
  """
  languages: [String]! @internal

  """
  Find the approved Marketplace listing for the same app this Integrations listing
  represents, if this Integration listing is published.
  """
  marketplaceListing: MarketplaceListing @internal

  """
  The integration's full name.
  """
  name: String!

  """
  The OAuth application this listing represents.
  """
  oauthApplication: OauthApplication @internal

  """
  The owner of the app represented by this listing.
  """
  owner: User! @internal

  """
  Whether this integration is sold through the marketplace
  """
  paid: Boolean!

  """
  A link to the integration's detailed pricing
  """
  pricingUrl: URI

  """
  A link to the integration's privacy policy.
  """
  privacyPolicyUrl: URI!

  """
  The integration's short URL name.
  """
  slug: String!

  """
  A link to the integration's status page.
  """
  statusUrl: URI

  """
  A link to the integration's support site
  """
  supportUrl: URI

  """
  A link to the integration's terms of service.
  """
  tosUrl: URI
}

"""
The connection type for IntegrationListing.
"""
type IntegrationListingConnection @internal {
  """
  A list of edges.
  """
  edges: [IntegrationListingEdge]

  """
  A list of nodes.
  """
  nodes: [IntegrationListing]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IntegrationListingEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IntegrationListing
}

"""
Indicates which kind of integration
"""
enum IntegrationType @internal {
  """
  GitHub Apps
  """
  GITHUB_APP

  """
  OAuth Application
  """
  NONE

  """
  OAuth Application
  """
  OAUTH
}

"""
Types of objects a user can have interacted with.
"""
enum InteractableType @internal {
  """
  Issues the user has interacted with.
  """
  ISSUE

  """
  Pull requests the user has interacted with.
  """
  PULL_REQUEST
}

"""
Represents the kinds of interactions a user can have with another record.
"""
enum InteractionType {
  """
  User was assigned to the record.
  """
  ASSIGNED

  """
  User created the record.
  """
  AUTHORED

  """
  User left a comment on the record.
  """
  COMMENTED

  """
  User's comment record was edited.
  """
  COMMENT_EDITED

  """
  User deployed the record.
  """
  DEPLOYED

  """
  Another user commented on the user's record.
  """
  RECEIVED_COMMENT

  """
  Another user's comment record was edited.
  """
  RECEIVED_COMMENT_EDITED

  """
  The user's record was referenced via a commit.
  """
  REFERENCED

  """
  User opened the record when it was closed.
  """
  REOPENED

  """
  User left a comment in a pull request review.
  """
  REVIEW_COMMENTED

  """
  User's record received a review.
  """
  REVIEW_RECEIVED

  """
  The user's review was requested on the record.
  """
  REVIEW_REQUESTED
}

"""
A security advisory on a repository; a temporary stand-in until RepositoryAdvisory object becomes public
"""
type InternalRepositoryAdvisory implements Advisory @internal @serviceMapping(to: "github/repo_advisories") {
  """
  A plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!
  id: ID!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!
}

"""
Autogenerated input type of InviteEnterpriseAdmin
"""
input InviteEnterpriseAdminInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email of the person to invite as an administrator.
  """
  email: String

  """
  The ID of the enterprise to which you want to invite an administrator.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a user to invite as an administrator.
  """
  invitee: String

  """
  The role of the administrator.
  """
  role: EnterpriseAdministratorRole
}

"""
Autogenerated return type of InviteEnterpriseAdmin
"""
type InviteEnterpriseAdminPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created enterprise administrator invitation.
  """
  invitation: EnterpriseAdministratorInvitation
}

"""
Autogenerated input type of InviteEnterpriseOrganization
"""
input InviteEnterpriseOrganizationInput
  @underDevelopment(since: "2019-01-24")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise to which you want to invite an organization.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to invite to join the enterprise.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of InviteEnterpriseOrganization
"""
type InviteEnterpriseOrganizationPayload
  @underDevelopment(since: "2019-01-24")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created enterprise organization invitation
  """
  invitation: EnterpriseOrganizationInvitation
}

"""
Autogenerated input type of InviteToOrganization
"""
input InviteToOrganizationInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The email address of the user to invite
  """
  email: String

  """
  The ID of the user to invite
  """
  inviteeId: ID @possibleTypes(concreteTypes: ["User"])

  """
  The ID of the organization to invite the user to
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The role to assign the user in the organization
  """
  role: OrganizationInvitationRole

  """
  The IDs of the teams to add the user to as members
  """
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of InviteToOrganization
"""
type InviteToOrganizationPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The created invitation
  """
  invitation: OrganizationInvitation
}

"""
The possible values for the IP allow list enabled setting.
"""
enum IpAllowListEnabledSettingValue @serviceMapping(to: "github/ip_allow_list") {
  """
  The setting is disabled for the owner.
  """
  DISABLED

  """
  The setting is enabled for the owner.
  """
  ENABLED
}

"""
An IP address or range of addresses that is allowed to access an owner's resources.
"""
type IpAllowListEntry implements Node
  @serviceMapping(to: "github/ip_allow_list")
  @useNextGlobalIdFormat(after: "2021-07-10") {
  """
  A single IP address or range of IP addresses in CIDR notation.
  """
  allowListValue: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  Whether the entry is currently active.
  """
  isActive: Boolean!

  """
  The name of the IP allow list entry.
  """
  name: String

  """
  The owner of the IP allow list entry.
  """
  owner: IpAllowListOwner!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for IpAllowListEntry.
"""
type IpAllowListEntryConnection @serviceMapping(to: "github/ip_allow_list") {
  """
  A list of edges.
  """
  edges: [IpAllowListEntryEdge]

  """
  A list of nodes.
  """
  nodes: [IpAllowListEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IpAllowListEntryEdge @serviceMapping(to: "github/ip_allow_list") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IpAllowListEntry
}

"""
Ordering options for IP allow list entry connections.
"""
input IpAllowListEntryOrder @serviceMapping(to: "github/ip_allow_list") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order IP allow list entries by.
  """
  field: IpAllowListEntryOrderField!
}

"""
Properties by which IP allow list entry connections can be ordered.
"""
enum IpAllowListEntryOrderField @serviceMapping(to: "github/ip_allow_list") {
  """
  Order IP allow list entries by the allow list value.
  """
  ALLOW_LIST_VALUE

  """
  Order IP allow list entries by creation time.
  """
  CREATED_AT
}

"""
The possible values for the IP allow list configuration for installed GitHub Apps setting.
"""
enum IpAllowListForInstalledAppsEnabledSettingValue @serviceMapping(to: "github/ip_allow_list") {
  """
  The setting is disabled for the owner.
  """
  DISABLED

  """
  The setting is enabled for the owner.
  """
  ENABLED
}

"""
Types that can own an IP allow list.
"""
union IpAllowListOwner @serviceMapping(to: "github/ip_allow_list") = App | Enterprise | Organization

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements AbuseReportable & Assignable & Blockable & Closable & Comment & Commentable & Labelable & Lockable & Node & PerformableViaApp & Reactable & Reportable & RepositoryNode & Subscribable & Trigger & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/issues") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  Identifies the body of the issue.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The http path for this issue body
  """
  bodyResourcePath: URI!

  """
  Identifies the body of the issue rendered to text.
  """
  bodyText: String!

  """
  The http URL for this issue body
  """
  bodyUrl: URI!

  """
  Identifies the comment body hash.
  """
  bodyVersion: String! @internal

  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The actor who closed the issue.
  """
  closedBy: Actor @internal

  """
  List of open pull requests referenced from this issue
  """
  closedByPullRequestsReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include closed PRs in results
    """
    includeClosedPrs: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return results ordered by state
    """
    orderByState: Boolean = false
  ): PullRequestConnection @internal

  """
  Find a particular comment on this issue.
  """
  comment(
    """
    Look up comment by its database ID.
    """
    databaseId: Int!
  ): IssueComment @underDevelopment(since: "2018-10-05")

  """
  Type of comment
  """
  commentType: String! @internal

  """
  A list of comments associated with the Issue.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder

    """
    List issue comments since given date
    """
    since: DateTime @underDevelopment(since: "2018-08-13")
  ): IssueCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Indicates whether or not this issue is currently pinned to the repository issues list
  """
  isPinned: Boolean

  """
  Is this issue read by the viewer
  """
  isReadByViewer: Boolean

  """
  Is this issue currently being transferred
  """
  isTransferInProgress: Boolean! @internal

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  A list of mentionable items that can be mentioned in the context of this issue.
  """
  mentionableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users, teams with query on mentionable items
    """
    query: String
  ): MentionableItemConnection

  """
  Identifies the milestone associated with the issue.
  """
  milestone: Milestone

  """
  Identifies the issue number.
  """
  number: Int!

  """
  Indicates whether the issue or pull request has exceeded the comment limit.
  """
  overCommentLimit: Boolean! @underDevelopment(since: "2018-10-02")

  """
  A list of Users that are participating in the Issue conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Repositories that the viewer can transfer this issue to
  """
  possibleTransferRepositoriesForViewer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A name to search by
    """
    query: String
  ): RepositoryConnection @internal

  """
  List of project cards associated with this issue.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection! @serviceMapping(to: "github/projects")

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  The user that created the issue - will fall back to ghost user if user was deleted
  """
  safeUser: User @underDevelopment(since: "2019-05-09")

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-08-27")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  Identifies the state of the issue.
  """
  state: IssueState!

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  A list of suggested users to assign to this object
  """
  suggestedAssignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If provided, searches users by login or profile name
    """
    query: String
  ): UserConnection! @serviceMapping(to: "github/mobile_api")

  """
  Number of tasks in the issue's task list
  """
  taskListItemCount(
    """
    Limit the count to tasks in the specified statuses.
    """
    statuses: [TaskListItemStatus]
  ): Int!

  """
  A summary of this issue's task list.
  """
  taskListSummary: TaskListSummary @underDevelopment(since: "2018-08-27")

  """
  A list of events, comments, commits, etc. associated with the issue.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): IssueTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  Get a timeline item from a url
  """
  timelineItem(
    """
    The url to decode.
    """
    url: String
  ): IssueTimelineItems

  """
  A list of events, comments, commits, etc. associated with the issue.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of element to focus on.
    """
    focus: ID

    """
    Filter timeline items by type.
    """
    itemTypes: [IssueTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int

    """
    Only return events visible in GitHub's UI.
    """
    visibleEventsOnly: Boolean @internal
  ): IssueTimelineItemsConnection!

  """
  Identifies the issue title.
  """
  title: String!

  """
  Identifies the issue title rendered to HTML.
  """
  titleHTML: String!

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Returns a count of how many comments this issue has received.
  """
  totalCommentsCount: Int @underDevelopment(since: "2018-08-27")

  """
  A list of issues that track this issue
  """
  trackedInIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!

  """
  A list of issues tracked inside the current issue
  """
  trackedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection!

  """
  The number of tracked issues for this issue
  """
  trackedIssuesCount(
    """
    Limit the count to tracked issues with the specified states.
    """
    states: [TrackedIssueStates]
  ): Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Indicates whether the current user has been blocked by the issue or pull request's author.
  """
  viewerBlockedByAuthor: Boolean! @internal

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal

  """
  Indicates whether the current user can add a new comment.
  """
  viewerCanComment: Boolean! @underDevelopment(since: "2018-10-02")

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  The websocket channel ID for live updates.
  """
  websocket(
    """
    The channel to use.
    """
    channel: IssuePubSubTopic!
  ): String! @internal
}

"""
Ways in which to filter lists of pull requests.
"""
input IssueAndPullRequestFilters @underDevelopment(since: "2020-09-22") @serviceMapping(to: "github/issues") {
  """
  The assignee by which the list is filtered.
  """
  assignee: String

  """
  The author by which the list is filtered.
  """
  author: String

  """
  The label name by which the list is filtered.
  """
  label: String

  """
  The mentioned login by which the list is filtered.
  """
  mentions: String

  """
  The label name by which the list is filtered.
  """
  milestone: String

  """
  The name with owner of the repository to filter issues and pull requests by.
  """
  repository: [String!]

  """
  The login of the requested reviewer by whom the pull requests are filtered.
  """
  reviewRequested: String

  """
  The review state by which the pull requests are filtered.
  """
  reviewState: PullRequestReviewStateFilter

  """
  The login of the reviewer by whom the pull requests are filtered.
  """
  reviewedBy: String

  """
  The state by which the list is filtered.
  """
  state: PullRequestState

  """
  The type by which to filter the list to.
  """
  type: IssueOrPullRequestType
}

"""
Represents a comment on an Issue.
"""
type IssueComment implements AbuseReportable & Blockable & Comment & Deletable & Minimizable & Node & PerformableViaApp & Reactable & Reportable & RepositoryNode & Trigger & Updatable & UpdatableComment
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-07-16") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blocks
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Identifies the issue associated with the comment.
  """
  issue: Issue!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this issue comment
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue comment
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal

  """
  The websocket channel ID for live updates.
  """
  websocket(
    """
    The channel to use.
    """
    channel: IssuePubSubTopic!
  ): String! @internal
}

"""
The connection type for IssueComment.
"""
type IssueCommentConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [IssueCommentEdge]

  """
  A list of nodes.
  """
  nodes: [IssueComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueCommentEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueComment
}

"""
Ways in which lists of issue comments can be ordered upon return.
"""
input IssueCommentOrder @serviceMapping(to: "github/issues") {
  """
  The direction in which to order issue comments by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order issue comments by.
  """
  field: IssueCommentOrderField!
}

"""
Properties by which issue comment connections can be ordered.
"""
enum IssueCommentOrderField @serviceMapping(to: "github/issues") {
  """
  Order issue comments by update time
  """
  UPDATED_AT
}

"""
Audit log entry for a issue.comment_update event.
"""
type IssueCommentUpdateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The issue comment's new body.
  """
  body: String

  """
  The issue comment's old body.
  """
  bodyWas: String

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the issue's repository was private.
  """
  isPrivateRepository: Boolean @internal

  """
  Whether the issue comment was marked spammy.
  """
  isSpammy: Boolean @internal

  """
  The issue associated with the Audit Entry.
  """
  issue: Issue

  """
  The issue comment associated with the Audit Entry.
  """
  issueComment: IssueComment

  """
  The issue comment's database ID.
  """
  issueCommentDatabaseId: Int @internal

  """
  The issue's database ID.
  """
  issueDatabaseId: Int @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The connection type for Issue.
"""
type IssueConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [IssueEdge]

  """
  A list of nodes.
  """
  nodes: [Issue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
This aggregates issues opened by a user within one repository.
"""
type IssueContributionsByRepository @serviceMapping(to: "github/profiles") {
  """
  The issue contributions.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedIssueContributionConnection!

  """
  A list of data about issue contributions based on the issue's state.
  """
  contributionsByState: [IssueContributionsByState!]!

  """
  The repository in which the issues were opened.
  """
  repository: Repository!
}

"""
This aggregates issue contributions by state.
"""
type IssueContributionsByState @underDevelopment(since: "2018-10-02") @serviceMapping(to: "github/profiles") {
  """
  The state the issues are in.
  """
  state: IssueState!

  """
  A count of how many contributions are in this state.
  """
  totalContributions: Int!
}

"""
An edge in a connection.
"""
type IssueEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Issue
}

"""
Ways in which to filter lists of issues.
"""
input IssueFilters @serviceMapping(to: "github/issues") {
  """
  List issues assigned to given name. Pass in `null` for issues with no assigned
  user, and `*` for issues assigned to any user.
  """
  assignee: String

  """
  List issues created by given name.
  """
  createdBy: String

  """
  List issues where the list of label names exist on the issue.
  """
  labels: [String!]

  """
  List issues where the given name is mentioned in the issue.
  """
  mentioned: String

  """
  List issues by given milestone argument. If an string representation of an
  integer is passed, it should refer to a milestone by its number field. Pass in
  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
  """
  milestone: String

  """
  List issues that have been updated at or after the given date.
  """
  since: DateTime

  """
  List issues filtered by the list of states given.
  """
  states: [IssueState!]

  """
  List issues subscribed to by viewer.
  """
  viewerSubscribed: Boolean = false
}

"""
Used for return value of Repository.issueOrPullRequest.
"""
union IssueOrPullRequest @serviceMapping(to: "github/issues") = Issue | PullRequest

"""
The connection type for IssueOrPullRequest.
"""
type IssueOrPullRequestConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [IssueOrPullRequestEdge]

  """
  A list of nodes.
  """
  nodes: [IssueOrPullRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueOrPullRequestEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueOrPullRequest
}

"""
Types of objects a user can filter a list of pull requests and issues by.
"""
enum IssueOrPullRequestType @underDevelopment(since: "2020-09-22") @serviceMapping(to: "github/issues") {
  """
  Filter list to just issues.
  """
  ISSUE

  """
  Filter list to just pull requests.
  """
  PULL_REQUEST
}

"""
Ways in which lists of issues can be ordered upon return.
"""
input IssueOrder @serviceMapping(to: "github/issues") {
  """
  The direction in which to order issues by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order issues by.
  """
  field: IssueOrderField!
}

"""
Properties by which issue connections can be ordered.
"""
enum IssueOrderField @serviceMapping(to: "github/issues") {
  """
  Order issues by comment count
  """
  COMMENTS

  """
  Order issues by creation time
  """
  CREATED_AT

  """
  Order issues by update time
  """
  UPDATED_AT
}

"""
The possible PubSub channels for an issue.
"""
enum IssuePubSubTopic @serviceMapping(to: "github/issues") {
  """
  The channel ID for observing issue state updates.
  """
  STATE

  """
  The channel ID for updating items on the issue timeline.
  """
  TIMELINE

  """
  The channel ID for observing issue updates.
  """
  UPDATED
}

"""
The possible states of an issue.
"""
enum IssueState @serviceMapping(to: "github/issues") {
  """
  An issue that has been closed
  """
  CLOSED

  """
  An issue that is still open
  """
  OPEN
}

"""
A repository issue template.
"""
type IssueTemplate @serviceMapping(to: "github/issues") {
  """
  The template purpose.
  """
  about: String

  """
  The suggested issue body.
  """
  body: String

  """
  The template name.
  """
  name: String!

  """
  The suggested issue title.
  """
  title: String
}

"""
The connection type for IssueTimelineItem.
"""
type IssueTimelineConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [IssueTimelineItemEdge]

  """
  A list of nodes.
  """
  nodes: [IssueTimelineItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An item in an issue timeline
"""
union IssueTimelineItem @serviceMapping(to: "github/issues") =
    AssignedEvent
  | ClosedEvent
  | Commit
  | CrossReferencedEvent
  | DemilestonedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MilestonedEvent
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
An edge in a connection.
"""
type IssueTimelineItemEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueTimelineItem
}

"""
An item in an issue timeline
"""
union IssueTimelineItems @serviceMapping(to: "github/issues") =
    AddedToProjectEvent
  | AssignedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertedNoteToIssueEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DisconnectedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | ReferencedEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for IssueTimelineItems.
"""
type IssueTimelineItemsConnection @serviceMapping(to: "github/issues") {
  """
  Identifies the count of items after the focused item (`focus`).
  """
  afterFocusCount: Int!

  """
  Identifies the count of items before the focused item (`focus`).
  """
  beforeFocusCount: Int!

  """
  A list of edges.
  """
  edges: [IssueTimelineItemsEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [IssueTimelineItems]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the date and time when the timeline was last updated.
  """
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type IssueTimelineItemsEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueTimelineItems
}

"""
The possible item types found in a timeline.
"""
enum IssueTimelineItemsItemType {
  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT

  """
  Represents an 'assigned' event on any assignable object.
  """
  ASSIGNED_EVENT

  """
  Represents a 'closed' event on any `Closable`.
  """
  CLOSED_EVENT

  """
  Represents a 'comment_deleted' event on a given issue or pull request.
  """
  COMMENT_DELETED_EVENT

  """
  Represents a 'connected' event on a given issue or pull request.
  """
  CONNECTED_EVENT

  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT

  """
  Represents a mention made by one issue or pull request to another.
  """
  CROSS_REFERENCED_EVENT

  """
  Represents a 'demilestoned' event on a given issue or pull request.
  """
  DEMILESTONED_EVENT

  """
  Represents a 'disconnected' event on a given issue or pull request.
  """
  DISCONNECTED_EVENT

  """
  Represents a comment on an Issue.
  """
  ISSUE_COMMENT

  """
  Represents a 'labeled' event on a given issue or pull request.
  """
  LABELED_EVENT

  """
  Represents a 'locked' event on a given issue or pull request.
  """
  LOCKED_EVENT

  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT

  """
  Represents a 'mentioned' event on a given issue or pull request.
  """
  MENTIONED_EVENT

  """
  Represents a 'milestoned' event on a given issue or pull request.
  """
  MILESTONED_EVENT

  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT

  """
  Represents a 'pinned' event on a given issue or pull request.
  """
  PINNED_EVENT

  """
  Represents a 'referenced' event on a given `ReferencedSubject`.
  """
  REFERENCED_EVENT

  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT

  """
  Represents a 'renamed' event on a given issue or pull request
  """
  RENAMED_TITLE_EVENT

  """
  Represents a 'reopened' event on any `Closable`.
  """
  REOPENED_EVENT

  """
  Represents a 'subscribed' event on a given `Subscribable`.
  """
  SUBSCRIBED_EVENT

  """
  Represents a 'transferred' event on a given issue or pull request.
  """
  TRANSFERRED_EVENT

  """
  Represents an 'unassigned' event on any assignable object.
  """
  UNASSIGNED_EVENT

  """
  Represents an 'unlabeled' event on a given issue or pull request.
  """
  UNLABELED_EVENT

  """
  Represents an 'unlocked' event on a given issue or pull request.
  """
  UNLOCKED_EVENT

  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT

  """
  Represents an 'unpinned' event on a given issue or pull request.
  """
  UNPINNED_EVENT

  """
  Represents an 'unsubscribed' event on a given `Subscribable`.
  """
  UNSUBSCRIBED_EVENT

  """
  Represents a 'user_blocked' event on a given user.
  """
  USER_BLOCKED_EVENT
}

"""
A serialized JavaScript Error object.

Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
"""
input JavascriptError @internal @serviceMapping(to: "github/frontend_systems") {
  """
  The structured stack from the error event.
  """
  stacktrace: [Stackframe!]!

  """
  The error class name.
  """
  type: String!

  """
  The error message.
  """
  value: String!
}

"""
A GitHub organizational department that has open job positions.
"""
type JobDepartment @internal {
  """
  A list of open positions for this department.
  """
  positions: [JobPosition!]!

  """
  The title of the department: Engineering, Marketing, etc.
  """
  title: String!
}

"""
An open job position to work at GitHub.
"""
type JobPosition @internal {
  """
  The location of the job position.
  """
  location: String!

  """
  The title of the job position.
  """
  title: String!

  """
  The link to more information about the position.
  """
  url: URI!
}

"""
Represents a user signing up for a GitHub account.
"""
type JoinedGitHubContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Represents a user joining an organization on GitHub.
"""
type JoinedOrganizationContribution implements Contribution
  @underDevelopment(since: "2018-10-04")
  @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The organization that the user joined.
  """
  organization: Organization!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
The connection type for JoinedOrganizationContribution.
"""
type JoinedOrganizationContributionConnection
  @underDevelopment(since: "2018-11-07")
  @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [JoinedOrganizationContributionEdge]

  """
  A list of nodes.
  """
  nodes: [JoinedOrganizationContribution]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type JoinedOrganizationContributionEdge @underDevelopment(since: "2018-11-07") @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JoinedOrganizationContribution
}

"""
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
"""
type Label implements Node @serviceMapping(to: "github/issues") @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  Identifies the label color.
  """
  color: String!

  """
  Identifies the date and time when the label was created.
  """
  createdAt: DateTime

  """
  A brief description of this label.
  """
  description: String
  id: ID!

  """
  Indicates whether or not this is a default label.
  """
  isDefault: Boolean!

  """
  A list of issues associated with this label.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Identifies the label name.
  """
  name: String!

  """
  Identifies the label name, rendered to HTML.
  """
  nameHTML: String! @internal

  """
  A list of pull requests associated with this label.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for pull requests returned by the connection. Specifying
    this argument will nullify the effects of the other filtering arguments on
    this connection.
    """
    filterBy: PullRequestFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  The repository associated with this label.
  """
  repository: Repository!

  """
  The HTTP path for this label.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the label was last updated.
  """
  updatedAt: DateTime

  """
  The HTTP URL for this label.
  """
  url: URI!
}

"""
The connection type for Label.
"""
type LabelConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [LabelEdge]

  """
  A list of nodes.
  """
  nodes: [Label]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LabelEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Label
}

"""
Ways in which lists of labels can be ordered upon return.
"""
input LabelOrder @serviceMapping(to: "github/issues") {
  """
  The direction in which to order labels by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order labels by.
  """
  field: LabelOrderField!
}

"""
Properties by which label connections can be ordered.
"""
enum LabelOrderField @serviceMapping(to: "github/issues") {
  """
  Order labels by creation time
  """
  CREATED_AT

  """
  Order labels by name
  """
  NAME
}

"""
An object that can have labels assigned to it.
"""
interface Labelable @serviceMapping(to: "github/issues") {
  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection
}

"""
Represents a 'labeled' event on a given issue or pull request.
"""
type LabeledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the label associated with the 'labeled' event.
  """
  label: Label!

  """
  Identifies the `Labelable` associated with the event.
  """
  labelable: Labelable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a given language found in repositories.
"""
type Language implements Node @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  The color defined for the current language.
  """
  color: String
  id: ID!

  """
  The name of the current language.
  """
  name: String!
}

"""
Represents a programming language found in search results.
"""
type LanguageAggregate @internal @serviceMapping(to: "github/actions") {
  """
  Number of search results using this language.
  """
  count: Int!

  """
  The programming language.
  """
  language: Language!

  """
  Percent of search results using this language.
  """
  percentage: Float!
}

"""
A list of languages associated with the parent.
"""
type LanguageConnection {
  """
  A list of edges.
  """
  edges: [LanguageEdge]

  """
  A list of nodes.
  """
  nodes: [Language]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in bytes of files written in that language.
  """
  totalSize: Int!
}

"""
Represents the language of a repository.
"""
type LanguageEdge {
  cursor: String!
  node: Language!

  """
  The number of bytes of code written in the language.
  """
  size: Int!
}

"""
Ordering options for language connections.
"""
input LanguageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order languages by.
  """
  field: LanguageOrderField!
}

"""
Properties by which language connections can be ordered.
"""
enum LanguageOrderField {
  """
  Order languages by the size of all files containing the language
  """
  SIZE
}

"""
A migration tracks the import and export of a repository.
"""
type LegacyMigration implements Node
  @serviceMapping(to: "github/import_export")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  A migration import mapping conflict
  """
  conflicts: [MigrationMapConflict!]

  """
  The migration's UUID.
  """
  guid: String!
  id: ID!

  """
  Get a list of migratable resource mappings to audit a migration.
  """
  migratableResources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter migratable resources by their model name.
    """
    modelName: String

    """
    Filter migratable resources by whether or not they have a warning.
    """
    onlyWithWarning: Boolean = false

    """
    Filter migratable resources by their source URL.
    """
    sourceUrl: URI

    """
    Filter migratable resources by their state.
    """
    state: MigratableResourceState

    """
    Filter migratable resources by their target URL.
    """
    targetUrl: URI
  ): MigratableResourceConnection

  """
  The source product that the archive was created from.
  """
  sourceProduct: String!

  """
  The migration's state
  """
  state: ImportExportState

  """
  The URL where one may upload an import archive.
  """
  uploadUrl: URI!

  """
  The template URL where one may upload an import archive.
  """
  uploadUrlTemplate: String!
    @deprecated(
      reason: "`uploadUrlTemplate` is being removed because it is not a standard URL and adds an extra user step. Use `uploadUrl` instead. Removal on 2019-04-01 UTC."
    )
}

"""
The legacy team permission.
"""
enum LegacyTeamPermission @internal {
  """
  The admin legacy team permission value.
  """
  ADMIN

  """
  The pull legacy team permission value.
  """
  PULL

  """
  The push legacy team permission value.
  """
  PUSH
}

"""
A repository's open source license
"""
type License implements Node
  @serviceMapping(to: "github/community_and_safety")
  @useNextGlobalIdFormat(after: "2021-09-28") {
  """
  The full text of the license
  """
  body: String!

  """
  The conditions set by the license
  """
  conditions: [LicenseRule]!

  """
  A human-readable description of the license
  """
  description: String

  """
  Whether the license should be featured
  """
  featured: Boolean!

  """
  Whether the license should be displayed in license pickers
  """
  hidden: Boolean!
  id: ID!

  """
  Instructions on how to implement the license
  """
  implementation: String

  """
  The lowercased SPDX ID of the license
  """
  key: String!

  """
  The limitations set by the license
  """
  limitations: [LicenseRule]!

  """
  The license full name specified by <https://spdx.org/licenses>
  """
  name: String!

  """
  Customary short name if applicable (e.g, GPLv3)
  """
  nickname: String

  """
  The permissions set by the license
  """
  permissions: [LicenseRule]!

  """
  Whether the license is a pseudo-license placeholder (e.g., other, no-license)
  """
  pseudoLicense: Boolean!

  """
  Short identifier specified by <https://spdx.org/licenses>
  """
  spdxId: String

  """
  URL to the license on <https://choosealicense.com>
  """
  url: URI
}

"""
Describes a License's conditions, permissions, and limitations
"""
type LicenseRule {
  """
  A description of the rule
  """
  description: String!

  """
  The machine-readable rule key
  """
  key: String!

  """
  The human-readable rule label
  """
  label: String!
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project to link to a Repository
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the Repository to link to a Project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LinkRepositoryToProject
"""
type LinkRepositoryToProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The linked Project.
  """
  project: Project

  """
  The linked Repository.
  """
  repository: Repository
}

"""
Location information for an actor
"""
type Location @underDevelopment(since: "2018-12-06") @serviceMapping(to: "github/audit_logs") {
  """
  City
  """
  city: String

  """
  Country code
  """
  countryCode: String

  """
  Country name
  """
  countryName: String

  """
  Latitude
  """
  latitude: Float

  """
  Longitude
  """
  longitude: Float

  """
  Postal or ZIP code
  """
  postalCode: String

  """
  Region or state code
  """
  region: String

  """
  Region name
  """
  regionName: String
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A reason for why the item will be locked.
  """
  lockReason: LockReason

  """
  ID of the item to be locked.
  """
  lockableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Lockable")
}

"""
Autogenerated return type of LockLockable
"""
type LockLockablePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was locked.
  """
  lockedRecord: Lockable
}

"""
Autogenerated input type of LockMergeQueue
"""
input LockMergeQueueInput @internal @serviceMapping(to: "github/merge") {
  """
  Which branch's merge queue to add to.
  """
  branch: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository to deploy.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of LockMergeQueue
"""
type LockMergeQueuePayload @internal @serviceMapping(to: "github/merge") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  OID for the merge head of the group.
  """
  headOid: GitObjectID
}

"""
The possible reasons that an issue or pull request was locked.
"""
enum LockReason {
  """
  The issue or pull request was locked because the conversation was off-topic.
  """
  OFF_TOPIC

  """
  The issue or pull request was locked because the conversation was resolved.
  """
  RESOLVED

  """
  The issue or pull request was locked because the conversation was spam.
  """
  SPAM

  """
  The issue or pull request was locked because the conversation was too heated.
  """
  TOO_HEATED
}

"""
An object that can be locked.
"""
interface Lockable {
  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  `true` if the object is locked
  """
  locked: Boolean!
}

"""
Represents a 'locked' event on a given issue or pull request.
"""
type LockedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Reason that the conversation was locked (optional).
  """
  lockReason: LockReason

  """
  Object that was locked.
  """
  lockable: Lockable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A placeholder user for attribution of imported data on GitHub.
"""
type Mannequin implements Actor & Node & UniformResourceLocatable
  @serviceMapping(to: "github/import_export")
  @useNextGlobalIdFormat(after: "2021-09-28") {
  """
  A URL pointing to the GitHub App's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The user that has claimed the data attributed to this mannequin.
  """
  claimant: User

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The mannequin's email on the source instance.
  """
  email: String
  id: ID!

  """
  The username of the actor.
  """
  login: String!

  """
  The display name of the imported mannequin.
  """
  name: String @underDevelopment(since: "2019-04-23")

  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to this resource.
  """
  url: URI!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection @serviceMapping(to: "github/import_export") {
  """
  A list of edges.
  """
  edges: [MannequinEdge]

  """
  A list of nodes.
  """
  nodes: [Mannequin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge @serviceMapping(to: "github/import_export") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder @serviceMapping(to: "github/import_export") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order mannequins by.
  """
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField @serviceMapping(to: "github/import_export") {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT

  """
  Order mannequins alphabetically by their source login.
  """
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion comment to mark as an answer.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of MarkDiscussionCommentAsAnswer
"""
type MarkDiscussionCommentAsAnswerPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that includes the chosen comment.
  """
  discussion: Discussion
}

"""
Autogenerated input type of MarkFileAsViewed
"""
input MarkFileAsViewedInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The path of the file to mark as viewed
  """
  path: String!

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of MarkFileAsViewed
"""
type MarkFileAsViewedPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of MarkNotificationAsDone
"""
input MarkNotificationAsDoneInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationAsDone
"""
type MarkNotificationAsDonePayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of MarkNotificationAsRead
"""
input MarkNotificationAsReadInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationAsRead
"""
type MarkNotificationAsReadPayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of MarkNotificationAsUndone
"""
input MarkNotificationAsUndoneInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationAsUndone
"""
type MarkNotificationAsUndonePayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of MarkNotificationAsUnread
"""
input MarkNotificationAsUnreadInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread id.
  """
  id: ID! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationAsUnread
"""
type MarkNotificationAsUnreadPayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of MarkNotificationSubjectAsRead
"""
input MarkNotificationSubjectAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the notification subject to mark as read.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "AdvisoryCredit"
        "CheckSuite"
        "Commit"
        "Discussion"
        "Gist"
        "Issue"
        "PullRequest"
        "Release"
        "RepositoryAdvisory"
        "RepositoryDependabotAlertsThread"
        "RepositoryInvitation"
        "RepositoryVulnerabilityAlert"
        "SecurityAdvisory"
        "TeamDiscussion"
        "WorkflowRun"
      ]
      abstractType: "NotificationsSubject"
    )
}

"""
Autogenerated return type of MarkNotificationSubjectAsRead
"""
type MarkNotificationSubjectAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user that the saved notification belongs to.
  """
  viewer: User
}

"""
Autogenerated input type of MarkNotificationsAsDone
"""
input MarkNotificationsAsDoneInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs that will be marked as done.
  """
  ids: [ID!]! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationsAsDone
"""
type MarkNotificationsAsDonePayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of MarkNotificationsAsRead
"""
input MarkNotificationsAsReadInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs that will be marked as read.
  """
  ids: [ID!]! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationsAsRead
"""
type MarkNotificationsAsReadPayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of MarkNotificationsAsUndone
"""
input MarkNotificationsAsUndoneInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs to be marked as undone.
  """
  ids: [ID!]! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationsAsUndone
"""
type MarkNotificationsAsUndonePayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of MarkNotificationsAsUnread
"""
input MarkNotificationsAsUnreadInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The NotificationThread IDs that will be marked as unread.
  """
  ids: [ID!]! @possibleTypes(concreteTypes: ["NotificationThread"])
}

"""
Autogenerated return type of MarkNotificationsAsUnread
"""
type MarkNotificationsAsUnreadPayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be marked as ready for review.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of MarkPullRequestReadyForReview
"""
type MarkPullRequestReadyForReviewPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is ready for review.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of MarkRepositoryDependencyUpdateComplete
"""
input MarkRepositoryDependencyUpdateCompleteInput @internal @serviceMapping(to: "github/dependabot") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The database id of Repository Dependency Update that has completed.
  """
  databaseId: Int!

  """
  The Pull Request number to associate with the update object.
  """
  pullRequestNumber: Int!
}

"""
Autogenerated return type of MarkRepositoryDependencyUpdateComplete
"""
type MarkRepositoryDependencyUpdateCompletePayload @internal @serviceMapping(to: "github/dependabot") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-05-07")
}

"""
Autogenerated input type of MarkRepositoryDependencyUpdateErrored
"""
input MarkRepositoryDependencyUpdateErroredInput @internal @serviceMapping(to: "github/dependabot") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The database id of Repository Dependency Update that has errored.
  """
  databaseId: Int!

  """
  A description of the error(s). Markdown supported.
  """
  errorBody: String!

  """
  A title summarizing the error. Emoji supported.
  """
  errorTitle: String!

  """
  The Dependabot update error type.
  """
  errorType: String
}

"""
Autogenerated return type of MarkRepositoryDependencyUpdateErrored
"""
type MarkRepositoryDependencyUpdateErroredPayload @internal @serviceMapping(to: "github/dependabot") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-05-07")
}

"""
Represents a markdown file.
"""
type MarkdownFileType implements TextFile @serviceMapping(to: "github/repo_info") {
  """
  The syntax highlighted html for the markdown.
  """
  contentHTML: HTML

  """
  The raw content of the markdown.
  """
  contentRaw: String

  """
  The lines for this file.
  """
  fileLines: [FileLine]
}

"""
Represents a 'marked_as_duplicate' event on a given issue or pull request.
"""
type MarkedAsDuplicateEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: IssueOrPullRequest

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: IssueOrPullRequest
  id: ID!

  """
  Canonical and duplicate belong to different repositories.
  """
  isCrossRepository: Boolean!

  """
  The HTTP path to revert this duplicate mark event.
  """
  unmarkAsDuplicateResourcePath: URI! @internal

  """
  The HTTP URL to revert this duplicate mark event.
  """
  unmarkAsDuplicateUrl: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Check if the viewer can mark this issue or pull request as not a duplicate.
  """
  viewerCanUndo: Boolean! @internal
}

"""
A legal agreement for the GitHub Marketplace.
"""
type MarketplaceAgreement implements Node @internal @serviceMapping(to: "github/marketplace") {
  """
  The text of the agreement rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  The name of this agreement.
  """
  name: String!

  """
  Who is the intended audience for this agreement?
  """
  signatoryType: String!

  """
  Returns the most recent signature for the current user for this agreement.
  """
  signature(
    """
    ID of the organization on whose behalf the agreement was signed.
    """
    organizationID: ID
  ): MarketplaceAgreementSignature

  """
  The version of this agreement.
  """
  version: String!
}

"""
The connection type for MarketplaceAgreement.
"""
type MarketplaceAgreementConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceAgreementEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceAgreement]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceAgreementEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceAgreement
}

"""
Who is the intended audience for a Marketplace legal agreement?
"""
enum MarketplaceAgreementSignatoryType @internal @serviceMapping(to: "github/marketplace") {
  """
  The agreement is intended for GitHub users who would like to install a product listed in the Marketplace.
  """
  END_USER

  """
  The agreement is intended for those listing their product in the Marketplace.
  """
  INTEGRATOR
}

"""
A signature for the Marketplace Agreement by a particular user.
"""
type MarketplaceAgreementSignature @internal @serviceMapping(to: "github/marketplace") {
  """
  Returns the agreement that was signed.
  """
  agreement: MarketplaceAgreement!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The organization this signature was signed on behalf of.
  """
  organization: Organization

  """
  The user who made this signature.
  """
  signatory: User
}

"""
A public description of a Marketplace category.
"""
type MarketplaceCategory implements Node
  @serviceMapping(to: "github/marketplace")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  The repository actions that belong to this category
  """
  actions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryActionConnection @internal

  """
  The (app) listings that belong to this category
  """
  apps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketplaceListingConnection @internal

  """
  The category's description.
  """
  description: String

  """
  The category's description rendered to HTML.
  """
  descriptionHTML: HTML! @underDevelopment(since: "2019-01-31")

  """
  The featured repository actions that belong to this category
  """
  featuredActions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryActionConnection @internal

  """
  The position of the category on the Marketplace homepage.
  """
  featuredPosition: Int @internal

  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String
  id: ID!

  """
  Whether the category is featured in the Marketplace homepage.
  """
  isFeatured: Boolean! @internal

  """
  Whether the category is a filter-type.
  """
  isFilter: Boolean! @internal

  """
  Whether the category is to be used in Marketplace navigation menus.
  """
  isNavigationVisible: Boolean! @internal

  """
  The category's name.
  """
  name: String!

  """
  The category's parent category.
  """
  parentCategory: MarketplaceCategory @underDevelopment(since: "2018-10-02")

  """
  How many Marketplace listings have this as their primary category.
  """
  primaryListingCount: Int!

  """
  The HTTP path for this Marketplace category.
  """
  resourcePath: URI!

  """
  How many Marketplace listings have this as their secondary category.
  """
  secondaryListingCount: Int!

  """
  The short name of the category used in its URL.
  """
  slug: String!

  """
  A list of the category's sub categories.
  """
  subCategories(
    """
    Whether or not these categories will be used for Marketplace navigation menus.
    """
    forNavigation: Boolean = false

    """
    The number of categories to include.
    """
    limit: Int = 3
  ): [MarketplaceCategory!]! @underDevelopment(since: "2018-10-02")

  """
  The HTTP URL for this Marketplace category.
  """
  url: URI!
}

"""
An object that can be listed in the GitHub Marketplace.
"""
interface MarketplaceIntegratable @internal @serviceMapping(to: "github/marketplace") {
  """
  The hex color code for the background color this object's icon should be displayed on.
  """
  preferredBackgroundColor: String! @internal
}

"""
A listing in the GitHub integration marketplace.
"""
type MarketplaceListing implements Node
  @serviceMapping(to: "github/marketplace")
  @useNextGlobalIdFormat(after: "2021-07-14") {
  """
  Listing information only visible to site administrators.
  """
  adminInfo: MarketplaceListingAdminInfo

  """
  The GitHub App this listing represents.
  """
  app: App

  """
  Whether paid plans are permitted given the listing's verification status.
  """
  arePublishedPaidPlansAllowed: Boolean @internal

  """
  Financial onboarding initiation requirements are met or not
  """
  canInitiateFinancialOnboarding: Boolean @internal

  """
  Whether listing can move to verified or not.
  """
  canMoveToVerified: Boolean! @internal

  """
  Whether listing can move to verified creator or not.
  """
  canMoveToVerifiedCreator: Boolean! @internal

  """
  Whether draft app with published paid plans can request for app publishing
  """
  canPublishWithPaidPlans: Boolean! @internal

  """
  A collection of categories that describe this listing.
  """
  categories: [MarketplaceCategory!]! @underDevelopment(since: "2018-10-01")

  """
  URL to the listing owner's company site.
  """
  companyUrl: URI

  """
  The HTTP path for configuring access to the listing's integration or OAuth app
  """
  configurationResourcePath: URI!

  """
  The HTTP URL for configuring access to the listing's integration or OAuth app
  """
  configurationUrl: URI!

  """
  Whether this listing has the contact info needed for the integrator to request it be published to the Marketplace.
  """
  contactInfoIsCompleted: Boolean! @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The default plan for this listing.
  """
  defaultPlan: MarketplaceListingPlan @internal

  """
  URL to the listing's documentation.
  """
  documentationUrl: URI

  """
  The listing's detailed description.
  """
  extendedDescription: String

  """
  The listing's detailed description rendered to HTML.
  """
  extendedDescriptionHTML: HTML!

  """
  Identifies the date and time when the listing is featured on the Marketplace homepage.
  """
  featuredAt: DateTime @internal

  """
  A list of the featured organizations for this Marketplace listing.
  """
  featuredOrganizations(
    """
    Returns approved featured organizations only.
    """
    approvedOnly: Boolean = true @internal
  ): [MarketplaceListingFeaturedOrganization!] @internal

  """
  Email address for the listing's finance contact.
  """
  financeEmail: String @internal

  """
  The listing's introductory description.
  """
  fullDescription: String!

  """
  The listing's introductory description rendered to HTML.
  """
  fullDescriptionHTML: HTML!

  """
  Whether this listing can create direct billing plans.
  """
  hasDirectBilling: Boolean! @internal

  """
  Whether installation requirements met for publishing the paid plan
  """
  hasInstallationRequirementsMet: Boolean! @internal

  """
  Whether or not this listing has published any free plans
  """
  hasPublishedFreePlans: Boolean! @internal

  """
  Does this listing have any plans with a free trial?
  """
  hasPublishedFreeTrialPlans: Boolean!

  """
  Whether or not this listing has published any paid plans
  """
  hasPublishedPaidPlans: Boolean! @internal

  """
  Whether this listing has reached the maximum allowed number of published plans.
  """
  hasReachedMaximumPlanCount: Boolean @internal

  """
  Does this listing have a terms of service link?
  """
  hasTermsOfService: Boolean!

  """
  Whether the creator of the app is a verified org
  """
  hasVerifiedOwner: Boolean!

  """
  The primary key of the listing's hero card background image.
  """
  heroCardBackgroundImageDatabaseID: Int @internal

  """
  URL for the listing's hero card background image.
  """
  heroCardBackgroundUrl: URI @internal

  """
  A technical description of how this app works with GitHub.
  """
  howItWorks: String

  """
  The listing's technical description rendered to HTML.
  """
  howItWorksHTML: HTML!
  id: ID!

  """
  Sales metrics for this Marketplace listing over a specified time period.
  """
  insights(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return metrics up until this date. Defaults to most recent day we have all
    metrics available for (two days behind the current date).
    """
    endDate: Date

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The time period to include.
    """
    period: MarketplaceListingInsightPeriod!
  ): MarketplaceListingInsightConnection

  """
  The number of times this integration has been installed since :since
  """
  installationCount(
    """
    Only count installations created after this ISO8601 time
    """
    since: DateTime
  ): Int! @internal

  """
  URL to install the product to the viewer's account or organization.
  """
  installationUrl: URI

  """
  Whether this listing has an installation URL or doesn't require one
  """
  installationUrlRequirementIsMet: Boolean @internal

  """
  Whether this listing's app has been installed for the current viewer
  """
  installedForViewer: Boolean!

  """
  Whether this listing's app is an Integration
  """
  integratableIsIntegration: Boolean! @internal

  """
  Whether this listing's app is an OauthApplication
  """
  integratableIsOauthApplication: Boolean! @internal

  """
  The type of integration this listing represents
  """
  integrationType: IntegrationType!

  """
  The viewer's signed agreement as an integrator, for this listing.
  """
  integratorAgreementSignature: MarketplaceAgreementSignature

  """
  Whether this listing has been removed from the Marketplace.
  """
  isArchived: Boolean!

  """
  Whether this listing is owned by GitHub
  """
  isByGithub: Boolean! @internal

  """
  Whether this listing is still an editable draft that has not been submitted
  for review and is not publicly visible in the Marketplace.
  """
  isDraft: Boolean!

  """
  Whether the listing can be featured on the homepage.
  """
  isFeaturable: Boolean! @internal

  """
  Whether the listing is featured on the Marketplace homepage.
  """
  isFeatured: Boolean! @internal

  """
  Whether light text is used when the logo is displayed.
  """
  isLightText: Boolean! @internal

  """
  Whether the publisher verification is pending
  """
  isOwnerVerificationPending: Boolean! @internal

  """
  Whether the product this listing represents is available as part of a paid plan.
  """
  isPaid: Boolean!

  """
  Whether this listing has been submitted for review as verified or unverified in the Marketplace.
  """
  isPendingApproval: Boolean! @internal

  """
  Whether this listing has been approved for display in the Marketplace.
  """
  isPublic: Boolean!

  """
  Whether listing is in pending state of publishing
  """
  isPublishPending: Boolean! @internal

  """
  Whether this listing has all the attributes needed for the integrator to request it be published to the Marketplace.
  """
  isReadyForSubmission: Boolean! @internal

  """
  Whether this listing is recommended or not
  """
  isRecommended: Boolean! @internal

  """
  Whether this listing has been rejected by GitHub for display in the Marketplace.
  """
  isRejected: Boolean!

  """
  Whether this listing is trending or not
  """
  isTrending: Boolean! @internal

  """
  Whether this listing has been approved for unverified display in the Marketplace.
  """
  isUnverified: Boolean!

  """
  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
  """
  isUnverifiedPending: Boolean!

  """
  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromDraft: Boolean!

  """
  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromUnverified: Boolean!

  """
  Whether this listing has been approved for verified display in the Marketplace.
  """
  isVerified: Boolean!

  """
  Whether publisher verification exception is required for verified and verified creator apps
  """
  isVerifiedAppExceptionRequired: Boolean! @internal

  """
  Whether the creator of the app is verified or not
  """
  isVerifiedCreator: Boolean! @internal

  """
  Whether listing is in verified or verified creator state
  """
  isVerifiedListing: Boolean! @internal

  """
  A list of software languages supported by this listing.
  """
  languages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LanguageConnection @internal

  """
  Whether this listing has all the description attributes needed for the
  integrator to request it be published to the Marketplace.
  """
  listingDescriptionIsCompleted: Boolean! @internal

  """
  Whether this listing has the descriptions needed for the integrator to request it be published to the Marketplace.
  """
  listingDetailsAreCompleted: Boolean! @internal

  """
  Whether this listing has the logo and feature card needed for the integrator
  to request it be published to the Marketplace.
  """
  logoAndFeatureCardAreCompleted: Boolean! @internal

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String!

  """
  URL for the listing's logo image.
  """
  logoUrl(
    """
    The size in pixels of the resulting square image.
    """
    size: Int = 400
  ): URI

  """
  Email address for the listing's marketing contact.
  """
  marketingEmail: String @internal

  """
  The listing's full name.
  """
  name: String!

  """
  Whether this listing has the naming and links needed for the integrator to request it be published to the Marketplace.
  """
  namingAndLinksAreCompleted: Boolean! @internal

  """
  Whether new process is to be followed for this listing owner
  """
  newPublisherProcess: Boolean! @internal

  """
  The listing's very short description without a trailing period or ampersands.
  """
  normalizedShortDescription: String!

  """
  The primary key of the listing's OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The User or Organization owner of the OAuth application or integration behind this Marketplace listing.
  """
  owner: MarketplaceListingOwner

  """
  A list of the payment plans for this Marketplace listing.
  """
  plans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Filter out retired plans.
    """
    published: Boolean

    """
    Filter out published plans.
    """
    retired: Boolean @internal
  ): MarketplaceListingPlanConnection

  """
  Whether this listing has the plans needed for the integrator to request it be published to the Marketplace.
  """
  plansAndPricingAreCompleted: Boolean! @internal

  """
  The previous state of a listing that is awaiting approval.
  """
  previousState: MarketplaceListingState @internal

  """
  URL to the listing's detailed pricing.
  """
  pricingUrl: URI

  """
  The category that best describes the listing.
  """
  primaryCategory: MarketplaceCategory!

  """
  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
  """
  privacyPolicyUrl: URI!

  """
  Whether this listing has the screenshots needed for the integrator to request it be published to the Marketplace.
  """
  productScreenshotsAreCompleted: Boolean! @internal

  """
  How many more payment plans can be added to this listing.
  """
  remainingPlanCount: Int! @internal

  """
  How many more screenshots can be uploaded to this listing.
  """
  remainingScreenshotCount: Int! @internal

  """
  Number of required installations to be able to request verification
  """
  requiredInstallationsForVerification: Int! @internal

  """
  The HTTP path for the Marketplace listing.
  """
  resourcePath: URI!

  """
  The URLs for the listing's screenshots.
  """
  screenshotUrls: [String]!

  """
  A list of the screenshots for this Marketplace listing.
  """
  screenshots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketplaceListingScreenshotConnection

  """
  Whether search results enhancement feature is enabled
  """
  searchEnhancementEnabled: Boolean! @internal

  """
  An alternate category that describes the listing.
  """
  secondaryCategory: MarketplaceCategory

  """
  Email address for the listing's security contact.
  """
  securityEmail: String @internal

  """
  The listing's very short description.
  """
  shortDescription: String!

  """
  Whether paid plans checks need to be verified to allow submitting draft app for review
  """
  showPaidPlanChecksOnDraftListing: Boolean! @internal

  """
  Whether to show recommended label or app install count on search restults
  """
  showSocialProof: Boolean! @internal

  """
  The short name of the listing used in its URL.
  """
  slug: String!

  """
  The current status of the Marketplace Listing
  """
  status: String! @internal

  """
  URL to the listing's status page.
  """
  statusUrl: URI

  """
  A list of the subscription items associated with this listing.
  """
  subscriptionItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Return only subscription items that haven't installed this listing's app.
    """
    notInstalledOnly: Boolean = false
  ): SubscriptionItemConnection! @internal

  """
  An email address for support for this listing's app.
  """
  supportEmail: String

  """
  Either a URL or an email address for support for this listing's app, may
  return an empty string for listings that do not require a support URL.
  """
  supportUrl: URI!

  """
  Email address for the listing's technical contact.
  """
  technicalEmail: String @internal

  """
  URL to the listing's terms of service.
  """
  termsOfServiceUrl: URI

  """
  The HTTP URL for the Marketplace listing.
  """
  url: URI!

  """
  Returns this listing's plan for which the current user has an active subscription.
  """
  viewerActivePlan: MarketplaceListingPlan

  """
  Returns the organizations for which the current user is an administrator that have a
  subscription to this Marketplace listing.
  """
  viewerBilledOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection @internal

  """
  Can the current viewer add plans for this Marketplace listing.
  """
  viewerCanAddPlans: Boolean!

  """
  Can the current viewer approve this Marketplace listing.
  """
  viewerCanApprove: Boolean!

  """
  Can the current viewer delist this Marketplace listing.
  """
  viewerCanDelist: Boolean!

  """
  Can the current viewer edit this Marketplace listing.
  """
  viewerCanEdit: Boolean!

  """
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  """
  viewerCanEditCategories: Boolean!

  """
  Can the current viewer edit the plans for this Marketplace listing.
  """
  viewerCanEditPlans: Boolean!

  """
  Can the current viewer read this Marketplace listings insights.
  """
  viewerCanReadInsights: Boolean! @internal

  """
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  """
  viewerCanRedraft: Boolean!

  """
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  """
  viewerCanReject: Boolean!

  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace as verified.
  """
  viewerCanRequestApproval: Boolean!

  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace as unverified.
  """
  viewerCanRequestUnverifiedApproval: Boolean! @underDevelopment(since: "2019-03-11")

  """
  Can the current viewer sign the GitHub Marketplace Terms of Service for
  installing/purchasing this listing's app.
  """
  viewerCanSignEndUserAgreement(
    """
    The ID of a particular end-user agreement.
    """
    agreementID: ID
  ): Boolean! @internal

  """
  Can the current viewer sign the GitHub Marketplace Developer Agreement for publishing
  this listing in the GitHub Marketplace.
  """
  viewerCanSignIntegratorAgreement(
    """
    The ID of a particular integrator agreement.
    """
    agreementID: ID
  ): Boolean! @internal

  """
  Indicates whether the current user has an active subscription to this Marketplace listing.
  """
  viewerHasPurchased: Boolean!

  """
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  """
  viewerHasPurchasedForAllOrganizations: Boolean!

  """
  Has the current viewer signed the latest version of the GitHub Marketplace Terms of
  Service.
  """
  viewerHasSignedLatestEndUserAgreement: Boolean! @internal

  """
  Has the the latest version of the GitHub Marketplace Developer Agreement been signed
  by the necessary user or organization for this listing.
  """
  viewerHasSignedLatestIntegratorAgreement: Boolean! @internal

  """
  Does the current viewer role allow them to administer this Marketplace listing.
  """
  viewerIsListingAdmin: Boolean!

  """
  Subscription items for this listing for organizations of which the current user
  is an administrator.
  """
  viewerOrganizationSubscriptionItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionItemConnection

  """
  Whether this listing has the webhook needed for the integrator to request it be published to the Marketplace.
  """
  webhookIsCompleted: Boolean! @internal
}

"""
Marketplace listing information only visible to site administrators.
"""
type MarketplaceListingAdminInfo @internal @serviceMapping(to: "github/marketplace") {
  """
  The OAuth application this listing represents.
  """
  oauthApplication: OauthApplication

  """
  The listing's current state.
  """
  state: String!

  """
  The background color used for state labels.
  """
  stateColor: String!

  """
  The name of the octicon used for state labels.
  """
  stateOcticon: String!
}

"""
Look up Marketplace Listings
"""
type MarketplaceListingConnection @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceListingEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceListing]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingEdge @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceListing
}

"""
A featured customer of this Marketplace Listing.
"""
type MarketplaceListingFeaturedOrganization @internal @serviceMapping(to: "github/marketplace") {
  """
  Whether or not this featured organization is approved to be displayed on the listing
  """
  approved: Boolean! @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The Marketplace Listing the organization is featured on.
  """
  listing: MarketplaceListing!

  """
  The featured organization.
  """
  organization: Organization!
}

"""
Sales metrics for a Marketplace listing during a specified period.
"""
type MarketplaceListingInsight @internal @serviceMapping(to: "github/marketplace") {
  """
  The number of subscriptions cancelled
  """
  cancellations: Int!

  """
  The number of seats in cancelled subscriptions
  """
  cancelledSeats: Int!

  """
  The number of unique visitors to the listing's checkout pages
  """
  checkoutUniques: Int!

  """
  The number of seats in downgraded subscriptions
  """
  downgradedSeats: Int!

  """
  The number of subscriptions downgraded to a lower value plan
  """
  downgrades: Int!

  """
  The number of free trials that ended without a subscription to a paid plan
  """
  freeTrialCancellations: Int!

  """
  The number of free trials that ended with a subscription to a paid plan
  """
  freeTrialConversions: Int!

  """
  The number of times a user installed this listing's application by granting permissions
  """
  installs: Int!

  """
  The number of unique visitors to the listing's landing page
  """
  landingUniques: Int!

  """
  The amount in cents of monthly recurring revenue added in new purchases and upgrades
  """
  mrrGained: Int!

  """
  The amount in cents of monthly recurring revenue lost in cancellations and downgrades
  """
  mrrLost: Int!

  """
  The amount in cents of monthly recurring revenue from ongoing subscriptions
  """
  mrrRecurring: Int!

  """
  The number of new subscriptions to free plans
  """
  newFreeSubscriptions: Int!

  """
  The number of new subscriptions to paid plans with free trials
  """
  newFreeTrialSubscriptions: Int!

  """
  The number of new subscriptions to paid plans
  """
  newPaidSubscriptions: Int!

  """
  The number of new subscriptions purchased
  """
  newPurchases: Int!

  """
  The number of seats in new subscriptions
  """
  newSeats: Int!

  """
  The number of page views in the current period
  """
  pageViews: Int!

  """
  The date on which insight recording started
  """
  recordedOn: Date!

  """
  The number of seats in upgraded subscriptions
  """
  upgradedSeats: Int!

  """
  The number of subscriptions upgraded to a higher value plan
  """
  upgrades: Int!

  """
  The number of unique visitors
  """
  visitors: Int!
}

"""
The connection type for MarketplaceListingInsight.
"""
type MarketplaceListingInsightConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceListingInsightEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceListingInsight]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingInsightEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceListingInsight
}

"""
The possible time periods for which Marketplace listing insights can be requested.
"""
enum MarketplaceListingInsightPeriod @internal @serviceMapping(to: "github/marketplace") {
  """
  Since the listing was approved
  """
  ALLTIME

  """
  The previous calendar day
  """
  DAY

  """
  The previous thirty days
  """
  MONTH

  """
  The previous seven days
  """
  WEEK
}

"""
Ordering options for Marketplace listings.
"""
input MarketplaceListingOrder @internal @serviceMapping(to: "github/marketplace") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order listings by.
  """
  field: MarketplaceListingOrderField!
}

"""
Properties by which listing connections can be ordered.
"""
enum MarketplaceListingOrderField @internal @serviceMapping(to: "github/marketplace") {
  """
  Order listings by id
  """
  ID

  """
  Order listings by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a MarketplaceListing.
"""
interface MarketplaceListingOwner @internal @serviceMapping(to: "github/marketplace") {
  """
  Returns the listing plan for which this owner has an active subscription, for the
  specified Marketplace listing.
  """
  activeListingPlan(
    """
    The short name of the listing used in its URL.
    """
    listingSlug: String!
  ): MarketplaceListingPlan

  """
  A URL pointing to the owner's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The username used to login.
  """
  login: String!

  """
  The owner's public profile name.
  """
  name: String

  """
  Verified domains available to this organization.
  """
  verifiedDomainsList: [String!]!
}

"""
A payment plan for a listing in the GitHub Marketplace.
"""
type MarketplaceListingPlan implements Node
  @internal
  @serviceMapping(to: "github/marketplace")
  @useNextGlobalIdFormat(after: "2021-03-18") {
  """
  Can prices be set for this plan?
  """
  arePricesAllowed: Boolean! @internal

  """
  A list of bullet points describing this plan.
  """
  bullets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketplaceListingPlanBulletConnection!

  """
  Can plan can be installed?
  """
  canBeInstalled: Boolean!

  """
  Can this be retired?
  """
  canBeRetired: Boolean!

  """
  Can the name on this plan be changed?
  """
  canChangeName: Boolean!

  """
  Can pricing on this be changed?
  """
  canChangePricing: Boolean!

  """
  Can this be published?
  """
  canPublish: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A description.
  """
  description: String!

  """
  The description rendered to HTML
  """
  descriptionHTML: HTML!

  """
  Is this plan for organization accounts only?
  """
  forOrganizationsOnly: Boolean!

  """
  Is this plan for personal user accounts only?
  """
  forUsersOnly: Boolean!

  """
  Does this plan have a free trial
  """
  hasFreeTrial: Boolean!
  id: ID!

  """
  Is this a direct billing plan?
  """
  isDirectBilling: Boolean! @internal

  """
  Can a free trial be set for this plan?
  """
  isFreeTrialAllowed: Boolean! @internal

  """
  Is this a paid plan or free?
  """
  isPaid: Boolean!

  """
  Is this plan charged per unit?
  """
  isPerUnit: Boolean!

  """
  Can a unit be set for this plan?
  """
  isUnitAllowed: Boolean! @internal

  """
  The listing that this plan belongs to.
  """
  listing: MarketplaceListing

  """
  How much this costs per month in cents.
  """
  monthlyPriceInCents: Int!

  """
  How much this costs per month in dollars.
  """
  monthlyPriceInDollars: Int!

  """
  The name.
  """
  name: String!

  """
  The plan's number.
  """
  number: Int!

  """
  The pricing model for this plan
  """
  priceModel: MarketplaceListingPlanPriceModel!

  """
  How many more bullet points can be added to this plan.
  """
  remainingBulletCount: Int!

  """
  The current state of the listing plan
  """
  state: MarketplaceListingPlanState!

  """
  A list of the subscription items associated with this plan.
  """
  subscriptionItems(
    """
    Filter the subscription items for a given account
    """
    accountId: ID

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for the returned subscription items.
    """
    orderBy: SubscriptionItemOrder
  ): SubscriptionItemConnection @internal

  """
  The name of the unit if this plan is per-unit.
  """
  unitName: String

  """
  How much this costs annually in cents.
  """
  yearlyPriceInCents: Int!

  """
  How much this costs annually in dollars.
  """
  yearlyPriceInDollars: Int!
}

"""
A bullet point describing a payment plan for a listing in the GitHub Marketplace.
"""
type MarketplaceListingPlanBullet implements Node @internal @serviceMapping(to: "github/marketplace") {
  id: ID!

  """
  The contents of the bullet point.
  """
  value: String!
}

"""
The connection type for MarketplaceListingPlanBullet.
"""
type MarketplaceListingPlanBulletConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceListingPlanBulletEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceListingPlanBullet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingPlanBulletEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceListingPlanBullet
}

"""
A list of the payment plans for this Marketplace listing.
"""
type MarketplaceListingPlanConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceListingPlanEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceListingPlan]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingPlanEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceListingPlan
}

"""
The possible pricing models for a Marketplace listing plan.
"""
enum MarketplaceListingPlanPriceModel @internal @serviceMapping(to: "github/marketplace") {
  """
  Billing is handled by the integrator's billing system.
  """
  DIRECT_BILLING

  """
  There is a flat monthly or annual fee to use the product.
  """
  FLAT_RATE

  """
  There is no charge to use the product.
  """
  FREE

  """
  There is a monthly or annual fee charged per unit (eg. per user).
  """
  PER_UNIT
}

"""
The possible states of a Marketplace listing plan.
"""
enum MarketplaceListingPlanState @internal @serviceMapping(to: "github/marketplace") {
  """
  The owner is preparing the plan.
  """
  DRAFT

  """
  The owner has published the plan.
  """
  PUBLISHED

  """
  The owner has retired the plan.
  """
  RETIRED
}

"""
The possible types of accounts that could be allowed to subscribe to a Marketplace listing plan.
"""
enum MarketplaceListingPlanSubscriberAccountTypes @internal @serviceMapping(to: "github/marketplace") {
  """
  Only organization accounts can subscribe to the plan.
  """
  ORGANIZATIONS_ONLY

  """
  Personal and organization accounts can subscribe to the plan.
  """
  USERS_AND_ORGANIZATIONS

  """
  Only personal accounts can subscribe to the plan.
  """
  USERS_ONLY
}

"""
A screenshot for a listing in the GitHub Marketplace.
"""
type MarketplaceListingScreenshot implements Node @internal @serviceMapping(to: "github/marketplace") {
  """
  An alternative description of the screenshot that may be used if the image cannot be viewed.
  """
  altText: String!

  """
  A description of the image.
  """
  caption: String

  """
  The content type of the image.
  """
  contentType: String!
  id: ID!

  """
  The URL to the image.
  """
  url: URI!
}

"""
The connection type for MarketplaceListingScreenshot.
"""
type MarketplaceListingScreenshotConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceListingScreenshotEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceListingScreenshot]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingScreenshotEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceListingScreenshot
}

"""
The possible states of a Marketplace listing.
"""
enum MarketplaceListingState @internal @serviceMapping(to: "github/marketplace") {
  """
  The listing has been removed from the GitHub Marketplace.
  """
  ARCHIVED

  """
  The owner is preparing the listing.
  """
  DRAFT

  """
  The listing has been rejected for display in the GitHub Marketplace.
  """
  REJECTED

  """
  The listing has been approved as unverified for display in the GitHub Marketplace.
  """
  UNVERIFIED

  """
  The owner has requested that the listing be approved as unverified.
  """
  UNVERIFIED_PENDING

  """
  The owner has requested that a draft listing be approved as verified.
  """
  VERIFICATION_PENDING_FROM_DRAFT

  """
  The owner has requested that an unverified listing be approved as verified.
  """
  VERIFICATION_PENDING_FROM_UNVERIFIED

  """
  The listing has been approved as verified for display in the GitHub Marketplace.
  """
  VERIFIED

  """
  The listing has been approved as a verified creator
  """
  VERIFIED_CREATOR
}

"""
Saved data from a Marketplace order preview for a given user/listing.
"""
type MarketplaceOrderPreview implements Node @internal @serviceMapping(to: "github/marketplace") {
  """
  The target account selected in the order preview.
  """
  account: Account!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The listing that this order preview belongs to.
  """
  listing: MarketplaceListing!

  """
  The listing plan selected in the order preview.
  """
  listingPlan: MarketplaceListingPlan

  """
  The quantity selected in the order preview.
  """
  quantity: Int!

  """
  The user who previewed the Marketplace order.
  """
  user: User!
}

"""
The connection type for MarketplaceOrderPreview.
"""
type MarketplaceOrderPreviewConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceOrderPreviewEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceOrderPreview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceOrderPreviewEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceOrderPreview
}

"""
Represents available types of result you can get back from a Marketplace search.
"""
enum MarketplaceSearchType @internal @serviceMapping(to: "github/marketplace") {
  """
  GitHub Marketplace listings
  """
  MARKETPLACE

  """
  GitHub Marketplace actions
  """
  MARKETPLACE_ACTIONS

  """
  GitHub Marketplace listings and actions
  """
  MARKETPLACE_TOOLS
}

"""
A Marketplace-related story, such as a blog post.
"""
type MarketplaceStory implements Node @internal @serviceMapping(to: "github/marketplace") {
  """
  The author of the story
  """
  author: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  A brief description of the story
  """
  description: String!

  """
  Whether or not the story should show up on the Marketplace homepage
  """
  featured: Boolean!
  id: ID!

  """
  When the story was published
  """
  publishedAt: DateTime!

  """
  The title of the story
  """
  title: String!

  """
  URL to the content
  """
  url: URI!
}

"""
The connection type for MarketplaceStory.
"""
type MarketplaceStoryConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [MarketplaceStoryEdge]

  """
  A list of nodes.
  """
  nodes: [MarketplaceStory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceStoryEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MarketplaceStory
}

"""
Ordering options for Marketplace story connections.
"""
input MarketplaceStoryOrder @internal @serviceMapping(to: "github/marketplace") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order stories by.
  """
  field: MarketplaceStoryOrderField!
}

"""
Properties by which story connections can be ordered.
"""
enum MarketplaceStoryOrderField @internal @serviceMapping(to: "github/marketplace") {
  """
  Order stories by creation time
  """
  CREATED_AT

  """
  Order stories by publish time
  """
  PUBLISHED_AT

  """
  Order stories by update time
  """
  UPDATED_AT
}

"""
The possible verifications state of a Marketplace listing.
"""
enum MarketplaceVerificationState @internal @serviceMapping(to: "github/marketplace") {
  """
  The listing has been approved as unverified for display in the GitHub Marketplace.
  """
  UNVERIFIED

  """
  The listing has been approved as verified for display in the GitHub Marketplace.
  """
  VERIFIED

  """
  The listing has been approved as a verified creator
  """
  VERIFIED_CREATOR
}

"""
Entities that may be internal (secret).
"""
interface MayBeInternal @internal @serviceMapping(to: "github/advisory_database") {
  """
  Check if this comment is internal.
  """
  isInternal: Boolean! @internal
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable @serviceMapping(to: "github/profiles") {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for user statuses returned from the connection.
    """
    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): UserStatusConnection!
}

"""
Audit log entry for a members_can_delete_repos.clear event.
"""
type MembersCanDeleteReposClearAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a members_can_delete_repos.disable event.
"""
type MembersCanDeleteReposDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a members_can_delete_repos.enable event.
"""
type MembersCanDeleteReposEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An item that is mentionable on an issue/pull request
"""
union MentionableItem @serviceMapping(to: "github/issues") = Team | User

"""
The connection type for MentionableItem.
"""
type MentionableItemConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [MentionableItemEdge]

  """
  A list of nodes.
  """
  nodes: [MentionableItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MentionableItemEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MentionableItem
}

"""
Represents a 'mentioned' event on a given issue or pull request.
"""
type MentionedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of MergeBranch
"""
input MergeBranchInput @serviceMapping(to: "github/repo_info") {
  """
  The email address to associate with this commit.
  """
  authorEmail: String

  """
  The name of the base branch that the provided head will be merged into.
  """
  base: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Message to use for the merge commit. If omitted, a default will be used.
  """
  commitMessage: String

  """
  The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
  """
  head: String!

  """
  The Node ID of the Repository containing the base branch that will be modified.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of MergeBranch
"""
type MergeBranchPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The resulting merge Commit.
  """
  mergeCommit: Commit
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput @serviceMapping(to: "github/merge") {
  """
  The email address to associate with this merge.
  """
  authorEmail: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit body to use for the merge commit; if omitted, a default message will be used
  """
  commitBody: String

  """
  Commit headline to use for the merge commit; if omitted, a default message will be used.
  """
  commitHeadline: String

  """
  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
  """
  expectedHeadOid: GitObjectID

  """
  The merge method to use. If omitted, defaults to 'MERGE'
  """
  mergeMethod: PullRequestMergeMethod = MERGE

  """
  ID of the pull request to be merged.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of MergePullRequest
"""
type MergePullRequestPayload @serviceMapping(to: "github/merge") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-10-02")

  """
  The pull request that was merged.
  """
  pullRequest: PullRequest
}

"""
The (internal for now) queue of entries to be merged for this repository
"""
type MergeQueue implements Node @internal @serviceMapping(to: "github/merge") {
  """
  The entries in the queue
  """
  entries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection @internal

  """
  OID for the merge head of the locked group.
  """
  headOid: GitObjectID
  id: ID!

  """
  The entries in the queue which are about to be merged
  """
  mergingEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection @internal

  """
  The entries in the queue which are about to be removed
  """
  pendingRemovalEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeQueueEntryConnection @internal

  """
  The repository this merge queue belongs to
  """
  repository: Repository

  """
  The HTTP path for this merge queue
  """
  resourcePath: URI!

  """
  The HTTP URL for this merge queue
  """
  url: URI!
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node @internal @serviceMapping(to: "github/merge") {
  """
  Whether this pull request has jumped the queue.
  """
  hasJumpedQueue: Boolean!
  id: ID!

  """
  Does this pull request need to be deployed on its own
  """
  isSolo: Boolean!

  """
  The pull request that will be added to a merge group
  """
  pullRequest: PullRequest
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection @internal @serviceMapping(to: "github/merge") {
  """
  A list of edges.
  """
  edges: [MergeQueueEntryEdge]

  """
  A list of nodes.
  """
  nodes: [MergeQueueEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge @internal @serviceMapping(to: "github/merge") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeQueueEntry
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  """
  The head ref is out of date.
  """
  BEHIND

  """
  The merge is blocked.
  """
  BLOCKED

  """
  Mergeable and passing commit status.
  """
  CLEAN

  """
  The merge commit cannot be cleanly created.
  """
  DIRTY

  """
  The merge is blocked due to the pull request being a draft.
  """
  DRAFT
    @deprecated(
      reason: "DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC."
    )

  """
  Mergeable with passing commit status and pre-receive hooks.
  """
  HAS_HOOKS

  """
  The state cannot currently be determined.
  """
  UNKNOWN

  """
  Mergeable with non-passing commit status.
  """
  UNSTABLE
}

"""
Whether or not a PullRequest can be merged.
"""
enum MergeableState {
  """
  The pull request cannot be merged due to merge conflicts.
  """
  CONFLICTING

  """
  The pull request can be merged.
  """
  MERGEABLE

  """
  The mergeability of the pull request is still being calculated.
  """
  UNKNOWN
}

"""
Represents a 'merged' event on a given pull request.
"""
type MergedEvent implements Node & PerformableViaApp & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the commit associated with the `merge` event.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the Ref associated with the `merge` event.
  """
  mergeRef: Ref

  """
  Identifies the name of the Ref associated with the `merge` event.
  """
  mergeRefName: String!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this merged event.
  """
  resourcePath: URI!

  """
  Check if the current user needs to be shown the merge tip in the PR timeline.
  """
  showMergeTip: Boolean! @internal

  """
  The HTTP URL for this merged event.
  """
  url: URI!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Check if the current user can revert this merge commit.
  """
  viewerCanRevert: Boolean! @internal
}

"""
A migratable resource tracks migrations for individual items.
"""
type MigratableResource implements Node
  @serviceMapping(to: "github/import_export")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  id: ID!

  """
  The model name of the migratable resource.
  """
  modelName: String!

  """
  The source URL for the migratable resource.
  """
  sourceUrl: URI!

  """
  The migratable resource state.
  """
  state: MigratableResourceState

  """
  The target URL for the migratable resource.
  """
  targetUrl: URI

  """
  Any warning that may have been generated during mapping.
  """
  warning: String
}

"""
Get a list of migratable resource mappings to audit a migration.
"""
type MigratableResourceConnection @serviceMapping(to: "github/import_export") {
  """
  A list of edges.
  """
  edges: [MigratableResourceEdge]

  """
  A list of nodes.
  """
  nodes: [MigratableResource]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MigratableResourceEdge @serviceMapping(to: "github/import_export") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MigratableResource
}

"""
The state of a migratable resource.
"""
enum MigratableResourceState @serviceMapping(to: "github/import_export") {
  """
  The migratable resource is in a conflict state.
  """
  CONFLICT

  """
  The migratable resource is configured to be exported.
  """
  EXPORT

  """
  The migratable resource has been successfully exported.
  """
  EXPORTED

  """
  The migratable resource failed to migrate.
  """
  FAILED

  """
  The migratable resource failed to export.
  """
  FAILED_EXPORT

  """
  The migratable resource failed to import.
  """
  FAILED_IMPORT

  """
  The migratable resource failed to map.
  """
  FAILED_MAP

  """
  The migratable resource failed to merge.
  """
  FAILED_MERGE

  """
  The migratable resource failed to rename.
  """
  FAILED_RENAME

  """
  The migratable resource failed to be skipped.
  """
  FAILED_SKIP

  """
  The migratable resource is configured to be imported.
  """
  IMPORT

  """
  The migratable resource has been successfully imported.
  """
  IMPORTED

  """
  The migratable resource is configured to be mapped.
  """
  MAP

  """
  The migratable resource has been successfully mapped.
  """
  MAPPED

  """
  The migratable resource is configured to be merged.
  """
  MERGE

  """
  The migratable resource has been successfully merged.
  """
  MERGED

  """
  The migratable resource is configured to be renamed.
  """
  RENAME

  """
  The migratable resource has been successfully renamed.
  """
  RENAMED

  """
  The migratable resource is configured to skip import.
  """
  SKIP

  """
  The migratable resource was not imported.
  """
  SKIPPED

  """
  The migratable resource has been successfully migrated.
  """
  SUCCEEDED
}

"""
Represents an Octoshift migration.
"""
interface Migration @serviceMapping(to: "github/octoshift") {
  """
  The Octoshift migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The reason the migration failed.
  """
  failureReason: String
  id: ID!

  """
  The Octoshift migration source.
  """
  migrationSource: MigrationSource!

  """
  The Octoshift migration source URL.
  """
  sourceUrl: URI!

  """
  The Octoshift migration state.
  """
  state: MigrationState!
}

"""
Specifies a migration import mapping.
"""
input MigrationImportMapping @serviceMapping(to: "github/import_export") {
  """
  The mapping action that will take place during a migration import.
  """
  action: ImportMapAction!

  """
  The model in a migration import mapping.
  """
  modelName: String!

  """
  The resource URL to migrate data from in a migration import mapping.
  """
  sourceUrl: String!

  """
  The resource URL to migrate data to in a migration import mapping.
  """
  targetUrl: String!
}

"""
A migration import mapping conflict
"""
type MigrationMapConflict @serviceMapping(to: "github/import_export") {
  """
  The model in a migration import mapping.
  """
  modelName: String!

  """
  Extra information reported about the migration conflict.
  """
  notes: String!

  """
  The recommended map action that should resolve the map conflict for the migration import.
  """
  recommendedAction: ImportMapAction!

  """
  The resource URL to migrate data from in a migration import mapping.
  """
  sourceUrl: URI!

  """
  The resource URL to migrate data to in a migration import mapping.
  """
  targetUrl: URI
}

"""
An Octoshift migration source.
"""
type MigrationSource implements Node
  @serviceMapping(to: "github/octoshift")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  id: ID!

  """
  The Octoshift migration source name.
  """
  name: String!

  """
  The Octoshift migration source type.
  """
  type: MigrationSourceType!

  """
  The Octoshift migration source URL.
  """
  url: URI!
}

"""
Represents the different Octoshift migration sources.
"""
enum MigrationSourceType @serviceMapping(to: "github/octoshift") {
  """
  An Azure DevOps migration source.
  """
  AZURE_DEVOPS

  """
  A Bitbucket Server migration source.
  """
  BITBUCKET_SERVER

  """
  A GitHub migration source.
  """
  GITHUB

  """
  A GitLab migration source.
  """
  GITLAB
}

"""
The Octoshift migration state.
"""
enum MigrationState @serviceMapping(to: "github/octoshift") {
  """
  The Octoshift migration has failed.
  """
  FAILED

  """
  The Octoshift migration is in progress.
  """
  IN_PROGRESS

  """
  The Octoshift migration has not started.
  """
  NOT_STARTED

  """
  The Octoshift migration has been queued.
  """
  QUEUED

  """
  The Octoshift migration has succeeded.
  """
  SUCCEEDED
}

"""
Represents a Milestone object on a given repository.
"""
type Milestone implements Closable & Node & UniformResourceLocatable
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-07-16") {
  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the actor who created the milestone.
  """
  creator: Actor

  """
  Identifies the description of the milestone.
  """
  description: String

  """
  Identifies the due date of the milestone.
  """
  dueOn: DateTime
  id: ID!

  """
  A list of issues associated with the milestone.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Identifies the number of the milestone.
  """
  number: Int!

  """
  Identifies the percentage complete for the milestone
  """
  progressPercentage: Float!

  """
  A list of pull requests associated with the milestone.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  The repository associated with this milestone.
  """
  repository: Repository!

  """
  The HTTP path for this milestone
  """
  resourcePath: URI!

  """
  Identifies the state of the milestone.
  """
  state: MilestoneState!

  """
  Identifies the title of the milestone.
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this milestone
  """
  url: URI!

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal
}

"""
The connection type for Milestone.
"""
type MilestoneConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [MilestoneEdge]

  """
  A list of nodes.
  """
  nodes: [Milestone]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MilestoneEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Milestone
}

"""
Types that can be inside a Milestone.
"""
union MilestoneItem @serviceMapping(to: "github/issues") = Issue | PullRequest

"""
Ordering options for milestone connections.
"""
input MilestoneOrder @serviceMapping(to: "github/issues") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order milestones by.
  """
  field: MilestoneOrderField!
}

"""
Properties by which milestone connections can be ordered.
"""
enum MilestoneOrderField @serviceMapping(to: "github/issues") {
  """
  Order milestones by when they were created.
  """
  CREATED_AT

  """
  Order milestones by when they are due.
  """
  DUE_DATE

  """
  Order milestones by their number.
  """
  NUMBER

  """
  Order milestones by when they were last updated.
  """
  UPDATED_AT
}

"""
The possible states of a milestone.
"""
enum MilestoneState @serviceMapping(to: "github/issues") {
  """
  A milestone that has been closed.
  """
  CLOSED

  """
  A milestone that is still open.
  """
  OPEN
}

"""
Represents a 'milestoned' event on a given issue or pull request.
"""
type MilestonedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The milestone associated with this event.
  """
  milestone: Milestone @internal

  """
  Identifies the milestone title associated with the 'milestoned' event.
  """
  milestoneTitle: String!

  """
  Object referenced by event.
  """
  subject: MilestoneItem!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Entities that can be minimized.
"""
interface Minimizable {
  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal
}

"""
Autogenerated input type of MinimizeComment
"""
input MinimizeCommentInput @serviceMapping(to: "github/community_and_safety") {
  """
  The classification of comment
  """
  classifier: ReportedContentClassifiers!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the comment was minimized through stafftools.
  """
  isStaffActor: Boolean = false @internal

  """
  The reason the comment was minimized
  """
  reason: String @internal

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: ["CommitComment", "DiscussionComment", "GistComment", "IssueComment", "PullRequestReviewComment"]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of MinimizeComment
"""
type MinimizeCommentPayload @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The comment that was minimized.
  """
  minimizedComment: Minimizable
}

"""
Represents the different mobile actions.
"""
enum MobileAppAction @serviceMapping(to: "github/mobile_api") {
  """
  Event came from a gesture
  """
  GESTURE

  """
  Event came from a key command
  """
  KEY_COMMAND

  """
  Event came from a left swipe RTL
  """
  LEFT_SWIPE

  """
  Event came from a long press
  """
  LONG_PRESS

  """
  Event came from a press
  """
  PRESS

  """
  Event came from a right swipe LTR
  """
  RIGHT_SWIPE

  """
  Event came from a swipe
  """
  SWIPE
}

"""
Represents the different mobile elements.
"""
enum MobileAppElement @serviceMapping(to: "github/mobile_api") {
  """
  Explore button in the bottom navigation
  """
  EXPLORE_BOTTOM_NAVIGATION

  """
  A featured repository on explore
  """
  EXPLORE_FEATURED_REPOSITORY

  """
  A for you repository on explore
  """
  EXPLORE_FOR_YOU_REPOSITORY

  """
  A featured repository star button on explore
  """
  EXPLORE_STAR_FEATURED_REPOSITORY

  """
  A for you repository star button on explore
  """
  EXPLORE_STAR_FOR_YOU_REPOSITORY

  """
  A trending repository star button on explore
  """
  EXPLORE_STAR_TRENDING_REPOSITORY

  """
  A trending repository on explore
  """
  EXPLORE_TRENDING_REPOSITORY

  """
  Home button in the bottom navigation
  """
  HOME_BOTTOM_NAVIGATION

  """
  Create issue button on home
  """
  HOME_CREATE_ISSUE

  """
  Global list of discussions for a user on home
  """
  HOME_DISCUSSIONS

  """
  An item in the Favorites list in Home
  """
  HOME_FAVORITE_REPOSITORY_ITEM

  """
  Global list of issues for a user on home
  """
  HOME_ISSUES

  """
  Global list of organizations for a user on home
  """
  HOME_ORGANIZATIONS

  """
  Global list of pull requests for a user on home
  """
  HOME_PULL_REQUESTS

  """
  An item in the Recent activity list in Home
  """
  HOME_RECENT_ACTIVITY_ITEM

  """
  Release notes banner on home
  """
  HOME_RELEASE_NOTES

  """
  Global list of repositories for a user on home
  """
  HOME_REPOSITORIES

  """
  A list item in the issues list.
  """
  ISSUES_LIST_ITEM

  """
  The issues search bar.
  """
  ISSUES_SEARCH

  """
  Notifications onboarding banner, including configuring push notifications, swipe settings and push schedules.
  """
  NOTIFICATIONS_ONBOARDING_BANNER

  """
  Notification button in the bottom navigation.
  """
  NOTIFICATION_BOTTOM_NAVIGATION

  """
  Filter button on notification screen.
  """
  NOTIFICATION_FILTER

  """
  A filter on the list of notifications
  """
  NOTIFICATION_LIST_FILTER

  """
  A list item in the notification list.
  """
  NOTIFICATION_LIST_ITEM

  """
  Undo button when a notification is swiped.
  """
  NOTIFICATION_LIST_ITEM_UNDO

  """
  A push notification sent to a device.
  """
  NOTIFICATION_PUSH

  """
  Legacy push notifications onboarding banner.
  """
  ONBOARDING_BANNER

  """
  Profile button in the bottom navigation
  """
  PROFILE_BOTTOM_NAVIGATION

  """
  A list item in the pull requests list.
  """
  PULL_REQUESTS_LIST_ITEM

  """
  The pull requests search bar.
  """
  PULL_REQUESTS_SEARCH

  """
  A latest release on a list of releases.
  """
  RELEASES_LIST_LATEST_RELEASE

  """
  Release asset download button.
  """
  RELEASE_DOWNLOAD_ASSET

  """
  A linked discussion to a release.
  """
  RELEASE_LINKED_DISCUSSION

  """
  A filter on the list of discussions related to the repository
  """
  REPOSITORY_DISCUSSIONS_LIST_FILTER

  """
  A filter on the list of issues related to the repository.
  """
  REPOSITORY_ISSUES_LIST_FILTER

  """
  A latest release on a repository.
  """
  REPOSITORY_LATEST_RELEASE

  """
  A filter on the list of pull requests related to the repository.
  """
  REPOSITORY_PULL_REQUESTS_LIST_FILTER

  """
  Triage sheet assignee edit.
  """
  TRIAGE_ASSIGNEE_EDIT

  """
  Triage sheet close button.
  """
  TRIAGE_CLOSE

  """
  Triage sheet comment button.
  """
  TRIAGE_COMMENT

  """
  Triage sheet comment down button.
  """
  TRIAGE_COMMENT_DOWN

  """
  Triage sheet comment edit.
  """
  TRIAGE_COMMENT_EDIT

  """
  Triage sheet comment up button.
  """
  TRIAGE_COMMENT_UP

  """
  Triage sheet.
  """
  TRIAGE_EXPAND

  """
  Triage sheet label edit.
  """
  TRIAGE_LABEL_EDIT

  """
  Triage sheet lock button.
  """
  TRIAGE_LOCK

  """
  Triage sheet milestone edit.
  """
  TRIAGE_MILESTONE_EDIT

  """
  Triage sheet project edit.
  """
  TRIAGE_PROJECT_EDIT

  """
  Triage sheet review request edit.
  """
  TRIAGE_REVIEW_REQUEST_EDIT

  """
  Triage sheet unsubscribe button.
  """
  TRIAGE_UNSUBSCRIBE

  """
  A filter on the list of discussions related to the viewer
  """
  VIEWER_DISCUSSIONS_LIST_FILTER

  """
  A filter on the list of issues related to the user.
  """
  VIEWER_ISSUES_LIST_FILTER

  """
  A filter on the list of pull requests related to the user.
  """
  VIEWER_PULL_REQUESTS_LIST_FILTER
}

"""
Represents the different mobile applications.
"""
enum MobileAppType @serviceMapping(to: "github/mobile_api") {
  """
  Event came from Android app
  """
  ANDROID

  """
  Event came from iOS app
  """
  IOS
}

"""
A device token used to address push notifications to a user.
"""
type MobileDeviceToken @underDevelopment(since: "2019-09-18") @serviceMapping(to: "github/mobile_push_notifications") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The name of the device with which this token is associated.
  """
  deviceName: String

  """
  The device token.
  """
  deviceToken: String!

  """
  The push notification service that issued the device token.
  """
  service: PushNotificationService!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for MobileDeviceToken.
"""
type MobileDeviceTokenConnection
  @underDevelopment(since: "2019-09-18")
  @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A list of edges.
  """
  edges: [MobileDeviceTokenEdge]

  """
  A list of nodes.
  """
  nodes: [MobileDeviceToken]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MobileDeviceTokenEdge
  @underDevelopment(since: "2019-09-18")
  @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MobileDeviceToken
}

"""
Represents the different mobile devices.
"""
enum MobileDeviceType @serviceMapping(to: "github/mobile_api") {
  """
  Event came from a phone device.
  """
  PHONE

  """
  Event came from a tablet device.
  """
  TABLET
}

"""
Represents the different extra mobile context.
"""
enum MobileEventContext @serviceMapping(to: "github/mobile_api") {
  """
  The issue or pull request was assigned to the user.
  """
  ASSIGNED

  """
  The issue or pull request is closed.
  """
  CLOSED

  """
  The issue or pull request was created by the user.
  """
  CREATED

  """
  A banner (release notes, feature onboarding, etc.) dismissed by a user
  """
  DISMISSED

  """
  Release notes have been displayed to a user
  """
  DISPLAYED

  """
  The notification was marked as done.
  """
  DONE

  """
  The issue or pull request mentioned the user.
  """
  MENTIONED

  """
  The issue or pull request is open.
  """
  OPEN

  """
  A banner (release notes, feature onboarding, etc.) has been opened by a user
  """
  OPENED

  """
  The notification was marked as read.
  """
  READ

  """
  The pull request requested review from the user.
  """
  REVIEW_REQUESTED

  """
  The notification was marked as saved.
  """
  SAVE

  """
  The notification list was subscribed to.
  """
  SUBSCRIBE

  """
  The notification was marked as undone.
  """
  UNDONE

  """
  The notification was marked as unread.
  """
  UNREAD

  """
  The notification was marked as saved.
  """
  UNSAVE

  """
  The notification list was unsubscribed from.
  """
  UNSUBSCRIBE
}

"""
Autogenerated input type of MobileEventsUpdate
"""
input MobileEventsUpdateInput @serviceMapping(to: "github/mobile_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of hydro events.
  """
  eventsBatch: [MobileHydroEvent!]!
}

"""
Autogenerated return type of MobileEventsUpdate
"""
type MobileEventsUpdatePayload @serviceMapping(to: "github/mobile_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user who posted the events.
  """
  user: User
}

"""
Details about a hydro event.
"""
input MobileHydroEvent @serviceMapping(to: "github/mobile_api") {
  """
  The action that was performed.
  """
  action: MobileAppAction!

  """
  The element of the event that took place on.
  """
  appElement: MobileAppElement!

  """
  The app type the event took place on.
  """
  appType: MobileAppType!

  """
  Extra context provided for the mobile event
  """
  context: MobileEventContext

  """
  The device type the event took place on.
  """
  deviceType: MobileDeviceType!

  """
  The time the event was performed.
  """
  performedAt: DateTime!

  """
  The device type the event took place on.
  """
  subjectType: MobileSubjectType
}

"""
A push notifications schedule for a user.
"""
type MobilePushNotificationSchedule implements Node
  @serviceMapping(to: "github/mobile_push_notifications")
  @useNextGlobalIdFormat(after: "2021-06-18") {
  """
  The schedule day.
  """
  day: DayOfWeek!

  """
  The schedule end time (0:00..23:59)
  """
  endTime: MobilePushScheduleTime!
  id: ID!

  """
  The schedule start time (0:00..23:59)
  """
  startTime: MobilePushScheduleTime!

  """
  The user's time zone name
  """
  timeZone: String!
}

"""
The connection type for MobilePushNotificationSchedule.
"""
type MobilePushNotificationScheduleConnection @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A list of edges.
  """
  edges: [MobilePushNotificationScheduleEdge]

  """
  A list of nodes.
  """
  nodes: [MobilePushNotificationSchedule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MobilePushNotificationScheduleEdge @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MobilePushNotificationSchedule
}

"""
The viewer's mobile push notification settings
"""
type MobilePushNotificationSettings @serviceMapping(to: "github/mobile_push_notifications") {
  """
  Does the viewer get mobile push notifications for issues or pull requests in which they assigned?
  """
  getsAssignments: Boolean!

  """
  Does the viewer get mobile push notifications for deployment requests?
  """
  getsDeploymentRequests: Boolean!

  """
  Does the viewer get mobile push notifications for comments in which they are directly mentioned?
  """
  getsDirectMentions: Boolean!

  """
  Does the viewer get mobile push notifications for pull requests in which their review was requested?
  """
  getsReviewRequests: Boolean!

  """
  Does the viewer have scheduled push notifications enabled/disabled?
  """
  scheduledNotifications: Boolean!
}

"""
A string representing the time of day with format HH:MM. eg. 00:00...23:59
"""
scalar MobilePushScheduleTime @serviceMapping(to: "github/mobile_push_notifications")

"""
Represents the different mobile subject types.
"""
enum MobileSubjectType @serviceMapping(to: "github/mobile_api") {
  """
  The subject of the event is a check suite.
  """
  CHECK_SUITE

  """
  The subject of the event is a commit.
  """
  COMMIT

  """
  The subject of the event is a deployment review.
  """
  DEPLOYMENT_REVIEW

  """
  The subject of the event is a discussion.
  """
  DISCUSSION

  """
  The subject of the event is an assignee filter.
  """
  FILTER_ASSIGNEE

  """
  The subject of the event is an author filter.
  """
  FILTER_AUTHOR

  """
  The subject of the event is a discussion category filter.
  """
  FILTER_DISCUSSION_CATEGORY

  """
  The subject of the event is a discussion unanswered filter.
  """
  FILTER_DISCUSSION_IS_UNANSWERED

  """
  The subject of the event is a discussion sort filter.
  """
  FILTER_DISCUSSION_TOP

  """
  The subject of the event is a discussion viewer filter.
  """
  FILTER_DISCUSSION_VIEWER

  """
  The subject of the event is an issue status filter.
  """
  FILTER_ISSUE_STATUS

  """
  The subject of the event is an issue viewer filter.
  """
  FILTER_ISSUE_VIEWER

  """
  The subject of the event is a label filter.
  """
  FILTER_LABEL

  """
  The subject of the event is a milestone filter.
  """
  FILTER_MILESTONE

  """
  The subject of the event is a notification 'filter' filter.
  """
  FILTER_NOTIFICATION_FILTER

  """
  The subject of the event is a notification unread filter.
  """
  FILTER_NOTIFICATION_IS_UNREAD

  """
  The subject of the event is a notification status filter.
  """
  FILTER_NOTIFICATION_STATUS

  """
  The subject of the event is an organization filter.
  """
  FILTER_ORGANIZATION

  """
  The subject of the event is a project filter.
  """
  FILTER_PROJECT

  """
  The subject of the event is a pull request review status filter.
  """
  FILTER_PULL_REQUEST_REVIEW_STATUS

  """
  The subject of the event is a pull request status filter.
  """
  FILTER_PULL_REQUEST_STATUS

  """
  The subject of the event is a pull request viewer filter.
  """
  FILTER_PULL_REQUEST_VIEWER

  """
  The subject of the event is a repository filter.
  """
  FILTER_REPOSITORY

  """
  The subject of the event is a repository visibility filter.
  """
  FILTER_REPOSITORY_VISIBILITY

  """
  The subject of the event is a sort filter.
  """
  FILTER_SORT

  """
  The subject of the event is a gist.
  """
  GIST

  """
  The subject of the event is a issue.
  """
  ISSUE

  """
  The subject of the event is a organization.
  """
  ORGANIZATION

  """
  The subject of the event is a pull request.
  """
  PULL_REQUEST

  """
  The subject of the event is push notifications feature.
  """
  PUSH_NOTIFICATIONS

  """
  The subject of the event is an assign push notification.
  """
  PUSH_NOTIFICATION_ASSIGN

  """
  The subject of the event is a deployment approval push notification.
  """
  PUSH_NOTIFICATION_DEPLOYMENT_APPROVAL

  """
  The subject of the event is a mention push notification.
  """
  PUSH_NOTIFICATION_MENTION

  """
  The subject of the event is a review request push notification.
  """
  PUSH_NOTIFICATION_REVIEW_REQUEST

  """
  The subject of the event is a release.
  """
  RELEASE

  """
  The subject of the event is a repository.
  """
  REPOSITORY

  """
  The subject of the event is a repository advisory.
  """
  REPOSITORY_ADVISORY

  """
  The subject of the event is a repository dependabot thread alert.
  """
  REPOSITORY_DEPENDABOT_THREAD_ALERT

  """
  The subject of the event is a repository vulnerability alert.
  """
  REPOSITORY_VULNERABILITY_ALERT

  """
  The subject of the event is a security advisory.
  """
  SECURITY_ADVISORY

  """
  The subject of the event is swipe actions feature.
  """
  SWIPE_ACTIONS

  """
  The subject of the event is a team discussion.
  """
  TEAM_DISCUSSION

  """
  The subject of the event is a user.
  """
  USER

  """
  The subject of the event is a workflow run.
  """
  WORKFLOW_RUN
}

"""
Describes a suggested change to a file to be applied in a new commit.
"""
input MobileSuggestedChangeInput @serviceMapping(to: "github/pull_requests") {
  """
  ID of the comment with the suggested change.
  """
  commentId: ID!

  """
  ID of the suggested change
  """
  suggestedChangeId: ID!
}

"""
A monetary amount represented in the ISO 4217 currency code.
"""
scalar Money @internal

"""
Autogenerated input type of MoveProjectCard
"""
input MoveProjectCardInput @serviceMapping(to: "github/projects") {
  """
  Place the new card after the card with this id. Pass null to place it at the top.
  """
  afterCardId: ID @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  The id of the card to move.
  """
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to move it into.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of MoveProjectCard
"""
type MoveProjectCardPayload @serviceMapping(to: "github/projects") {
  """
  The new edge of the moved card.
  """
  cardEdge: ProjectCardEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of MoveProjectColumn
"""
input MoveProjectColumnInput @serviceMapping(to: "github/projects") {
  """
  Place the new column after the column with this id. Pass null to place it at the front.
  """
  afterColumnId: ID @possibleTypes(concreteTypes: ["ProjectColumn"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the column to move.
  """
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

"""
Autogenerated return type of MoveProjectColumn
"""
type MoveProjectColumnPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new edge of the moved column.
  """
  columnEdge: ProjectColumnEdge
}

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
type MovedColumnsInProjectEvent implements Node & PerformableViaApp & ProjectEvent & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Column name the issue or pull request was moved from.
  """
  previousProjectColumnName: String!

  """
  Project referenced by event.
  """
  project: Project

  """
  Project card referenced by this project event.
  """
  projectCard: ProjectCard

  """
  Column name the issue or pull request was moved to.
  """
  projectColumnName: String!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Did this event result from workflow automation?
  """
  wasAutomated: Boolean! @internal
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation @serviceMapping(to: "github/graphql_api") {
  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """
    Parameters for AcceptEnterpriseAdministratorInvitation
    """
    input: AcceptEnterpriseAdministratorInvitationInput!
  ): AcceptEnterpriseAdministratorInvitationPayload @serviceMapping(to: "github/admin_experience")

  """
  Accepts a pending invitation for an organization to join an enterprise.
  """
  acceptEnterpriseOrganizationInvitation(
    """
    Parameters for AcceptEnterpriseOrganizationInvitation
    """
    input: AcceptEnterpriseOrganizationInvitationInput!
  ): AcceptEnterpriseOrganizationInvitationPayload @serviceMapping(to: "github/admin_experience")

  """
  Applies a suggested topic to the repository.
  """
  acceptTopicSuggestion(
    """
    Parameters for AcceptTopicSuggestion
    """
    input: AcceptTopicSuggestionInput!
  ): AcceptTopicSuggestionPayload

  """
  Adds assignees to an assignable object.
  """
  addAssigneesToAssignable(
    """
    Parameters for AddAssigneesToAssignable
    """
    input: AddAssigneesToAssignableInput!
  ): AddAssigneesToAssignablePayload

  """
  Adds a comment to an Issue or Pull Request.
  """
  addComment(
    """
    Parameters for AddComment
    """
    input: AddCommentInput!
  ): AddCommentPayload @serviceMapping(to: "github/pull_requests")

  """
  Adds a comment to a Discussion, possibly as a reply to another comment.
  """
  addDiscussionComment(
    """
    Parameters for AddDiscussionComment
    """
    input: AddDiscussionCommentInput!
  ): AddDiscussionCommentPayload @serviceMapping(to: "github/discussions")

  """
  Adds an administrator to the global enterprise account.
  """
  addEnterpriseAdmin(
    """
    Parameters for AddEnterpriseAdmin
    """
    input: AddEnterpriseAdminInput!
  ): AddEnterpriseAdminPayload @serviceMapping(to: "github/admin_experience")

  """
  Adds a support entitlement to an enterprise member.
  """
  addEnterpriseSupportEntitlement(
    """
    Parameters for AddEnterpriseSupportEntitlement
    """
    input: AddEnterpriseSupportEntitlementInput!
  ): AddEnterpriseSupportEntitlementPayload @serviceMapping(to: "github/admin_experience")

  """
  Add the import mapping for a GitHub migration import.
  """
  addImportMapping(
    """
    Parameters for AddImportMapping
    """
    input: AddImportMappingInput!
  ): AddImportMappingPayload @serviceMapping(to: "github/import_export")

  """
  Adds labels to a labelable object.
  """
  addLabelsToLabelable(
    """
    Parameters for AddLabelsToLabelable
    """
    input: AddLabelsToLabelableInput!
  ): AddLabelsToLabelablePayload @serviceMapping(to: "github/issues")

  """
  Associate a mobile device token with the current viewer.
  """
  addMobileDeviceToken(
    """
    Parameters for AddMobileDeviceToken
    """
    input: AddMobileDeviceTokenInput!
  ): AddMobileDeviceTokenPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Adds labels to a labelable object.
  """
  addOrCreateLabelsToLabelable(
    """
    Parameters for AddOrCreateLabelsToLabelable
    """
    input: AddOrCreateLabelsToLabelableInput!
  ): AddOrCreateLabelsToLabelablePayload @serviceMapping(to: "github/issues")

  """
  Adds a new tag to a package version.
  """
  addPackageTag(
    """
    Parameters for AddPackageTag
    """
    input: AddPackageTagInput!
  ): AddPackageTagPayload

  """
  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
  """
  addProjectCard(
    """
    Parameters for AddProjectCard
    """
    input: AddProjectCardInput!
  ): AddProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Adds user collaborator to project.
  """
  addProjectCollaborator(
    """
    Parameters for AddProjectCollaborator
    """
    input: AddProjectCollaboratorInput!
  ): AddProjectCollaboratorPayload @serviceMapping(to: "github/projects")

  """
  Adds a column to a Project.
  """
  addProjectColumn(
    """
    Parameters for AddProjectColumn
    """
    input: AddProjectColumnInput!
  ): AddProjectColumnPayload @serviceMapping(to: "github/projects")

  """
  Adds an existing item (Issue or PullRequest) to a Project.
  """
  addProjectNextItem(
    """
    Parameters for AddProjectNextItem
    """
    input: AddProjectNextItemInput!
  ): AddProjectNextItemPayload @serviceMapping(to: "github/projects")

  """
  Adds a new project workflow to the project.
  """
  addProjectWorkflow(
    """
    Parameters for AddProjectWorkflow
    """
    input: AddProjectWorkflowInput!
  ): AddProjectWorkflowPayload @serviceMapping(to: "github/projects")

  """
  Adds a review to a Pull Request.
  """
  addPullRequestReview(
    """
    Parameters for AddPullRequestReview
    """
    input: AddPullRequestReviewInput!
  ): AddPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Adds a comment to a review.
  """
  addPullRequestReviewComment(
    """
    Parameters for AddPullRequestReviewComment
    """
    input: AddPullRequestReviewCommentInput!
  ): AddPullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Adds a new thread to a pending Pull Request Review.
  """
  addPullRequestReviewThread(
    """
    Parameters for AddPullRequestReviewThread
    """
    input: AddPullRequestReviewThreadInput!
  ): AddPullRequestReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Adds a reply to an existing Pull Request Review Thread.
  """
  addPullRequestReviewThreadReply(
    """
    Parameters for AddPullRequestReviewThreadReply
    """
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Adds a pull request to a merge queue
  """
  addPullRequestToMergeQueue(
    """
    Parameters for AddPullRequestToMergeQueue
    """
    input: AddPullRequestToMergeQueueInput!
  ): AddPullRequestToMergeQueuePayload @serviceMapping(to: "github/pull_requests")

  """
  Adds a reaction to a subject.
  """
  addReaction(
    """
    Parameters for AddReaction
    """
    input: AddReactionInput!
  ): AddReactionPayload

  """
  Adds a recovery token to a user.
  """
  addRecoveryToken(
    """
    Parameters for AddRecoveryToken
    """
    input: AddRecoveryTokenInput!
  ): AddRecoveryTokenPayload

  """
  Adds a release version to a repository.
  """
  addReleaseToRepository(
    """
    Parameters for AddReleaseToRepository
    """
    input: AddReleaseToRepositoryInput!
  ): AddReleaseToRepositoryPayload

  """
  Adds a star to a Starrable.
  """
  addStar(
    """
    Parameters for AddStar
    """
    input: AddStarInput!
  ): AddStarPayload

  """
  Adds member to team.
  """
  addTeamMember(
    """
    Parameters for AddTeamMember
    """
    input: AddTeamMemberInput!
  ): AddTeamMemberPayload @serviceMapping(to: "github/teams")

  """
  Adds project to team.
  """
  addTeamProject(
    """
    Parameters for AddTeamProject
    """
    input: AddTeamProjectInput!
  ): AddTeamProjectPayload @serviceMapping(to: "github/teams")

  """
  Add an upvote to a discussion or discussion comment.
  """
  addUpvote(
    """
    Parameters for AddUpvote
    """
    input: AddUpvoteInput!
  ): AddUpvotePayload @serviceMapping(to: "github/discussions")

  """
  Adds a verifiable domain to an owning account.
  """
  addVerifiableDomain(
    """
    Parameters for AddVerifiableDomain
    """
    input: AddVerifiableDomainInput!
  ): AddVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains")

  """
  Applies a set of suggested changes to files
  """
  applyMobileSuggestedChanges(
    """
    Parameters for ApplyMobileSuggestedChanges
    """
    input: ApplyMobileSuggestedChangesInput!
  ): ApplyMobileSuggestedChangesPayload @serviceMapping(to: "github/pull_requests")

  """
  Applies a set of suggested changes to files
  """
  applySuggestedChanges(
    """
    Parameters for ApplySuggestedChanges
    """
    input: ApplySuggestedChangesInput!
  ): ApplySuggestedChangesPayload @serviceMapping(to: "github/pull_requests")

  """
  Approve all of the action_required workflows on a pull request
  """
  approveActionRequiredWorkflowRuns(
    """
    Parameters for ApproveActionRequiredWorkflowRuns
    """
    input: ApproveActionRequiredWorkflowRunsInput!
  ): ApproveActionRequiredWorkflowRunsPayload @serviceMapping(to: "github/actions")

  """
  Approve a Marketplace listing Creator as verified creator.
  """
  approveCreatorMarketplaceListing(
    """
    Parameters for ApproveCreatorMarketplaceListing
    """
    input: ApproveCreatorMarketplaceListingInput!
  ): ApproveCreatorMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Approve all pending deployments under one or more environments
  """
  approveDeployments(
    """
    Parameters for ApproveDeployments
    """
    input: ApproveDeploymentsInput!
  ): ApproveDeploymentsPayload @serviceMapping(to: "github/actions")

  """
  Approve a Marketplace listing so that it becomes publicly visible.
  """
  approveMarketplaceListing(
    """
    Parameters for ApproveMarketplaceListing
    """
    input: ApproveMarketplaceListingInput!
  ): ApproveMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Approves a pending team change parent request and moves the child team to the parent team
  """
  approvePendingTeamChangeParentRequest(
    """
    Parameters for ApprovePendingTeamChangeParentRequest
    """
    input: ApprovePendingTeamChangeParentRequestInput!
  ): ApprovePendingTeamChangeParentRequestPayload @serviceMapping(to: "github/teams")

  """
  Approve a verifiable domain for notification delivery.
  """
  approveVerifiableDomain(
    """
    Parameters for ApproveVerifiableDomain
    """
    input: ApproveVerifiableDomainInput!
  ): ApproveVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains")

  """
  Archives a project card.
  """
  archiveProjectCard(
    """
    Parameters for ArchiveProjectCard
    """
    input: ArchiveProjectCardInput!
  ): ArchiveProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Marks a repository as archived.
  """
  archiveRepository(
    """
    Parameters for ArchiveRepository
    """
    input: ArchiveRepositoryInput!
  ): ArchiveRepositoryPayload @serviceMapping(to: "github/repo_info")

  """
  Block action invocation for accounts.
  """
  blockAccountsActionInvocation(
    """
    Parameters for BlockAccountsActionInvocation
    """
    input: BlockAccountsActionInvocationInput!
  ): BlockAccountsActionInvocationPayload @serviceMapping(to: "github/actions")

  """
  Block another user
  """
  blockUser(
    """
    Parameters for BlockUser
    """
    input: BlockUserInput!
  ): BlockUserPayload @serviceMapping(to: "github/community_and_safety")

  """
  Block a user from an organization
  """
  blockUserFromOrganization(
    """
    Parameters for BlockUserFromOrganization
    """
    input: BlockUserFromOrganizationInput!
  ): BlockUserFromOrganizationPayload @serviceMapping(to: "github/orgs")

  """
  Cancels a pending invitation for an administrator to join an enterprise.
  """
  cancelEnterpriseAdminInvitation(
    """
    Parameters for CancelEnterpriseAdminInvitation
    """
    input: CancelEnterpriseAdminInvitationInput!
  ): CancelEnterpriseAdminInvitationPayload @serviceMapping(to: "github/admin_experience")

  """
  Cancels a pending invitation for an organization to join an enterprise.
  """
  cancelEnterpriseOrganizationInvitation(
    """
    Parameters for CancelEnterpriseOrganizationInvitation
    """
    input: CancelEnterpriseOrganizationInvitationInput!
  ): CancelEnterpriseOrganizationInvitationPayload @serviceMapping(to: "github/admin_experience")

  """
  Cancel a pending change for a marketplace purchase.
  """
  cancelPendingMarketplaceChange(
    """
    Parameters for CancelPendingMarketplaceChange
    """
    input: CancelPendingMarketplaceChangeInput!
  ): CancelPendingMarketplaceChangePayload @serviceMapping(to: "github/marketplace")

  """
  Cancels a pending team change parent request
  """
  cancelPendingTeamChangeParentRequest(
    """
    Parameters for CancelPendingTeamChangeParentRequest
    """
    input: CancelPendingTeamChangeParentRequestInput!
  ): CancelPendingTeamChangeParentRequestPayload @serviceMapping(to: "github/teams")

  """
  Cancel a given subscription item for an account.
  """
  cancelSubscriptionItem(
    """
    Parameters for CancelSubscriptionItem
    """
    input: CancelSubscriptionItemInput!
  ): CancelSubscriptionItemPayload

  """
  Update your status on GitHub.
  """
  changeUserStatus(
    """
    Parameters for ChangeUserStatus
    """
    input: ChangeUserStatusInput!
  ): ChangeUserStatusPayload @serviceMapping(to: "github/profiles")

  """
  Classify a set of accounts as hammy.
  """
  classifyAccountsAsHammy(
    """
    Parameters for ClassifyAccountsAsHammy
    """
    input: ClassifyAccountsAsHammyInput!
  ): ClassifyAccountsAsHammyPayload @serviceMapping(to: "github/account_classification")

  """
  Classify a set of accounts as spammy.
  """
  classifyAccountsAsSpammy(
    """
    Parameters for ClassifyAccountsAsSpammy
    """
    input: ClassifyAccountsAsSpammyInput!
  ): ClassifyAccountsAsSpammyPayload @serviceMapping(to: "github/account_classification")

  """
  Clear account classification.
  """
  clearAccountClassifications(
    """
    Parameters for ClearAccountClassifications
    """
    input: ClearAccountClassificationsInput!
  ): ClearAccountClassificationsPayload @serviceMapping(to: "github/account_classification")

  """
  Clears all labels from a labelable object.
  """
  clearLabelsFromLabelable(
    """
    Parameters for ClearLabelsFromLabelable
    """
    input: ClearLabelsFromLabelableInput!
  ): ClearLabelsFromLabelablePayload @serviceMapping(to: "github/issues")

  """
  Deletes all mobile device tokens for a user.
  """
  clearMobileDeviceTokens(
    """
    Parameters for ClearMobileDeviceTokens
    """
    input: ClearMobileDeviceTokensInput!
  ): ClearMobileDeviceTokensPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Creates a new project by cloning configuration from an existing project.
  """
  cloneProject(
    """
    Parameters for CloneProject
    """
    input: CloneProjectInput!
  ): CloneProjectPayload @serviceMapping(to: "github/projects")

  """
  Create a new repository with the same files and directory structure as a template repository.
  """
  cloneTemplateRepository(
    """
    Parameters for CloneTemplateRepository
    """
    input: CloneTemplateRepositoryInput!
  ): CloneTemplateRepositoryPayload @serviceMapping(to: "github/repo_info")

  """
  Close an issue.
  """
  closeIssue(
    """
    Parameters for CloseIssue
    """
    input: CloseIssueInput!
  ): CloseIssuePayload @serviceMapping(to: "github/issues")

  """
  Close a pull request.
  """
  closePullRequest(
    """
    Parameters for ClosePullRequest
    """
    input: ClosePullRequestInput!
  ): ClosePullRequestPayload @serviceMapping(to: "github/pull_requests")

  """
  Confirms an accepted invitation for an organization to join an enterprise.
  """
  confirmEnterpriseOrganizationInvitation(
    """
    Parameters for ConfirmEnterpriseOrganizationInvitation
    """
    input: ConfirmEnterpriseOrganizationInvitationInput!
  ): ConfirmEnterpriseOrganizationInvitationPayload @serviceMapping(to: "github/admin_experience")

  """
  Marks a given token as confirmed
  """
  confirmRecoveryToken(
    """
    Parameters for ConfirmRecoveryToken
    """
    input: ConfirmRecoveryTokenInput!
  ): ConfirmRecoveryTokenPayload

  """
  Convert a project note card to one associated with a newly created issue.
  """
  convertProjectCardNoteToIssue(
    """
    Parameters for ConvertProjectCardNoteToIssue
    """
    input: ConvertProjectCardNoteToIssueInput!
  ): ConvertProjectCardNoteToIssuePayload @serviceMapping(to: "github/projects")

  """
  Converts a pull request to draft
  """
  convertPullRequestToDraft(
    """
    Parameters for ConvertPullRequestToDraft
    """
    input: ConvertPullRequestToDraftInput!
  ): ConvertPullRequestToDraftPayload @serviceMapping(to: "github/pull_requests")

  """
  Invites a user to claim reattributable data
  """
  createAttributionInvitation(
    """
    Parameters for CreateAttributionInvitation
    """
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload @serviceMapping(to: "github/import_export")

  """
  Create a new branch protection rule
  """
  createBranchProtectionRule(
    """
    Parameters for CreateBranchProtectionRule
    """
    input: CreateBranchProtectionRuleInput!
  ): CreateBranchProtectionRulePayload @serviceMapping(to: "github/branch_protection_rule")

  """
  Create a check run.
  """
  createCheckRun(
    """
    Parameters for CreateCheckRun
    """
    input: CreateCheckRunInput!
  ): CreateCheckRunPayload @serviceMapping(to: "github/checks_api")

  """
  Create a check suite
  """
  createCheckSuite(
    """
    Parameters for CreateCheckSuite
    """
    input: CreateCheckSuiteInput!
  ): CreateCheckSuitePayload @serviceMapping(to: "github/checks_api")

  """
  Create a commit with the provided data.
  """
  createCommitOnRef(
    """
    Parameters for CreateCommitOnRef
    """
    input: CreateCommitOnRefInput!
  ): CreateCommitOnRefPayload @serviceMapping(to: "github/ref")

  """
  Create a content attachment.
  """
  createContentAttachment(
    """
    Parameters for CreateContentAttachment
    """
    input: CreateContentAttachmentInput!
  ): CreateContentAttachmentPayload @serviceMapping(to: "github/extensibility")

  """
  Create a new custom notifications inbox for the current viewer.
  """
  createCustomInbox(
    """
    Parameters for CreateCustomInbox
    """
    input: CreateCustomInboxInput!
  ): CreateCustomInboxPayload @serviceMapping(to: "github/notifications")

  """
  Creates a new deployment event.
  """
  createDeployment(
    """
    Parameters for CreateDeployment
    """
    input: CreateDeploymentInput!
  ): CreateDeploymentPayload @serviceMapping(to: "github/deployments_api")

  """
  Create a deployment status.
  """
  createDeploymentStatus(
    """
    Parameters for CreateDeploymentStatus
    """
    input: CreateDeploymentStatusInput!
  ): CreateDeploymentStatusPayload @serviceMapping(to: "github/deployments_api")

  """
  Create a discussion.
  """
  createDiscussion(
    """
    Parameters for CreateDiscussion
    """
    input: CreateDiscussionInput!
  ): CreateDiscussionPayload @serviceMapping(to: "github/discussions")

  """
  Creates an organization as part of an enterprise account.
  """
  createEnterpriseOrganization(
    """
    Parameters for CreateEnterpriseOrganization
    """
    input: CreateEnterpriseOrganizationInput!
  ): CreateEnterpriseOrganizationPayload @serviceMapping(to: "github/admin_experience")

  """
  Creates an environment or simply returns it if already exists.
  """
  createEnvironment(
    """
    Parameters for CreateEnvironment
    """
    input: CreateEnvironmentInput!
  ): CreateEnvironmentPayload @serviceMapping(to: "github/actions")

  """
  Creates a gate request.
  """
  createGateRequest(
    """
    Parameters for CreateGateRequest
    """
    input: CreateGateRequestInput!
  ): CreateGateRequestPayload @serviceMapping(to: "github/actions")

  """
  Creates a new Integration category
  """
  createIntegrationCategory(
    """
    Parameters for CreateIntegrationCategory
    """
    input: CreateIntegrationCategoryInput!
  ): CreateIntegrationCategoryPayload

  """
  Creates a new IP allow list entry.
  """
  createIpAllowListEntry(
    """
    Parameters for CreateIpAllowListEntry
    """
    input: CreateIpAllowListEntryInput!
  ): CreateIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list")

  """
  Creates a new issue.
  """
  createIssue(
    """
    Parameters for CreateIssue
    """
    input: CreateIssueInput!
  ): CreateIssuePayload @serviceMapping(to: "github/issues")

  """
  Creates a new label.
  """
  createLabel(
    """
    Parameters for CreateLabel
    """
    input: CreateLabelInput!
  ): CreateLabelPayload @serviceMapping(to: "github/issues")

  """
  Creates a new Marketplace legal agreement.
  """
  createMarketplaceAgreement(
    """
    Parameters for CreateMarketplaceAgreement
    """
    input: CreateMarketplaceAgreementInput!
  ): CreateMarketplaceAgreementPayload @serviceMapping(to: "github/marketplace")

  """
  Creates a new Marketplace category.
  """
  createMarketplaceCategory(
    """
    Parameters for CreateMarketplaceCategory
    """
    input: CreateMarketplaceCategoryInput!
  ): CreateMarketplaceCategoryPayload @serviceMapping(to: "github/marketplace")

  """
  Creates a new marketplace listing.
  """
  createMarketplaceListing(
    """
    Parameters for CreateMarketplaceListing
    """
    input: CreateMarketplaceListingInput!
  ): CreateMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Creates a new Marketplace listing payment plan.
  """
  createMarketplaceListingPlan(
    """
    Parameters for CreateMarketplaceListingPlan
    """
    input: CreateMarketplaceListingPlanInput!
  ): CreateMarketplaceListingPlanPayload @serviceMapping(to: "github/marketplace")

  """
  Creates a bullet point on a Marketplace listing payment plan.
  """
  createMarketplaceListingPlanBullet(
    """
    Parameters for CreateMarketplaceListingPlanBullet
    """
    input: CreateMarketplaceListingPlanBulletInput!
  ): CreateMarketplaceListingPlanBulletPayload @serviceMapping(to: "github/marketplace")

  """
  Creates an Octoshift migration source.
  """
  createMigrationSource(
    """
    Parameters for CreateMigrationSource
    """
    input: CreateMigrationSourceInput!
  ): CreateMigrationSourcePayload @serviceMapping(to: "github/octoshift")

  """
  Creates mobile push notification schedules.
  """
  createMobilePushNotificationSchedules(
    """
    Parameters for CreateMobilePushNotificationSchedules
    """
    input: CreateMobilePushNotificationSchedulesInput!
  ): CreateMobilePushNotificationSchedulesPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Creates a subscription representing a in-app purchase
  """
  createMobileSubscription(
    """
    Parameters for CreateMobileSubscription
    """
    input: CreateMobileSubscriptionInput!
  ): CreateMobileSubscriptionPayload @serviceMapping(to: "github/mobile_api")

  """
  Creates a new organization discussion.
  """
  createOrganizationDiscussion(
    """
    Parameters for CreateOrganizationDiscussion
    """
    input: CreateOrganizationDiscussionInput!
  ): CreateOrganizationDiscussionPayload @serviceMapping(to: "github/discussions")

  """
  Creates a new organization discussion comment.
  """
  createOrganizationDiscussionComment(
    """
    Parameters for CreateOrganizationDiscussionComment
    """
    input: CreateOrganizationDiscussionCommentInput!
  ): CreateOrganizationDiscussionCommentPayload @serviceMapping(to: "github/discussions")

  """
  Adds a package file to a package version
  """
  createPackageFile(
    """
    Parameters for CreatePackageFile
    """
    input: CreatePackageFileInput!
  ): CreatePackageFilePayload

  """
  Adds a version to a package
  """
  createPackageVersion(
    """
    Parameters for CreatePackageVersion
    """
    input: CreatePackageVersionInput!
  ): CreatePackageVersionPayload

  """
  Creates metadata on a package version.
  """
  createPackageVersionMetadata(
    """
    Parameters for CreatePackageVersionMetadata
    """
    input: CreatePackageVersionMetadataInput!
  ): CreatePackageVersionMetadataPayload

  """
  Creates a pending parent initiated team change parent request
  """
  createParentInitiatedTeamChangeParentRequest(
    """
    Parameters for CreateParentInitiatedTeamChangeParentRequest
    """
    input: CreateParentInitiatedTeamChangeParentRequestInput!
  ): CreateParentInitiatedTeamChangeParentRequestPayload @serviceMapping(to: "github/teams")

  """
  Creates a new project.
  """
  createProject(
    """
    Parameters for CreateProject
    """
    input: CreateProjectInput!
  ): CreateProjectPayload @serviceMapping(to: "github/projects")

  """
  Create a new pull request
  """
  createPullRequest(
    """
    Parameters for CreatePullRequest
    """
    input: CreatePullRequestInput!
  ): CreatePullRequestPayload @serviceMapping(to: "github/pull_requests")

  """
  Create a new Git Ref.
  """
  createRef(
    """
    Parameters for CreateRef
    """
    input: CreateRefInput!
  ): CreateRefPayload @serviceMapping(to: "github/repo_info")

  """
  Create a new repository.
  """
  createRepository(
    """
    Parameters for CreateRepository
    """
    input: CreateRepositoryInput!
  ): CreateRepositoryPayload @serviceMapping(to: "github/repo_info")

  """
  Adds a saved notification thread.
  """
  createSavedNotificationThread(
    """
    Parameters for CreateSavedNotificationThread
    """
    input: CreateSavedNotificationThreadInput!
  ): CreateSavedNotificationThreadPayload

  """
  Creates a subscription item representing a purchase
  """
  createSubscriptionItem(
    """
    Parameters for CreateSubscriptionItem
    """
    input: CreateSubscriptionItemInput!
  ): CreateSubscriptionItemPayload

  """
  Creates a new team.
  """
  createTeam(
    """
    Parameters for CreateTeam
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """
  Creates a new team discussion.
  """
  createTeamDiscussion(
    """
    Parameters for CreateTeamDiscussion
    """
    input: CreateTeamDiscussionInput!
  ): CreateTeamDiscussionPayload @serviceMapping(to: "github/teams")

  """
  Creates a new team discussion comment.
  """
  createTeamDiscussionComment(
    """
    Parameters for CreateTeamDiscussionComment
    """
    input: CreateTeamDiscussionCommentInput!
  ): CreateTeamDiscussionCommentPayload @serviceMapping(to: "github/teams")

  """
  Pin an item to a user's dashboard without modifying other pins.
  """
  createUserDashboardPin(
    """
    Parameters for CreateUserDashboardPin
    """
    input: CreateUserDashboardPinInput!
  ): CreateUserDashboardPinPayload @serviceMapping(to: "github/dashboard")

  """
  Rejects a suggested topic for the repository.
  """
  declineTopicSuggestion(
    """
    Parameters for DeclineTopicSuggestion
    """
    input: DeclineTopicSuggestionInput!
  ): DeclineTopicSuggestionPayload

  """
  Delete a branch protection rule
  """
  deleteBranchProtectionRule(
    """
    Parameters for DeleteBranchProtectionRule
    """
    input: DeleteBranchProtectionRuleInput!
  ): DeleteBranchProtectionRulePayload

  """
  Delete a comment.
  """
  deleteComment(
    """
    Parameters for DeleteComment
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload @serviceMapping(to: "github/issues")

  """
  Delete a custom inbox.
  """
  deleteCustomInbox(
    """
    Parameters for DeleteCustomInbox
    """
    input: DeleteCustomInboxInput!
  ): DeleteCustomInboxPayload @serviceMapping(to: "github/notifications")

  """
  Deletes a deployment.
  """
  deleteDeployment(
    """
    Parameters for DeleteDeployment
    """
    input: DeleteDeploymentInput!
  ): DeleteDeploymentPayload @serviceMapping(to: "github/deployments_api")

  """
  Delete a discussion and all of its replies.
  """
  deleteDiscussion(
    """
    Parameters for DeleteDiscussion
    """
    input: DeleteDiscussionInput!
  ): DeleteDiscussionPayload @serviceMapping(to: "github/discussions")

  """
  Delete a discussion comment. If it has replies, wipe it instead.
  """
  deleteDiscussionComment(
    """
    Parameters for DeleteDiscussionComment
    """
    input: DeleteDiscussionCommentInput!
  ): DeleteDiscussionCommentPayload @serviceMapping(to: "github/discussions")

  """
  Deletes an environment
  """
  deleteEnvironment(
    """
    Parameters for DeleteEnvironment
    """
    input: DeleteEnvironmentInput!
  ): DeleteEnvironmentPayload @serviceMapping(to: "github/actions")

  """
  Deletes an IP allow list entry.
  """
  deleteIpAllowListEntry(
    """
    Parameters for DeleteIpAllowListEntry
    """
    input: DeleteIpAllowListEntryInput!
  ): DeleteIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list")

  """
  Deletes an Issue object.
  """
  deleteIssue(
    """
    Parameters for DeleteIssue
    """
    input: DeleteIssueInput!
  ): DeleteIssuePayload @serviceMapping(to: "github/issues")

  """
  Deletes an IssueComment object.
  """
  deleteIssueComment(
    """
    Parameters for DeleteIssueComment
    """
    input: DeleteIssueCommentInput!
  ): DeleteIssueCommentPayload @serviceMapping(to: "github/issues")

  """
  Deletes a label.
  """
  deleteLabel(
    """
    Parameters for DeleteLabel
    """
    input: DeleteLabelInput!
  ): DeleteLabelPayload @serviceMapping(to: "github/issues")

  """
  Deletes a label by name.
  """
  deleteLabelByName(
    """
    Parameters for DeleteLabelByName
    """
    input: DeleteLabelByNameInput!
  ): DeleteLabelByNamePayload @serviceMapping(to: "github/issues")

  """
  Deletes a Marketplace listing payment plan.
  """
  deleteMarketplaceListingPlan(
    """
    Parameters for DeleteMarketplaceListingPlan
    """
    input: DeleteMarketplaceListingPlanInput!
  ): DeleteMarketplaceListingPlanPayload @serviceMapping(to: "github/marketplace")

  """
  Delete a bullet point from a Marketplace listing payment plan.
  """
  deleteMarketplaceListingPlanBullet(
    """
    Parameters for DeleteMarketplaceListingPlanBullet
    """
    input: DeleteMarketplaceListingPlanBulletInput!
  ): DeleteMarketplaceListingPlanBulletPayload @serviceMapping(to: "github/marketplace")

  """
  Deletes a Marketplace listing screenshot.
  """
  deleteMarketplaceListingScreenshot(
    """
    Parameters for DeleteMarketplaceListingScreenshot
    """
    input: DeleteMarketplaceListingScreenshotInput!
  ): DeleteMarketplaceListingScreenshotPayload @serviceMapping(to: "github/marketplace")

  """
  Deletes an order preview for a Marketplace user/listing
  """
  deleteMarketplaceOrderPreview(
    """
    Parameters for DeleteMarketplaceOrderPreview
    """
    input: DeleteMarketplaceOrderPreviewInput!
  ): DeleteMarketplaceOrderPreviewPayload @serviceMapping(to: "github/marketplace")

  """
  Delete a mobile device token.
  """
  deleteMobileDeviceToken(
    """
    Parameters for DeleteMobileDeviceToken
    """
    input: DeleteMobileDeviceTokenInput!
  ): DeleteMobileDeviceTokenPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Delete a mobile push notification schedule.
  """
  deleteMobilePushNotificationSchedule(
    """
    Parameters for DeleteMobilePushNotificationSchedule
    """
    input: DeleteMobilePushNotificationScheduleInput!
  ): DeleteMobilePushNotificationSchedulePayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Deletes an organization discussion.
  """
  deleteOrganizationDiscussion(
    """
    Parameters for DeleteOrganizationDiscussion
    """
    input: DeleteOrganizationDiscussionInput!
  ): DeleteOrganizationDiscussionPayload @serviceMapping(to: "github/discussions")

  """
  Deletes an organization discussion comment.
  """
  deleteOrganizationDiscussionComment(
    """
    Parameters for DeleteOrganizationDiscussionComment
    """
    input: DeleteOrganizationDiscussionCommentInput!
  ): DeleteOrganizationDiscussionCommentPayload @serviceMapping(to: "github/discussions")

  """
  Deletes a package tag.
  """
  deletePackageTag(
    """
    Parameters for DeletePackageTag
    """
    input: DeletePackageTagInput!
  ): DeletePackageTagPayload

  """
  Delete a package version.
  """
  deletePackageVersion(
    """
    Parameters for DeletePackageVersion
    """
    input: DeletePackageVersionInput!
  ): DeletePackageVersionPayload

  """
  Deletes a project.
  """
  deleteProject(
    """
    Parameters for DeleteProject
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload @serviceMapping(to: "github/projects")

  """
  Deletes a project card.
  """
  deleteProjectCard(
    """
    Parameters for DeleteProjectCard
    """
    input: DeleteProjectCardInput!
  ): DeleteProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Deletes a project column.
  """
  deleteProjectColumn(
    """
    Parameters for DeleteProjectColumn
    """
    input: DeleteProjectColumnInput!
  ): DeleteProjectColumnPayload @serviceMapping(to: "github/projects")

  """
  Deletes an item from a Project.
  """
  deleteProjectNextItem(
    """
    Parameters for DeleteProjectNextItem
    """
    input: DeleteProjectNextItemInput!
  ): DeleteProjectNextItemPayload @serviceMapping(to: "github/projects")

  """
  Deletes a project workflow.
  """
  deleteProjectWorkflow(
    """
    Parameters for DeleteProjectWorkflow
    """
    input: DeleteProjectWorkflowInput!
  ): DeleteProjectWorkflowPayload @serviceMapping(to: "github/projects")

  """
  Deletes a pull request review.
  """
  deletePullRequestReview(
    """
    Parameters for DeletePullRequestReview
    """
    input: DeletePullRequestReviewInput!
  ): DeletePullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Deletes a pull request review comment.
  """
  deletePullRequestReviewComment(
    """
    Parameters for DeletePullRequestReviewComment
    """
    input: DeletePullRequestReviewCommentInput!
  ): DeletePullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Deletes a recovery token to a user.
  """
  deleteRecoveryToken(
    """
    Parameters for DeleteRecoveryToken
    """
    input: DeleteRecoveryTokenInput!
  ): DeleteRecoveryTokenPayload

  """
  Delete a Git Ref.
  """
  deleteRef(
    """
    Parameters for DeleteRef
    """
    input: DeleteRefInput!
  ): DeleteRefPayload @serviceMapping(to: "github/repo_info")

  """
  Deletes a repository image.
  """
  deleteRepositoryImage(
    """
    Parameters for DeleteRepositoryImage
    """
    input: DeleteRepositoryImageInput!
  ): DeleteRepositoryImagePayload @serviceMapping(to: "github/repo_info")

  """
  Deletes a saved notification thread.
  """
  deleteSavedNotificationThread(
    """
    Parameters for DeleteSavedNotificationThread
    """
    input: DeleteSavedNotificationThreadInput!
  ): DeleteSavedNotificationThreadPayload

  """
  Deletes a team.
  """
  deleteTeam(
    """
    Parameters for DeleteTeam
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """
  Deletes a team discussion.
  """
  deleteTeamDiscussion(
    """
    Parameters for DeleteTeamDiscussion
    """
    input: DeleteTeamDiscussionInput!
  ): DeleteTeamDiscussionPayload @serviceMapping(to: "github/teams")

  """
  Deletes a team discussion comment.
  """
  deleteTeamDiscussionComment(
    """
    Parameters for DeleteTeamDiscussionComment
    """
    input: DeleteTeamDiscussionCommentInput!
  ): DeleteTeamDiscussionCommentPayload @serviceMapping(to: "github/teams")

  """
  Unpin an item from a user's dashboard without modifying other pins.
  """
  deleteUserDashboardPin(
    """
    Parameters for DeleteUserDashboardPin
    """
    input: DeleteUserDashboardPinInput!
  ): DeleteUserDashboardPinPayload @serviceMapping(to: "github/dashboard")

  """
  Deletes a verifiable domain.
  """
  deleteVerifiableDomain(
    """
    Parameters for DeleteVerifiableDomain
    """
    input: DeleteVerifiableDomainInput!
  ): DeleteVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains")

  """
  Remove an approved Marketplace listing from the public Marketplace.
  """
  delistMarketplaceListing(
    """
    Parameters for DelistMarketplaceListing
    """
    input: DelistMarketplaceListingInput!
  ): DelistMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Remove a GitHub Action from the Marketplace.
  """
  delistRepositoryAction(
    """
    Parameters for DelistRepositoryAction
    """
    input: DelistRepositoryActionInput!
  ): DelistRepositoryActionPayload @serviceMapping(to: "github/actions")

  """
  Reassigns a dependency graph package to a new GitHub repository
  """
  dependencyGraphReassignPackage(
    """
    Parameters for DependencyGraphReassignPackage
    """
    input: DependencyGraphReassignPackageInput!
  ): DependencyGraphReassignPackagePayload @serviceMapping(to: "github/dependency_graph")

  """
  Disables a beta feature that the user has been enabled
  """
  disableBetaFeature(
    """
    Parameters for DisableBetaFeature
    """
    input: DisableBetaFeatureInput!
  ): DisableBetaFeaturePayload @serviceMapping(to: "github/feature_management")

  """
  Disable auto merge on the given pull request
  """
  disablePullRequestAutoMerge(
    """
    Parameters for DisablePullRequestAutoMerge
    """
    input: DisablePullRequestAutoMergeInput!
  ): DisablePullRequestAutoMergePayload @serviceMapping(to: "github/merge")

  """
  Disable repositories. ex for TOS violations
  """
  disableRepositories(
    """
    Parameters for DisableRepositories
    """
    input: DisableRepositoriesInput!
  ): DisableRepositoriesPayload @serviceMapping(to: "github/repo_state")

  """
  Dismisses a notice for a user.
  """
  dismissNotice(
    """
    Parameters for DismissNotice
    """
    input: DismissNoticeInput!
  ): DismissNoticePayload @serviceMapping(to: "github/profiles")

  """
  Dismisses an approved or rejected pull request review.
  """
  dismissPullRequestReview(
    """
    Parameters for DismissPullRequestReview
    """
    input: DismissPullRequestReviewInput!
  ): DismissPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Declines a recommended repository for the current viewer.
  """
  dismissRepositoryRecommendation(
    """
    Parameters for DismissRepositoryRecommendation
    """
    input: DismissRepositoryRecommendationInput!
  ): DismissRepositoryRecommendationPayload

  """
  Enables a beta feature that the user has not enrolled in
  """
  enableBetaFeature(
    """
    Parameters for EnableBetaFeature
    """
    input: EnableBetaFeatureInput!
  ): EnableBetaFeaturePayload @serviceMapping(to: "github/feature_management")

  """
  Enable the default auto-merge on a pull request.
  """
  enablePullRequestAutoMerge(
    """
    Parameters for EnablePullRequestAutoMerge
    """
    input: EnablePullRequestAutoMergeInput!
  ): EnablePullRequestAutoMergePayload @serviceMapping(to: "github/merge")

  """
  Enrolls an enrollee into a toggleable feature.
  """
  enrollInToggleableFeature(
    """
    Parameters for EnrollInToggleableFeature
    """
    input: EnrollInToggleableFeatureInput!
  ): EnrollInToggleableFeaturePayload @serviceMapping(to: "github/feature_management")

  """
  Follow a user.
  """
  followUser(
    """
    Parameters for FollowUser
    """
    input: FollowUserInput!
  ): FollowUserPayload @serviceMapping(to: "github/profiles")

  """
  Grant the migrator role to a user or a team.
  """
  grantMigratorRole(
    """
    Parameters for GrantMigratorRole
    """
    input: GrantMigratorRoleInput!
  ): GrantMigratorRolePayload @serviceMapping(to: "github/octoshift")

  """
  Grants a Marketplace listing's OAuth application access to an organization's private data.
  """
  grantOapForMarketplaceListing(
    """
    Parameters for GrantOapForMarketplaceListing
    """
    input: GrantOapForMarketplaceListingInput!
  ): GrantOapForMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Creates a new project by importing columns and a list of issues/PRs.
  """
  importProject(
    """
    Parameters for ImportProject
    """
    input: ImportProjectInput!
  ): ImportProjectPayload @serviceMapping(to: "github/projects")

  """
  increments the download count for a package by 1.
  """
  incrementRegistryPackageDownloadCount(
    """
    Parameters for IncrementRegistryPackageDownloadCount
    """
    input: IncrementRegistryPackageDownloadCountInput!
  ): IncrementRegistryPackageDownloadCountPayload @serviceMapping(to: "github/package_registry")

  """
  Invite someone to become an administrator of the enterprise.
  """
  inviteEnterpriseAdmin(
    """
    Parameters for InviteEnterpriseAdmin
    """
    input: InviteEnterpriseAdminInput!
  ): InviteEnterpriseAdminPayload @serviceMapping(to: "github/admin_experience")

  """
  Invite an organization to join an enterprise.
  """
  inviteEnterpriseOrganization(
    """
    Parameters for InviteEnterpriseOrganization
    """
    input: InviteEnterpriseOrganizationInput!
  ): InviteEnterpriseOrganizationPayload @serviceMapping(to: "github/admin_experience")

  """
  Invite a user to an organization
  """
  inviteToOrganization(
    """
    Parameters for InviteToOrganization
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Creates a repository link for a project.
  """
  linkRepositoryToProject(
    """
    Parameters for LinkRepositoryToProject
    """
    input: LinkRepositoryToProjectInput!
  ): LinkRepositoryToProjectPayload @serviceMapping(to: "github/projects")

  """
  Lock a lockable object
  """
  lockLockable(
    """
    Parameters for LockLockable
    """
    input: LockLockableInput!
  ): LockLockablePayload

  """
  Locks a merge queue for deployment and returns the merge head oid
  """
  lockMergeQueue(
    """
    Parameters for LockMergeQueue
    """
    input: LockMergeQueueInput!
  ): LockMergeQueuePayload @serviceMapping(to: "github/merge")

  """
  Mark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  markDiscussionCommentAsAnswer(
    """
    Parameters for MarkDiscussionCommentAsAnswer
    """
    input: MarkDiscussionCommentAsAnswerInput!
  ): MarkDiscussionCommentAsAnswerPayload @serviceMapping(to: "github/discussions")

  """
  Mark a pull request file as viewed
  """
  markFileAsViewed(
    """
    Parameters for MarkFileAsViewed
    """
    input: MarkFileAsViewedInput!
  ): MarkFileAsViewedPayload @serviceMapping(to: "github/pull_requests")

  """
  Marks a notification as done
  """
  markNotificationAsDone(
    """
    Parameters for MarkNotificationAsDone
    """
    input: MarkNotificationAsDoneInput!
  ): MarkNotificationAsDonePayload @serviceMapping(to: "github/notifications")

  """
  Marks a notification as read
  """
  markNotificationAsRead(
    """
    Parameters for MarkNotificationAsRead
    """
    input: MarkNotificationAsReadInput!
  ): MarkNotificationAsReadPayload @serviceMapping(to: "github/notifications")

  """
  Marks a notification as undone
  """
  markNotificationAsUndone(
    """
    Parameters for MarkNotificationAsUndone
    """
    input: MarkNotificationAsUndoneInput!
  ): MarkNotificationAsUndonePayload @serviceMapping(to: "github/notifications")

  """
  Marks a notification as unread
  """
  markNotificationAsUnread(
    """
    Parameters for MarkNotificationAsUnread
    """
    input: MarkNotificationAsUnreadInput!
  ): MarkNotificationAsUnreadPayload @serviceMapping(to: "github/notifications")

  """
  Marks a notification as read
  """
  markNotificationSubjectAsRead(
    """
    Parameters for MarkNotificationSubjectAsRead
    """
    input: MarkNotificationSubjectAsReadInput!
  ): MarkNotificationSubjectAsReadPayload

  """
  Marks a notification as done
  """
  markNotificationsAsDone(
    """
    Parameters for MarkNotificationsAsDone
    """
    input: MarkNotificationsAsDoneInput!
  ): MarkNotificationsAsDonePayload @serviceMapping(to: "github/notifications")

  """
  Marks multiple notifications as read
  """
  markNotificationsAsRead(
    """
    Parameters for MarkNotificationsAsRead
    """
    input: MarkNotificationsAsReadInput!
  ): MarkNotificationsAsReadPayload @serviceMapping(to: "github/notifications")

  """
  Marks a notification as undone
  """
  markNotificationsAsUndone(
    """
    Parameters for MarkNotificationsAsUndone
    """
    input: MarkNotificationsAsUndoneInput!
  ): MarkNotificationsAsUndonePayload @serviceMapping(to: "github/notifications")

  """
  Marks notifications as unread
  """
  markNotificationsAsUnread(
    """
    Parameters for MarkNotificationsAsUnread
    """
    input: MarkNotificationsAsUnreadInput!
  ): MarkNotificationsAsUnreadPayload @serviceMapping(to: "github/notifications")

  """
  Marks a pull request ready for review.
  """
  markPullRequestReadyForReview(
    """
    Parameters for MarkPullRequestReadyForReview
    """
    input: MarkPullRequestReadyForReviewInput!
  ): MarkPullRequestReadyForReviewPayload @serviceMapping(to: "github/pull_requests")

  """
  Updates the status of a RepositoryDependencyUpdate.
  """
  markRepositoryDependencyUpdateComplete(
    """
    Parameters for MarkRepositoryDependencyUpdateComplete
    """
    input: MarkRepositoryDependencyUpdateCompleteInput!
  ): MarkRepositoryDependencyUpdateCompletePayload @serviceMapping(to: "github/dependabot")

  """
  Updates the status of a RepositoryDependencyUpdate.
  """
  markRepositoryDependencyUpdateErrored(
    """
    Parameters for MarkRepositoryDependencyUpdateErrored
    """
    input: MarkRepositoryDependencyUpdateErroredInput!
  ): MarkRepositoryDependencyUpdateErroredPayload @serviceMapping(to: "github/dependabot")

  """
  Merge a head into a branch.
  """
  mergeBranch(
    """
    Parameters for MergeBranch
    """
    input: MergeBranchInput!
  ): MergeBranchPayload @serviceMapping(to: "github/repo_info")

  """
  Merge a pull request.
  """
  mergePullRequest(
    """
    Parameters for MergePullRequest
    """
    input: MergePullRequestInput!
  ): MergePullRequestPayload @serviceMapping(to: "github/merge")

  """
  Minimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  minimizeComment(
    """
    Parameters for MinimizeComment
    """
    input: MinimizeCommentInput!
  ): MinimizeCommentPayload @serviceMapping(to: "github/community_and_safety")

  """
  Sends a batch of hydro analytics for a user.
  """
  mobileEventsUpdate(
    """
    Parameters for MobileEventsUpdate
    """
    input: MobileEventsUpdateInput!
  ): MobileEventsUpdatePayload @serviceMapping(to: "github/mobile_api")

  """
  Moves a project card to another place.
  """
  moveProjectCard(
    """
    Parameters for MoveProjectCard
    """
    input: MoveProjectCardInput!
  ): MoveProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Moves a project column to another place.
  """
  moveProjectColumn(
    """
    Parameters for MoveProjectColumn
    """
    input: MoveProjectColumnInput!
  ): MoveProjectColumnPayload @serviceMapping(to: "github/projects")

  """
  Allows a repository to be recommended to other users, provided it is neither spammy nor
  private.
  """
  optRepositoryIntoRecommendations(
    """
    Parameters for OptRepositoryIntoRecommendations
    """
    input: OptRepositoryIntoRecommendationsInput!
  ): OptRepositoryIntoRecommendationsPayload

  """
  Blocks a repository from being recommended to other users.
  """
  optRepositoryOutOfRecommendations(
    """
    Parameters for OptRepositoryOutOfRecommendations
    """
    input: OptRepositoryOutOfRecommendationsInput!
  ): OptRepositoryOutOfRecommendationsPayload

  """
  Performs an import of GitHub data
  """
  performImport(
    """
    Parameters for PerformImport
    """
    input: PerformImportInput!
  ): PerformImportPayload @serviceMapping(to: "github/import_export")

  """
  Pin an issue to a repository
  """
  pinIssue(
    """
    Parameters for PinIssue
    """
    input: PinIssueInput!
  ): PinIssuePayload @serviceMapping(to: "github/issues")

  """
  Prepares an import of GitHub data
  """
  prepareImport(
    """
    Parameters for PrepareImport
    """
    input: PrepareImportInput!
  ): PrepareImportPayload @serviceMapping(to: "github/import_export")

  """
  Publish a Marketplace listing plan.
  """
  publishMarketplaceListingPlan(
    """
    Parameters for PublishMarketplaceListingPlan
    """
    input: PublishMarketplaceListingPlanInput!
  ): PublishMarketplaceListingPlanPayload @serviceMapping(to: "github/marketplace")

  """
  Record that Marketplace retargeting notification emails were sent
  """
  recordMarketplaceRetargetingNotifications(
    """
    Parameters for RecordMarketplaceRetargetingNotifications
    """
    input: RecordMarketplaceRetargetingNotificationsInput!
  ): RecordMarketplaceRetargetingNotificationsPayload @serviceMapping(to: "github/marketplace")

  """
  Return a Marketplace listing that has been submitted for approval back to draft state.
  """
  redraftMarketplaceListing(
    """
    Parameters for RedraftMarketplaceListing
    """
    input: RedraftMarketplaceListingInput!
  ): RedraftMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Regenerates the identity provider recovery codes for an enterprise
  """
  regenerateEnterpriseIdentityProviderRecoveryCodes(
    """
    Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes
    """
    input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput!
  ): RegenerateEnterpriseIdentityProviderRecoveryCodesPayload @serviceMapping(to: "github/admin_experience")

  """
  Regenerates a verifiable domain's verification token.
  """
  regenerateVerifiableDomainToken(
    """
    Parameters for RegenerateVerifiableDomainToken
    """
    input: RegenerateVerifiableDomainTokenInput!
  ): RegenerateVerifiableDomainTokenPayload @serviceMapping(to: "github/verifiable_domains")

  """
  Reject all pending deployments under one or more environments
  """
  rejectDeployments(
    """
    Parameters for RejectDeployments
    """
    input: RejectDeploymentsInput!
  ): RejectDeploymentsPayload @serviceMapping(to: "github/actions")

  """
  Reject a Marketplace listing that has been submitted for approval, either
  returning it to draft state or rejecting it permanently.
  """
  rejectMarketplaceListing(
    """
    Parameters for RejectMarketplaceListing
    """
    input: RejectMarketplaceListingInput!
  ): RejectMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Removes assignees from an assignable object.
  """
  removeAssigneesFromAssignable(
    """
    Parameters for RemoveAssigneesFromAssignable
    """
    input: RemoveAssigneesFromAssignableInput!
  ): RemoveAssigneesFromAssignablePayload

  """
  Removes an administrator from the enterprise.
  """
  removeEnterpriseAdmin(
    """
    Parameters for RemoveEnterpriseAdmin
    """
    input: RemoveEnterpriseAdminInput!
  ): RemoveEnterpriseAdminPayload @serviceMapping(to: "github/admin_experience")

  """
  Removes the identity provider from an enterprise
  """
  removeEnterpriseIdentityProvider(
    """
    Parameters for RemoveEnterpriseIdentityProvider
    """
    input: RemoveEnterpriseIdentityProviderInput!
  ): RemoveEnterpriseIdentityProviderPayload @serviceMapping(to: "github/admin_experience")

  """
  Removes a user from all organizations within the enterprise
  """
  removeEnterpriseMember(
    """
    Parameters for RemoveEnterpriseMember
    """
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload @serviceMapping(to: "github/admin_experience")

  """
  Removes an organization from the enterprise
  """
  removeEnterpriseOrganization(
    """
    Parameters for RemoveEnterpriseOrganization
    """
    input: RemoveEnterpriseOrganizationInput!
  ): RemoveEnterpriseOrganizationPayload @serviceMapping(to: "github/admin_experience")

  """
  Removes a support entitlement from an enterprise member.
  """
  removeEnterpriseSupportEntitlement(
    """
    Parameters for RemoveEnterpriseSupportEntitlement
    """
    input: RemoveEnterpriseSupportEntitlementInput!
  ): RemoveEnterpriseSupportEntitlementPayload @serviceMapping(to: "github/admin_experience")

  """
  Removes labels from a Labelable object.
  """
  removeLabelsFromLabelable(
    """
    Parameters for RemoveLabelsFromLabelable
    """
    input: RemoveLabelsFromLabelableInput!
  ): RemoveLabelsFromLabelablePayload @serviceMapping(to: "github/issues")

  """
  Removes outside collaborator from all repositories in an organization.
  """
  removeOutsideCollaborator(
    """
    Parameters for RemoveOutsideCollaborator
    """
    input: RemoveOutsideCollaboratorInput!
  ): RemoveOutsideCollaboratorPayload

  """
  Removes user collaborator from project.
  """
  removeProjectCollaborator(
    """
    Parameters for RemoveProjectCollaborator
    """
    input: RemoveProjectCollaboratorInput!
  ): RemoveProjectCollaboratorPayload @serviceMapping(to: "github/projects")

  """
  Removes a pull request from a merge queue
  """
  removePullRequestFromMergeQueue(
    """
    Parameters for RemovePullRequestFromMergeQueue
    """
    input: RemovePullRequestFromMergeQueueInput!
  ): RemovePullRequestFromMergeQueuePayload @serviceMapping(to: "github/pull_requests")

  """
  Removes a reaction from a subject.
  """
  removeReaction(
    """
    Parameters for RemoveReaction
    """
    input: RemoveReactionInput!
  ): RemoveReactionPayload

  """
  Removes a release from a repository.
  """
  removeReleaseFromRepository(
    """
    Parameters for RemoveReleaseFromRepository
    """
    input: RemoveReleaseFromRepositoryInput!
  ): RemoveReleaseFromRepositoryPayload

  """
  Removes a star from a Starrable.
  """
  removeStar(
    """
    Parameters for RemoveStar
    """
    input: RemoveStarInput!
  ): RemoveStarPayload

  """
  Removes member from team.
  """
  removeTeamMember(
    """
    Parameters for RemoveTeamMember
    """
    input: RemoveTeamMemberInput!
  ): RemoveTeamMemberPayload @serviceMapping(to: "github/teams")

  """
  Removes the team from the project.
  """
  removeTeamProject(
    """
    Parameters for RemoveTeamProject
    """
    input: RemoveTeamProjectInput!
  ): RemoveTeamProjectPayload @serviceMapping(to: "github/teams")

  """
  Remove an upvote to a discussion or discussion comment.
  """
  removeUpvote(
    """
    Parameters for RemoveUpvote
    """
    input: RemoveUpvoteInput!
  ): RemoveUpvotePayload @serviceMapping(to: "github/discussions")

  """
  Reopen a issue.
  """
  reopenIssue(
    """
    Parameters for ReopenIssue
    """
    input: ReopenIssueInput!
  ): ReopenIssuePayload @serviceMapping(to: "github/issues")

  """
  Reopen a pull request.
  """
  reopenPullRequest(
    """
    Parameters for ReopenPullRequest
    """
    input: ReopenPullRequestInput!
  ): ReopenPullRequestPayload @serviceMapping(to: "github/issues")

  """
  Reorder the items pinned to the specified user's dashboard.
  """
  reorderDashboardPins(
    """
    Parameters for ReorderDashboardPins
    """
    input: ReorderDashboardPinsInput!
  ): ReorderDashboardPinsPayload @serviceMapping(to: "github/dashboard")

  """
  Reorder the items pinned to the specified profile.
  """
  reorderProfilePins(
    """
    Parameters for ReorderProfilePins
    """
    input: ReorderProfilePinsInput!
  ): ReorderProfilePinsPayload @serviceMapping(to: "github/profiles")

  """
  Replaces all assignees for assignable object.
  """
  replaceAssigneesForAssignable(
    """
    Parameters for ReplaceAssigneesForAssignable
    """
    input: ReplaceAssigneesForAssignableInput!
  ): ReplaceAssigneesForAssignablePayload @serviceMapping(to: "github/issues")

  """
  Replaces all the labels for a labelable object.
  """
  replaceLabelsForLabelable(
    """
    Parameters for ReplaceLabelsForLabelable
    """
    input: ReplaceLabelsForLabelableInput!
  ): ReplaceLabelsForLabelablePayload @serviceMapping(to: "github/issues")

  """
  Report browser JavaScript errors to Sentry.
  """
  reportBrowserError(
    """
    Parameters for ReportBrowserError
    """
    input: ReportBrowserErrorInput!
  ): ReportBrowserErrorPayload @serviceMapping(to: "github/frontend_systems")

  """
  Internal collection endpoint for various web browser metrics.
  """
  reportBrowserMetrics(
    """
    Parameters for ReportBrowserMetrics
    """
    input: ReportBrowserMetricsInput!
  ): ReportBrowserMetricsPayload @serviceMapping(to: "github/frontend_systems")

  """
  Reports content to repository maintainers
  """
  reportContent(
    """
    Parameters for ReportContent
    """
    input: ReportContentInput!
  ): ReportContentPayload @serviceMapping(to: "github/community_and_safety")

  """
  Request a draft listing be reviewed by GitHub for display in the Marketplace.
  """
  requestMarketplaceListingApproval(
    """
    Parameters for RequestMarketplaceListingApproval
    """
    input: RequestMarketplaceListingApprovalInput!
  ): RequestMarketplaceListingApprovalPayload @serviceMapping(to: "github/marketplace")

  """
  Set review requests on a pull request.
  """
  requestReviews(
    """
    Parameters for RequestReviews
    """
    input: RequestReviewsInput!
  ): RequestReviewsPayload

  """
  Request a draft listing be reviewed by GitHub for display in the Marketplace as an unverified listing.
  """
  requestUnverifiedMarketplaceListingApproval(
    """
    Parameters for RequestUnverifiedMarketplaceListingApproval
    """
    input: RequestUnverifiedMarketplaceListingApprovalInput!
  ): RequestUnverifiedMarketplaceListingApprovalPayload @serviceMapping(to: "github/marketplace")

  """
  Request a draft listing be reviewed by GitHub for display in the Marketplace as an verified listing.
  """
  requestVerifiedMarketplaceListingApproval(
    """
    Parameters for RequestVerifiedMarketplaceListingApproval
    """
    input: RequestVerifiedMarketplaceListingApprovalInput!
  ): RequestVerifiedMarketplaceListingApprovalPayload @serviceMapping(to: "github/marketplace")

  """
  Rerequests an existing check suite.
  """
  rerequestCheckSuite(
    """
    Parameters for RerequestCheckSuite
    """
    input: RerequestCheckSuiteInput!
  ): RerequestCheckSuitePayload @serviceMapping(to: "github/checks_api")

  """
  Updates the sequence of existing Marketplace listing screenshot relative to other screenshots.
  """
  resequenceMarketplaceListingScreenshot(
    """
    Parameters for ResequenceMarketplaceListingScreenshot
    """
    input: ResequenceMarketplaceListingScreenshotInput!
  ): ResequenceMarketplaceListingScreenshotPayload @serviceMapping(to: "github/marketplace")

  """
  Resets passwords and optionally sends security notification email
  """
  resetPasswords(
    """
    Parameters for ResetPasswords
    """
    input: ResetPasswordsInput!
  ): ResetPasswordsPayload @serviceMapping(to: "github/security_incident_response")

  """
  Marks a review thread as resolved.
  """
  resolveReviewThread(
    """
    Parameters for ResolveReviewThread
    """
    input: ResolveReviewThreadInput!
  ): ResolveReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Resolves security incidents. See SecurityIncidentResponse for all possible remediations.
  """
  resolveSecurityIncident(
    """
    Parameters for ResolveSecurityIncident
    """
    input: ResolveSecurityIncidentInput!
  ): ResolveSecurityIncidentPayload @serviceMapping(to: "github/security_incident_response")

  """
  Restores a dismissed a recommended repository for the current viewer.
  """
  restoreRepositoryRecommendation(
    """
    Parameters for RestoreRepositoryRecommendation
    """
    input: RestoreRepositoryRecommendationInput!
  ): RestoreRepositoryRecommendationPayload

  """
  Retire a Marketplace listing plan.
  """
  retireMarketplaceListingPlan(
    """
    Parameters for RetireMarketplaceListingPlan
    """
    input: RetireMarketplaceListingPlanInput!
  ): RetireMarketplaceListingPlanPayload @serviceMapping(to: "github/marketplace")

  """
  Retires a namespace.
  """
  retireNamespace(
    """
    Parameters for RetireNamespace
    """
    input: RetireNamespaceInput!
  ): RetireNamespacePayload @serviceMapping(to: "github/community_and_safety")

  """
  Revoke the migrator role from a user or a team.
  """
  revokeMigratorRole(
    """
    Parameters for RevokeMigratorRole
    """
    input: RevokeMigratorRoleInput!
  ): RevokeMigratorRolePayload @serviceMapping(to: "github/octoshift")

  """
  Run a pending change for a marketplace purchase.
  """
  runPendingMarketplaceChange(
    """
    Parameters for RunPendingMarketplaceChange
    """
    input: RunPendingMarketplaceChangeInput!
  ): RunPendingMarketplaceChangePayload @serviceMapping(to: "github/marketplace")

  """
  Creates or updates the identity provider for an enterprise.
  """
  setEnterpriseIdentityProvider(
    """
    Parameters for SetEnterpriseIdentityProvider
    """
    input: SetEnterpriseIdentityProviderInput!
  ): SetEnterpriseIdentityProviderPayload @serviceMapping(to: "github/admin_experience")

  """
  Updates the user provisioning settings for an enterprise.
  """
  setEnterpriseUserProvisioningSettings(
    """
    Parameters for SetEnterpriseUserProvisioningSettings
    """
    input: SetEnterpriseUserProvisioningSettingsInput!
  ): SetEnterpriseUserProvisioningSettingsPayload @serviceMapping(to: "github/external_identities")

  """
  Set whether users have used anonymizing proxies.
  """
  setHasUsedAnonymizingProxy(
    """
    Parameters for SetHasUsedAnonymizingProxy
    """
    input: SetHasUsedAnonymizingProxyInput!
  ): SetHasUsedAnonymizingProxyPayload @serviceMapping(to: "github/account_classification")

  """
  Set an organization level interaction limit for an organization's public repositories.
  """
  setOrganizationInteractionLimit(
    """
    Parameters for SetOrganizationInteractionLimit
    """
    input: SetOrganizationInteractionLimitInput!
  ): SetOrganizationInteractionLimitPayload @serviceMapping(to: "github/community_and_safety")

  """
  Pin items to a profile.
  """
  setProfilePins(
    """
    Parameters for SetProfilePins
    """
    input: SetProfilePinsInput!
  ): SetProfilePinsPayload @serviceMapping(to: "github/profiles")

  """
  Sets an interaction limit setting for a repository.
  """
  setRepositoryInteractionLimit(
    """
    Parameters for SetRepositoryInteractionLimit
    """
    input: SetRepositoryInteractionLimitInput!
  ): SetRepositoryInteractionLimitPayload @serviceMapping(to: "github/community_and_safety")

  """
  Pin items to a user's dashboard.
  """
  setUserDashboardPins(
    """
    Parameters for SetUserDashboardPins
    """
    input: SetUserDashboardPinsInput!
  ): SetUserDashboardPinsPayload @serviceMapping(to: "github/dashboard")

  """
  Set a user level interaction limit for an user's public repositories.
  """
  setUserInteractionLimit(
    """
    Parameters for SetUserInteractionLimit
    """
    input: SetUserInteractionLimitInput!
  ): SetUserInteractionLimitPayload @serviceMapping(to: "github/community_and_safety")

  """
  Lets the current user agree to the specified GitHub Marketplace terms.
  """
  signMarketplaceAgreement(
    """
    Parameters for SignMarketplaceAgreement
    """
    input: SignMarketplaceAgreementInput!
  ): SignMarketplaceAgreementPayload @serviceMapping(to: "github/marketplace")

  """
  Starts an import of GitHub data
  """
  startImport(
    """
    Parameters for StartImport
    """
    input: StartImportInput!
  ): StartImportPayload @serviceMapping(to: "github/import_export")

  """
  Start a repository migration.
  """
  startRepositoryMigration(
    """
    Parameters for StartRepositoryMigration
    """
    input: StartRepositoryMigrationInput!
  ): StartRepositoryMigrationPayload @serviceMapping(to: "github/octoshift")

  """
  Submits a pending pull request review.
  """
  submitPullRequestReview(
    """
    Parameters for SubmitPullRequestReview
    """
    input: SubmitPullRequestReviewInput!
  ): SubmitPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Suspend a set of accounts.
  """
  suspendAccounts(
    """
    Parameters for SuspendAccounts
    """
    input: SuspendAccountsInput!
  ): SuspendAccountsPayload @serviceMapping(to: "github/account_classification")

  """
  Transfer an issue to a different repository
  """
  transferIssue(
    """
    Parameters for TransferIssue
    """
    input: TransferIssueInput!
  ): TransferIssuePayload @serviceMapping(to: "github/issues")

  """
  Transfer repository ownership
  """
  transferRepository(
    """
    Parameters for TransferRepository
    """
    input: TransferRepositoryInput!
  ): TransferRepositoryPayload

  """
  Unarchives a project card.
  """
  unarchiveProjectCard(
    """
    Parameters for UnarchiveProjectCard
    """
    input: UnarchiveProjectCardInput!
  ): UnarchiveProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Unarchives a repository.
  """
  unarchiveRepository(
    """
    Parameters for UnarchiveRepository
    """
    input: UnarchiveRepositoryInput!
  ): UnarchiveRepositoryPayload @serviceMapping(to: "github/repo_info")

  """
  Unblock action invocation for accounts.
  """
  unblockAccountsActionInvocation(
    """
    Parameters for UnblockAccountsActionInvocation
    """
    input: UnblockAccountsActionInvocationInput!
  ): UnblockAccountsActionInvocationPayload @serviceMapping(to: "github/actions")

  """
  Unblock another user
  """
  unblockUser(
    """
    Parameters for UnblockUser
    """
    input: UnblockUserInput!
  ): UnblockUserPayload @serviceMapping(to: "github/community_and_safety")

  """
  Unblock a user from an organization
  """
  unblockUserFromOrganization(
    """
    Parameters for UnblockUserFromOrganization
    """
    input: UnblockUserFromOrganizationInput!
  ): UnblockUserFromOrganizationPayload @serviceMapping(to: "github/orgs")

  """
  Enrolls an enrollee into a toggleable feature.
  """
  unenrollInToggleableFeature(
    """
    Parameters for UnenrollInToggleableFeature
    """
    input: UnenrollInToggleableFeatureInput!
  ): UnenrollInToggleableFeaturePayload @serviceMapping(to: "github/feature_management")

  """
  Unfollow a user.
  """
  unfollowUser(
    """
    Parameters for UnfollowUser
    """
    input: UnfollowUserInput!
  ): UnfollowUserPayload @serviceMapping(to: "github/profiles")

  """
  Deletes a repository link from a project.
  """
  unlinkRepositoryFromProject(
    """
    Parameters for UnlinkRepositoryFromProject
    """
    input: UnlinkRepositoryFromProjectInput!
  ): UnlinkRepositoryFromProjectPayload @serviceMapping(to: "github/projects")

  """
  Unlocks repositories tied to an import migration
  """
  unlockImportedRepositories(
    """
    Parameters for UnlockImportedRepositories
    """
    input: UnlockImportedRepositoriesInput!
  ): UnlockImportedRepositoriesPayload @serviceMapping(to: "github/import_export")

  """
  Unlock a lockable object
  """
  unlockLockable(
    """
    Parameters for UnlockLockable
    """
    input: UnlockLockableInput!
  ): UnlockLockablePayload

  """
  Unmark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  unmarkDiscussionCommentAsAnswer(
    """
    Parameters for UnmarkDiscussionCommentAsAnswer
    """
    input: UnmarkDiscussionCommentAsAnswerInput!
  ): UnmarkDiscussionCommentAsAnswerPayload @serviceMapping(to: "github/discussions")

  """
  Unmark a pull request file as viewed
  """
  unmarkFileAsViewed(
    """
    Parameters for UnmarkFileAsViewed
    """
    input: UnmarkFileAsViewedInput!
  ): UnmarkFileAsViewedPayload @serviceMapping(to: "github/pull_requests")

  """
  Unmark an issue as a duplicate of another issue.
  """
  unmarkIssueAsDuplicate(
    """
    Parameters for UnmarkIssueAsDuplicate
    """
    input: UnmarkIssueAsDuplicateInput!
  ): UnmarkIssueAsDuplicatePayload @serviceMapping(to: "github/issues")

  """
  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
  """
  unminimizeComment(
    """
    Parameters for UnminimizeComment
    """
    input: UnminimizeCommentInput!
  ): UnminimizeCommentPayload

  """
  Unpin a pinned issue from a repository
  """
  unpinIssue(
    """
    Parameters for UnpinIssue
    """
    input: UnpinIssueInput!
  ): UnpinIssuePayload @serviceMapping(to: "github/issues")

  """
  Marks a review thread as unresolved.
  """
  unresolveReviewThread(
    """
    Parameters for UnresolveReviewThread
    """
    input: UnresolveReviewThreadInput!
  ): UnresolveReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Unretires a namespace making it available to users.
  """
  unretireNamespace(
    """
    Parameters for UnretireNamespace
    """
    input: UnretireNamespaceInput!
  ): UnretireNamespacePayload @serviceMapping(to: "github/community_and_safety")

  """
  Unsuspend a set of accounts.
  """
  unsuspendAccounts(
    """
    Parameters for UnsuspendAccounts
    """
    input: UnsuspendAccountsInput!
  ): UnsuspendAccountsPayload @serviceMapping(to: "github/account_classification")

  """
  Create a new branch protection rule
  """
  updateBranchProtectionRule(
    """
    Parameters for UpdateBranchProtectionRule
    """
    input: UpdateBranchProtectionRuleInput!
  ): UpdateBranchProtectionRulePayload @serviceMapping(to: "github/branch_protection_rule")

  """
  Update a check run
  """
  updateCheckRun(
    """
    Parameters for UpdateCheckRun
    """
    input: UpdateCheckRunInput!
  ): UpdateCheckRunPayload @serviceMapping(to: "github/checks_api")

  """
  Update a check suite
  """
  updateCheckSuite(
    """
    Parameters for UpdateCheckSuite
    """
    input: UpdateCheckSuiteInput!
  ): UpdateCheckSuitePayload @serviceMapping(to: "github/checks_api")

  """
  Modifies the settings of an existing check suite
  """
  updateCheckSuitePreferences(
    """
    Parameters for UpdateCheckSuitePreferences
    """
    input: UpdateCheckSuitePreferencesInput!
  ): UpdateCheckSuitePreferencesPayload @serviceMapping(to: "github/checks_api")

  """
  Update a custom inbox for the current viewer.
  """
  updateCustomInbox(
    """
    Parameters for UpdateCustomInbox
    """
    input: UpdateCustomInboxInput!
  ): UpdateCustomInboxPayload @serviceMapping(to: "github/notifications")

  """
  Update a discussion
  """
  updateDiscussion(
    """
    Parameters for UpdateDiscussion
    """
    input: UpdateDiscussionInput!
  ): UpdateDiscussionPayload @serviceMapping(to: "github/discussions")

  """
  Update the contents of a comment on a Discussion
  """
  updateDiscussionComment(
    """
    Parameters for UpdateDiscussionComment
    """
    input: UpdateDiscussionCommentInput!
  ): UpdateDiscussionCommentPayload @serviceMapping(to: "github/discussions")

  """
  Updates the role of an enterprise administrator.
  """
  updateEnterpriseAdministratorRole(
    """
    Parameters for UpdateEnterpriseAdministratorRole
    """
    input: UpdateEnterpriseAdministratorRoleInput!
  ): UpdateEnterpriseAdministratorRolePayload @serviceMapping(to: "github/admin_experience")

  """
  Sets whether private repository forks are enabled for an enterprise.
  """
  updateEnterpriseAllowPrivateRepositoryForkingSetting(
    """
    Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting
    """
    input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
  ): UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets the base repository permission for organizations in an enterprise.
  """
  updateEnterpriseDefaultRepositoryPermissionSetting(
    """
    Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting
    """
    input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput!
  ): UpdateEnterpriseDefaultRepositoryPermissionSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets whether organization members with admin permissions on a repository can change repository visibility.
  """
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting(
    """
    Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
    """
    input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
  ): UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets the members can create repositories setting for an enterprise.
  """
  updateEnterpriseMembersCanCreateRepositoriesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting
    """
    input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
  ): UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets the members can delete issues setting for an enterprise.
  """
  updateEnterpriseMembersCanDeleteIssuesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting
    """
    input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput!
  ): UpdateEnterpriseMembersCanDeleteIssuesSettingPayload @serviceMapping(to: "github/issues")

  """
  Sets the members can delete repositories setting for an enterprise.
  """
  updateEnterpriseMembersCanDeleteRepositoriesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting
    """
    input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
  ): UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets whether members can invite collaborators are enabled for an enterprise.
  """
  updateEnterpriseMembersCanInviteCollaboratorsSetting(
    """
    Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting
    """
    input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
  ): UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets whether or not an organization admin can make purchases.
  """
  updateEnterpriseMembersCanMakePurchasesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting
    """
    input: UpdateEnterpriseMembersCanMakePurchasesSettingInput!
  ): UpdateEnterpriseMembersCanMakePurchasesSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets the members can update protected branches setting for an enterprise.
  """
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
    """
    input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
  ): UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets the members can view dependency insights for an enterprise.
  """
  updateEnterpriseMembersCanViewDependencyInsightsSetting(
    """
    Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting
    """
    input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
  ): UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload @serviceMapping(to: "github/dependency_graph")

  """
  Sets whether organization projects are enabled for an enterprise.
  """
  updateEnterpriseOrganizationProjectsSetting(
    """
    Parameters for UpdateEnterpriseOrganizationProjectsSetting
    """
    input: UpdateEnterpriseOrganizationProjectsSettingInput!
  ): UpdateEnterpriseOrganizationProjectsSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Updates an enterprise's profile.
  """
  updateEnterpriseProfile(
    """
    Parameters for UpdateEnterpriseProfile
    """
    input: UpdateEnterpriseProfileInput!
  ): UpdateEnterpriseProfilePayload @serviceMapping(to: "github/profiles")

  """
  Sets whether repository projects are enabled for a enterprise.
  """
  updateEnterpriseRepositoryProjectsSetting(
    """
    Parameters for UpdateEnterpriseRepositoryProjectsSetting
    """
    input: UpdateEnterpriseRepositoryProjectsSettingInput!
  ): UpdateEnterpriseRepositoryProjectsSettingPayload @serviceMapping(to: "github/admin_experience")

  """
  Sets whether team discussions are enabled for an enterprise.
  """
  updateEnterpriseTeamDiscussionsSetting(
    """
    Parameters for UpdateEnterpriseTeamDiscussionsSetting
    """
    input: UpdateEnterpriseTeamDiscussionsSettingInput!
  ): UpdateEnterpriseTeamDiscussionsSettingPayload @serviceMapping(to: "github/teams")

  """
  Sets whether two factor authentication is required for all users in an enterprise.
  """
  updateEnterpriseTwoFactorAuthenticationRequiredSetting(
    """
    Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
    """
    input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
  ): UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload @serviceMapping(to: "github/account_login")

  """
  Updates an environment.
  """
  updateEnvironment(
    """
    Parameters for UpdateEnvironment
    """
    input: UpdateEnvironmentInput!
  ): UpdateEnvironmentPayload @serviceMapping(to: "github/actions")

  """
  Updates an existing collection.
  """
  updateExploreCollection(
    """
    Parameters for UpdateExploreCollection
    """
    input: UpdateExploreCollectionInput!
  ): UpdateExploreCollectionPayload @serviceMapping(to: "github/explore")

  """
  Updates a Integration category
  """
  updateIntegrationCategory(
    """
    Parameters for UpdateIntegrationCategory
    """
    input: UpdateIntegrationCategoryInput!
  ): UpdateIntegrationCategoryPayload

  """
  Sets whether an IP allow list is enabled on an owner.
  """
  updateIpAllowListEnabledSetting(
    """
    Parameters for UpdateIpAllowListEnabledSetting
    """
    input: UpdateIpAllowListEnabledSettingInput!
  ): UpdateIpAllowListEnabledSettingPayload @serviceMapping(to: "github/ip_allow_list")

  """
  Updates an IP allow list entry.
  """
  updateIpAllowListEntry(
    """
    Parameters for UpdateIpAllowListEntry
    """
    input: UpdateIpAllowListEntryInput!
  ): UpdateIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list")

  """
  Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
  """
  updateIpAllowListForInstalledAppsEnabledSetting(
    """
    Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting
    """
    input: UpdateIpAllowListForInstalledAppsEnabledSettingInput!
  ): UpdateIpAllowListForInstalledAppsEnabledSettingPayload @serviceMapping(to: "github/ip_allow_list")

  """
  Updates an Issue.
  """
  updateIssue(
    """
    Parameters for UpdateIssue
    """
    input: UpdateIssueInput!
  ): UpdateIssuePayload @serviceMapping(to: "github/issues")

  """
  Updates an IssueComment object.
  """
  updateIssueComment(
    """
    Parameters for UpdateIssueComment
    """
    input: UpdateIssueCommentInput!
  ): UpdateIssueCommentPayload @serviceMapping(to: "github/issues")

  """
  Updates an existing label.
  """
  updateLabel(
    """
    Parameters for UpdateLabel
    """
    input: UpdateLabelInput!
  ): UpdateLabelPayload @serviceMapping(to: "github/issues")

  """
  Updates an existing label by name.
  """
  updateLabelByName(
    """
    Parameters for UpdateLabelByName
    """
    input: UpdateLabelByNameInput!
  ): UpdateLabelByNamePayload @serviceMapping(to: "github/issues")

  """
  Allows updating a Marketplace category.
  """
  updateMarketplaceCategory(
    """
    Parameters for UpdateMarketplaceCategory
    """
    input: UpdateMarketplaceCategoryInput!
  ): UpdateMarketplaceCategoryPayload @serviceMapping(to: "github/marketplace")

  """
  Allows updating a Marketplace listing.
  """
  updateMarketplaceListing(
    """
    Parameters for UpdateMarketplaceListing
    """
    input: UpdateMarketplaceListingInput!
  ): UpdateMarketplaceListingPayload @serviceMapping(to: "github/marketplace")

  """
  Updates an existing Marketplace listing payment plan.
  """
  updateMarketplaceListingPlan(
    """
    Parameters for UpdateMarketplaceListingPlan
    """
    input: UpdateMarketplaceListingPlanInput!
  ): UpdateMarketplaceListingPlanPayload @serviceMapping(to: "github/marketplace")

  """
  Updates a bullet point on a Marketplace listing payment plan.
  """
  updateMarketplaceListingPlanBullet(
    """
    Parameters for UpdateMarketplaceListingPlanBullet
    """
    input: UpdateMarketplaceListingPlanBulletInput!
  ): UpdateMarketplaceListingPlanBulletPayload @serviceMapping(to: "github/marketplace")

  """
  Updates an existing Marketplace listing screenshot.
  """
  updateMarketplaceListingScreenshot(
    """
    Parameters for UpdateMarketplaceListingScreenshot
    """
    input: UpdateMarketplaceListingScreenshotInput!
  ): UpdateMarketplaceListingScreenshotPayload @serviceMapping(to: "github/marketplace")

  """
  Creates/Updates an order preview for a Marketplace user/listing
  """
  updateMarketplaceOrderPreview(
    """
    Parameters for UpdateMarketplaceOrderPreview
    """
    input: UpdateMarketplaceOrderPreviewInput!
  ): UpdateMarketplaceOrderPreviewPayload @serviceMapping(to: "github/marketplace")

  """
  Allows updating a Marketplace story.
  """
  updateMarketplaceStory(
    """
    Parameters for UpdateMarketplaceStory
    """
    input: UpdateMarketplaceStoryInput!
  ): UpdateMarketplaceStoryPayload @serviceMapping(to: "github/marketplace")

  """
  Update existing mobile push notification schedules.
  """
  updateMobilePushNotificationSchedules(
    """
    Parameters for UpdateMobilePushNotificationSchedules
    """
    input: UpdateMobilePushNotificationSchedulesInput!
  ): UpdateMobilePushNotificationSchedulesPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Update mobile push notification settings.
  """
  updateMobilePushNotificationSettings(
    """
    Parameters for UpdateMobilePushNotificationSettings
    """
    input: UpdateMobilePushNotificationSettingsInput!
  ): UpdateMobilePushNotificationSettingsPayload @serviceMapping(to: "github/mobile_push_notifications")

  """
  Updates a network privilege on a repository
  """
  updateNetworkPrivilege(
    """
    Parameters for UpdateNetworkPrivilege
    """
    input: UpdateNetworkPrivilegeInput!
  ): UpdateNetworkPrivilegePayload

  """
  Update the setting to restrict notifications to only verified or approved domains available to an owner.
  """
  updateNotificationRestrictionSetting(
    """
    Parameters for UpdateNotificationRestrictionSetting
    """
    input: UpdateNotificationRestrictionSettingInput!
  ): UpdateNotificationRestrictionSettingPayload @serviceMapping(to: "github/notification_restrictions")

  """
  Updates the user's notification settings.
  """
  updateNotificationSettings(
    """
    Parameters for UpdateNotificationSettings
    """
    input: UpdateNotificationSettingsInput!
  ): UpdateNotificationSettingsPayload @serviceMapping(to: "github/notifications")

  """
  Updates a organization discussion.
  """
  updateOrganizationDiscussion(
    """
    Parameters for UpdateOrganizationDiscussion
    """
    input: UpdateOrganizationDiscussionInput!
  ): UpdateOrganizationDiscussionPayload

  """
  Updates a discussion comment.
  """
  updateOrganizationDiscussionComment(
    """
    Parameters for UpdateOrganizationDiscussionComment
    """
    input: UpdateOrganizationDiscussionCommentInput!
  ): UpdateOrganizationDiscussionCommentPayload

  """
  Updates a package file.
  """
  updatePackageFile(
    """
    Parameters for UpdatePackageFile
    """
    input: UpdatePackageFileInput!
  ): UpdatePackageFilePayload

  """
  Updates a package version.
  """
  updatePackageVersion(
    """
    Parameters for UpdatePackageVersion
    """
    input: UpdatePackageVersionInput!
  ): UpdatePackageVersionPayload @serviceMapping(to: "github/package_registry")

  """
  Update a pending plan change for an account.
  """
  updatePendingPlanChange(
    """
    Parameters for UpdatePendingPlanChange
    """
    input: UpdatePendingPlanChangeInput!
  ): UpdatePendingPlanChangePayload

  """
  Updates an existing project.
  """
  updateProject(
    """
    Parameters for UpdateProject
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload @serviceMapping(to: "github/projects")

  """
  Updates an existing project card.
  """
  updateProjectCard(
    """
    Parameters for UpdateProjectCard
    """
    input: UpdateProjectCardInput!
  ): UpdateProjectCardPayload @serviceMapping(to: "github/projects")

  """
  Updates the permission the user collaborator has on the project.
  """
  updateProjectCollaborator(
    """
    Parameters for UpdateProjectCollaborator
    """
    input: UpdateProjectCollaboratorInput!
  ): UpdateProjectCollaboratorPayload @serviceMapping(to: "github/projects")

  """
  Updates an existing project column.
  """
  updateProjectColumn(
    """
    Parameters for UpdateProjectColumn
    """
    input: UpdateProjectColumnInput!
  ): UpdateProjectColumnPayload @serviceMapping(to: "github/projects")

  """
  Updates a field of an item from a Project.
  """
  updateProjectNextItemField(
    """
    Parameters for UpdateProjectNextItemField
    """
    input: UpdateProjectNextItemFieldInput!
  ): UpdateProjectNextItemFieldPayload @serviceMapping(to: "github/projects")

  """
  Updates an existing project workflow.
  """
  updateProjectWorkflow(
    """
    Parameters for UpdateProjectWorkflow
    """
    input: UpdateProjectWorkflowInput!
  ): UpdateProjectWorkflowPayload @serviceMapping(to: "github/projects")

  """
  Update a pull request
  """
  updatePullRequest(
    """
    Parameters for UpdatePullRequest
    """
    input: UpdatePullRequestInput!
  ): UpdatePullRequestPayload @serviceMapping(to: "github/issues")

  """
  Merge HEAD from upstream branch into pull request branch
  """
  updatePullRequestBranch(
    """
    Parameters for UpdatePullRequestBranch
    """
    input: UpdatePullRequestBranchInput!
  ): UpdatePullRequestBranchPayload @serviceMapping(to: "github/pull_requests")

  """
  Updates the body of a pull request review.
  """
  updatePullRequestReview(
    """
    Parameters for UpdatePullRequestReview
    """
    input: UpdatePullRequestReviewInput!
  ): UpdatePullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Updates a pull request review comment.
  """
  updatePullRequestReviewComment(
    """
    Parameters for UpdatePullRequestReviewComment
    """
    input: UpdatePullRequestReviewCommentInput!
  ): UpdatePullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Update a Git Ref.
  """
  updateRef(
    """
    Parameters for UpdateRef
    """
    input: UpdateRefInput!
  ): UpdateRefPayload @serviceMapping(to: "github/repo_info")

  """
  Creates, updates and/or deletes multiple refs in a repository.

  This mutation takes a list of `RefUpdate`s and performs these updates
  on the repository. All updates are performed atomically, meaning that
  if one of them is rejected, no other ref will be modified.

  `RefUpdate.beforeOid` specifies that the given reference needs to point
  to the given value before performing any updates. A value of
  `0000000000000000000000000000000000000000` can be used to verify that
  the references should not exist.

  `RefUpdate.afterOid` specifies the value that the given reference
  will point to after performing all updates. A value of
  `0000000000000000000000000000000000000000` can be used to delete a
  reference.

  If `RefUpdate.force` is set to `true`, a non-fast-forward updates
  for the given reference will be allowed.
  """
  updateRefs(
    """
    Parameters for UpdateRefs
    """
    input: UpdateRefsInput!
  ): UpdateRefsPayload @serviceMapping(to: "github/ref")

  """
  Update information about a repository.
  """
  updateRepository(
    """
    Parameters for UpdateRepository
    """
    input: UpdateRepositoryInput!
  ): UpdateRepositoryPayload @serviceMapping(to: "github/repo_info")

  """
  Updates an existing Repository Action.
  """
  updateRepositoryAction(
    """
    Parameters for UpdateRepositoryAction
    """
    input: UpdateRepositoryActionInput!
  ): UpdateRepositoryActionPayload @serviceMapping(to: "github/actions")

  """
  Updates the state for subscribable subjects.
  """
  updateSubscription(
    """
    Parameters for UpdateSubscription
    """
    input: UpdateSubscriptionInput!
  ): UpdateSubscriptionPayload

  """
  Updates a subscription item representing a purchase
  """
  updateSubscriptionItem(
    """
    Parameters for UpdateSubscriptionItem
    """
    input: UpdateSubscriptionItemInput!
  ): UpdateSubscriptionItemPayload

  """
  Updates an existing team.
  """
  updateTeam(
    """
    Parameters for UpdateTeam
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """
  Updates a team discussion.
  """
  updateTeamDiscussion(
    """
    Parameters for UpdateTeamDiscussion
    """
    input: UpdateTeamDiscussionInput!
  ): UpdateTeamDiscussionPayload @serviceMapping(to: "github/teams")

  """
  Updates a discussion comment.
  """
  updateTeamDiscussionComment(
    """
    Parameters for UpdateTeamDiscussionComment
    """
    input: UpdateTeamDiscussionCommentInput!
  ): UpdateTeamDiscussionCommentPayload @serviceMapping(to: "github/teams")

  """
  Update team member.
  """
  updateTeamMember(
    """
    Parameters for UpdateTeamMember
    """
    input: UpdateTeamMemberInput!
  ): UpdateTeamMemberPayload @serviceMapping(to: "github/teams")

  """
  Updates team's permission on project.
  """
  updateTeamProject(
    """
    Parameters for UpdateTeamProject
    """
    input: UpdateTeamProjectInput!
  ): UpdateTeamProjectPayload @serviceMapping(to: "github/teams")

  """
  Update team repository.
  """
  updateTeamRepository(
    """
    Parameters for UpdateTeamRepository
    """
    input: UpdateTeamRepositoryInput!
  ): UpdateTeamRepositoryPayload @serviceMapping(to: "github/teams")

  """
  Updates team review assignment.
  """
  updateTeamReviewAssignment(
    """
    Parameters for UpdateTeamReviewAssignment
    """
    input: UpdateTeamReviewAssignmentInput!
  ): UpdateTeamReviewAssignmentPayload @serviceMapping(to: "github/pull_request_reviews")

  """
  Update team repository.
  """
  updateTeamsRepository(
    """
    Parameters for UpdateTeamsRepository
    """
    input: UpdateTeamsRepositoryInput!
  ): UpdateTeamsRepositoryPayload @serviceMapping(to: "github/teams")

  """
  Updates an existing topic.
  """
  updateTopic(
    """
    Parameters for UpdateTopic
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """
  Replaces the repository's topics with the given topics.
  """
  updateTopics(
    """
    Parameters for UpdateTopics
    """
    input: UpdateTopicsInput!
  ): UpdateTopicsPayload

  """
  Update sort order and hidden status of the current user's dashboard navigation links.
  """
  updateUserDashboardNavLinks(
    """
    Parameters for UpdateUserDashboardNavLinks
    """
    input: UpdateUserDashboardNavLinksInput!
  ): UpdateUserDashboardNavLinksPayload @serviceMapping(to: "github/mobile_api")

  """
  Pin an item to a user's dashboard without modifying other pins.
  """
  updateUserDashboardPins(
    """
    Parameters for UpdateUserDashboardPins
    """
    input: UpdateUserDashboardPinsInput!
  ): UpdateUserDashboardPinsPayload @serviceMapping(to: "github/dashboard")

  """
  Update the user's mobile time zone.
  """
  updateUserMobileTimeZone(
    """
    Parameters for UpdateUserMobileTimeZone
    """
    input: UpdateUserMobileTimeZoneInput!
  ): UpdateUserMobileTimeZonePayload @serviceMapping(to: "github/profiles")

  """
  Marks a given token as confirmed
  """
  verifyRecoveryToken(
    """
    Parameters for VerifyRecoveryToken
    """
    input: VerifyRecoveryTokenInput!
  ): VerifyRecoveryTokenPayload

  """
  Verify that a verifiable domain has the expected DNS record.
  """
  verifyVerifiableDomain(
    """
    Parameters for VerifyVerifiableDomain
    """
    input: VerifyVerifiableDomainInput!
  ): VerifyVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains")
}

"""
Types that can be suggested to a user as navigation destinations
"""
union NavigationDestination @internal = Project | Repository | Team

"""
The connection type for NavigationDestination.
"""
type NavigationDestinationConnection @internal {
  """
  A list of edges.
  """
  edges: [NavigationDestinationEdge]

  """
  A list of nodes.
  """
  nodes: [NavigationDestination]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents a viewer's pageview metadata about a suggestion
"""
type NavigationDestinationEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  When the viewer last visited this node
  """
  lastVisitedAt: DateTime

  """
  The item at the end of the edge.
  """
  node: NavigationDestination

  """
  Number of times viewer has visited this node
  """
  visitCount: Int
}

"""
Network address prefix
"""
enum NetworkPrefix @internal @serviceMapping(to: "github/platform_health_data") {
  """
  24-bit network prefix
  """
  SUBNET_24

  """
  32-bit network prefix
  """
  SUBNET_32
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Per-type breakdown of possible nodes accessed
"""
type NodeCountBreakdown @internal @serviceMapping(to: "github/graphql_api") {
  """
  The column number where this field was written
  """
  column: Int!

  """
  The maximum number of nodes that this field may access
  """
  count: Int!

  """
  The field which may access these nodes
  """
  fieldName: String!

  """
  The line number where this field was written
  """
  line: Int!

  """
  The type of node which may be accessed
  """
  typeName: String!
}

"""
Represents a notification filter for the viewer's notifications.
"""
type NotificationFilter implements Node @serviceMapping(to: "github/notifications") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  Returns true if the record is a default filter.
  """
  isDefaultFilter: Boolean!

  """
  The user-provided name of the custom inbox
  """
  name: String!

  """
  The query used to filter the inbox.
  """
  queryString: String!

  """
  The count of unread notifications in the unbox.
  """
  unreadCount: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
Notification filter autocomplete
"""
type NotificationFilterAutocompleteResult @internal @serviceMapping(to: "github/notifications") {
  """
  Notification author - user who authored notification
  """
  authors: [Actor!]!

  """
  Notification owner - user who owns notification list
  """
  owners: [Actor!]!
}

"""
The connection type for NotificationFilter.
"""
type NotificationFilterConnection @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationFilterEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationFilter]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationFilterEdge @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationFilter
}

"""
A list of notification lists the viewer has received a notification for.
"""
type NotificationListWithThreadCount @serviceMapping(to: "github/notifications") {
  """
  The count of notifications for the list with any of the requested statuses.
  """
  count: Int!

  """
  Notification lists which have at least one notification with the requested status.
  """
  list: NotificationsList!

  """
  The count of notifications for the list which are unread (will be 0 if requested statuses does not include UNREAD).
  """
  unreadCount: Int!
}

"""
The connection type for NotificationListWithThreadCount.
"""
type NotificationListWithThreadCountConnection @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationListWithThreadCountEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationListWithThreadCount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationListWithThreadCountEdge @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationListWithThreadCount
}

"""
The reason you received a notification about a subject.
"""
enum NotificationReason @serviceMapping(to: "github/notifications") {
  """
  You were requested for review for deployment.
  """
  APPROVAL_REQUESTED

  """
  You were assigned to the Issue/PR.
  """
  ASSIGN

  """
  You created the thread.
  """
  AUTHOR

  """
  You are subscribed to continuous integration activity.
  """
  CI_ACTIVITY

  """
  You commented on the thread.
  """
  COMMENT

  """
  You accepted an invitation to contribute to the repository.
  """
  INVITATION

  """
  You subscribed to the thread (via an Issue or Pull Request).
  """
  MANUAL

  """
  You were specifically @mentioned in the content.
  """
  MENTION

  """
  A pull request you're subscribed to was marked ready for review.
  """
  READY_FOR_REVIEW

  """
  You were requested for review.
  """
  REVIEW_REQUESTED

  """
  You saved this notification
  """
  SAVED

  """
  You were given credit for contributing to a Security Advisory.
  """
  SECURITY_ADVISORY_CREDIT

  """
  You have access to the notification subject's Dependabot alerts.
  """
  SECURITY_ALERT

  """
  You changed the thread state (for example, closing an Issue or merging a Pull Request).
  """
  STATE_CHANGE

  """
  You are watching the subject of the notification.
  """
  SUBSCRIBED

  """
  You were on a team that was mentioned.
  """
  TEAM_MENTION
}

"""
The possible values for the notification restriction setting.
"""
enum NotificationRestrictionSettingValue @serviceMapping(to: "github/notifications") {
  """
  The setting is disabled for the owner.
  """
  DISABLED

  """
  The setting is enabled for the owner.
  """
  ENABLED
}

"""
The viewer's notification settings
"""
type NotificationSettings @serviceMapping(to: "github/notifications") {
  """
  Did the view enable notifications for continuous integration activity?
  """
  enabledCiNotifications: Boolean!

  """
  Does the viewer get mobile push notifications for comments in which they are directly mentioned?
  """
  getsDirectMentionMobilePush: Boolean!

  """
  Does the viewer get email notifications for threads in which they are participating?
  """
  getsParticipatingEmail: Boolean!

  """
  Does the viewer get web notifications for threads in which they are participating?
  """
  getsParticipatingWeb: Boolean!

  """
  Does the viewer get web notifications for vulnerability alerts?
  """
  getsVulnerabilityAlertsWeb: Boolean!

  """
  Does the viewer get email notifications for threads which they are watching or to which they are subscribed?
  """
  getsWatchingEmail: Boolean!

  """
  Does the viewer get web notifications for threads which they are watching or to which they are subscribed?
  """
  getsWatchingWeb: Boolean!

  """
  The email addresses belonging to this user that can receive notifications.
  """
  notifiableEmails: [String!]!
}

"""
The possible states of a notification.
"""
enum NotificationStatus @serviceMapping(to: "github/notifications") {
  """
  A notification is archived
  """
  ARCHIVED

  """
  A notification is done
  """
  DONE

  """
  A notification is read
  """
  READ

  """
  A notification is unread
  """
  UNREAD
}

"""
Ways in which notification subscription connections can be ordered.
"""
input NotificationSubscriptionOrder @underDevelopment(since: "2019-01-31") @serviceMapping(to: "github/notifications") {
  """
  The direction in which to order nodes.
  """
  direction: OrderDirection!

  """
  The field in which to order nodes by.
  """
  field: NotificationSubscriptionOrderField!
}

"""
Properties by which notification subscription connections can be ordered.
"""
enum NotificationSubscriptionOrderField
  @underDevelopment(since: "2019-01-31")
  @serviceMapping(to: "github/notifications") {
  """
  Allows ordering a list of notification subscriptions by when they were created.
  """
  ID
}

"""
Represents a notification thread for the viewer.
"""
type NotificationThread implements Node @serviceMapping(to: "github/notifications") {
  """
  When the subject is a CheckSuite, the conclusion of that CheckSuite.
  """
  checkSuiteSummaryConclusion: String @internal
  id: ID!

  """
  Archived state of the notification.
  """
  isArchived: Boolean!

  """
  Done state of the notification.
  """
  isDone: Boolean!

  """
  Whether a notification has been saved
  """
  isSaved: Boolean!

  """
  Whether a notification has been starred
  """
  isStarred: Boolean!

  """
  Unread state of the notification.
  """
  isUnread: Boolean!

  """
  The last comment's id
  """
  lastCommentId: String! @internal

  """
  The last comment's type
  """
  lastCommentType: String! @internal

  """
  The last time that notifications were read for this thread.
  """
  lastReadAt: DateTime

  """
  The last time that notifications were updated for this thread.
  """
  lastSummarizedAt: DateTime!

  """
  The last time that a notification was received on this thread for the current user
  """
  lastUpdatedAt: DateTime!

  """
  The notification's list.
  """
  list: NotificationsList!

  """
  The notification's list id
  """
  listId: String!

  """
  The notification's list type
  """
  listType: String!

  """
  The oldest unread author internal anchor
  """
  oldestUnreadItemAnchor: String

  """
  The reason a notification was received.
  """
  reason: NotificationReason

  """
  The last 3 recent participants.
  """
  recentParticipants: [User!]!

  """
  The notification's subject.
  """
  subject: NotificationsSubject!

  """
  Subscription status for the thread
  """
  subscriptionStatus: NotificationThreadSubscriptionState!

  """
  What is the thread subscription type for this notification?
  """
  subscriptionType: String! @internal

  """
  The notification's rollup summary id
  """
  summaryId: String!

  """
  The author of the item being used to summarize the thread.
  """
  summaryItemAuthor: User

  """
  The body text of the item being used to summarize the thread.
  """
  summaryItemBody: String

  """
  The notification's thread id
  """
  threadId: String!

  """
  The notification's thread type
  """
  threadType: String!

  """
  The notification's title
  """
  title: String!

  """
  The number of unread items.
  """
  unreadItemsCount: Int!

  """
  The HTTP URL for the notification thread's subject
  """
  url: URI!
}

"""
A list of notification threads.
"""
type NotificationThreadConnection @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationThreadEdge]

  """
  Offset of first item in the list
  """
  firstItemOffset: Int! @internal

  """
  A list of nodes.
  """
  nodes: [NotificationThread]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationThreadEdge @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationThread
}

"""
Ways in which to filter lists of notification threads.
"""
input NotificationThreadFilters @serviceMapping(to: "github/notifications") {
  """
  Only return notification threads where the list is in the given list
  """
  listIds: [ID!]

  """
  Only return notification threads where the reason is in the list
  """
  reasons: [NotificationReason!]

  """
  Only return saved notifications. All other filters will be ignored.
  """
  savedOnly: Boolean = false

  """
  Only return starred notifications. All other filters will be ignored.
  """
  starredOnly: Boolean = false

  """
  Only return notifications where the status is in the list.
  """
  statuses: [NotificationStatus!]

  """
  Only return matching thread types
  """
  threadTypes: [String!]
}

"""
A subscription to a thread (e.g. an Issue) that allows the user to receive notifications.
"""
type NotificationThreadSubscription @underDevelopment(since: "2019-01-24") @serviceMapping(to: "github/notifications") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime

  """
  Identifies the primary key from the database.
  """
  databaseId: BigInt @internal

  """
  The parent object of the thread.
  """
  list: NotificationsList!

  """
  The thread object.
  """
  thread: NotificationsSubject
}

"""
The connection type for NotificationThreadSubscription.
"""
type NotificationThreadSubscriptionConnection
  @underDevelopment(since: "2019-01-24")
  @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationThreadSubscriptionEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationThreadSubscription]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationThreadSubscriptionEdge
  @underDevelopment(since: "2019-01-24")
  @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationThreadSubscription
}

"""
The possible types of notification thread subscription lists.
"""
enum NotificationThreadSubscriptionListType @serviceMapping(to: "github/notifications") {
  """
  Repository
  """
  REPOSITORY

  """
  Team
  """
  TEAM
}

"""
The possible subscription states of a notification thread.
"""
enum NotificationThreadSubscriptionState @serviceMapping(to: "github/notifications") {
  """
  The thread's list is ignored.
  """
  LIST_IGNORED

  """
  The thread's list is subscribed to.
  """
  LIST_SUBSCRIBED

  """
  The thread is subscribed to.
  """
  THREAD_SUBSCRIBED

  """
  The thread's type is subscribed to.
  """
  THREAD_TYPE_SUBSCRIBED

  """
  The thread is not subscribed to.
  """
  UNSUBSCRIBED
}

"""
Represents a notification unwatch suggestion for the viewer.
"""
type NotificationUnwatchSuggestion @internal @serviceMapping(to: "github/notifications") {
  """
  The version of the ML algorithm the suggestions were generated from.
  """
  algorithmVersion: String!

  """
  The repository
  """
  repository: Repository!

  """
  The strength of the suggestion from the ML algorithm.
  """
  score: Float!

  """
  The last time the suggestions for a user were generated.
  """
  snapshotDate: String!
}

"""
The connection type for NotificationUnwatchSuggestion.
"""
type NotificationUnwatchSuggestionConnection @internal @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationUnwatchSuggestionEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationUnwatchSuggestion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationUnwatchSuggestionEdge @internal @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationUnwatchSuggestion
}

"""
The parent object that the notification thread's subject belongs to.
"""
union NotificationsList @serviceMapping(to: "github/notifications") = Organization | Repository | Team | User

"""
The connection type for NotificationsList.
"""
type NotificationsListConnection @serviceMapping(to: "github/notifications") {
  """
  A list of edges.
  """
  edges: [NotificationsListEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationsList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationsListEdge @serviceMapping(to: "github/notifications") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationsList
}

"""
The notification's subject.
"""
union NotificationsSubject @serviceMapping(to: "github/notifications") =
    AdvisoryCredit
  | CheckSuite
  | Commit
  | Discussion
  | Gist
  | Issue
  | PullRequest
  | Release
  | RepositoryAdvisory
  | RepositoryDependabotAlertsThread
  | RepositoryInvitation
  | RepositoryVulnerabilityAlert
  | SecurityAdvisory
  | TeamDiscussion
  | WorkflowRun

"""
Represents an OAuth application access
"""
type OauthAccess @internal {
  """
  The last time this authorization was used to perform an action
  """
  accessedAt: DateTime

  """
  The associated OAuth application.
  """
  application: OauthApplication

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The list of scopes this Credential is authorized for as a sorted, comma-separated String
  """
  scopes: String!

  """
  The last eight characters of this OauthAccess
  """
  tokenLastEight: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user associated with this access.
  """
  user: User
}

"""
The connection type for OauthAccess.
"""
type OauthAccessConnection @internal {
  """
  A list of edges.
  """
  edges: [OauthAccessEdge]

  """
  A list of nodes.
  """
  nodes: [OauthAccess]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OauthAccessEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OauthAccess
}

"""
Represents an OAuth application
"""
type OauthApplication implements MarketplaceIntegratable @internal {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Does the application belongs to GitHub?
  """
  isGitHubOwned: Boolean!

  """
  The key of the application.
  """
  key: String!

  """
  A URL pointing to the application's logo.
  """
  logoUrl(
    """
    The size of the resulting image.
    """
    size: Int
  ): URI!

  """
  The name of the application.
  """
  name: String

  """
  The hex color code for the background color this object's icon should be displayed on.
  """
  preferredBackgroundColor: String! @internal

  """
  The HTTP path for this oauth app's stafftools page
  """
  stafftoolsResourcePath: URI!

  """
  The HTTP URL for this oauth app's stafftools page
  """
  stafftoolsUrl: URI!

  """
  The URL to the application's homepage.
  """
  url: URI

  """
  The user associated with this application.
  """
  user: User
}

"""
Metadata for an audit entry with action oauth_application.*
"""
interface OauthApplicationAuditEntryData @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI
}

"""
The connection type for OauthApplication.
"""
type OauthApplicationConnection @internal {
  """
  A list of edges.
  """
  edges: [OauthApplicationEdge]

  """
  A list of nodes.
  """
  nodes: [OauthApplication]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a oauth_application.create event.
"""
type OauthApplicationCreateAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The application URL of the OAuth Application.
  """
  applicationUrl: URI

  """
  The callback URL of the OAuth Application.
  """
  callbackUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether this was a full trust OAuth Application.
  """
  isFullTrust: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The rate limit of the OAuth Application.
  """
  rateLimit: Int

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The state of the OAuth Application.
  """
  state: OauthApplicationCreateAuditEntryState

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The state of an OAuth Application when it was created.
"""
enum OauthApplicationCreateAuditEntryState @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth Application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""
Audit log entry for a oauth_application.destroy
"""
type OauthApplicationDestroyAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The application URL of the OAuth Application.
  """
  applicationUrl: URI

  """
  The callback URL of the OAuth Application.
  """
  callbackUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether this was a full trust OAuth Application.
  """
  isFullTrust: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The rate limit of the OAuth Application.
  """
  rateLimit: Int

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The state of the OAuth Application.
  """
  state: OauthApplicationDestroyAuditEntryState

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The state of an OAuth Application when it was deleted.
"""
enum OauthApplicationDestroyAuditEntryState
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth Application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""
An edge in a connection.
"""
type OauthApplicationEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OauthApplication
}

"""
Audit log entry for a oauth_application.reset_secret
"""
type OauthApplicationResetSecretAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The application URL of the OAuth Application.
  """
  applicationUrl: URI

  """
  The callback URL of the OAuth Application.
  """
  callbackUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether this was a full trust OAuth Application.
  """
  isFullTrust: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The rate limit of the OAuth Application.
  """
  rateLimit: Int

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The state of the OAuth Application.
  """
  state: OauthApplicationResetSecretAuditEntryState

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The state of an OAuth Application when its secret was reset.
"""
enum OauthApplicationResetSecretAuditEntryState
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth Application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""
Audit log entry for a oauth_application.revoke_tokens
"""
type OauthApplicationRevokeTokensAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The application URL of the OAuth Application.
  """
  applicationUrl: URI

  """
  The callback URL of the OAuth Application.
  """
  callbackUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether this was a full trust OAuth Application.
  """
  isFullTrust: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The rate limit of the OAuth Application.
  """
  rateLimit: Int

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  The number of revoked tokens.
  """
  revokedTokensCount: Int

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The state of the OAuth Application.
  """
  state: OauthApplicationRevokeTokensAuditEntryState

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The state of an OAuth Application when its tokens were revoked.
"""
enum OauthApplicationRevokeTokensAuditEntryState @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth Application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""
Audit log entry for a oauth_application.transfer
"""
type OauthApplicationTransferAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The application URL of the OAuth Application.
  """
  applicationUrl: URI

  """
  The callback URL of the OAuth Application.
  """
  callbackUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether this was a full trust OAuth Application.
  """
  isFullTrust: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The rate limit of the OAuth Application.
  """
  rateLimit: Int

  """
  The receiver of the OAuth Application.
  """
  receiver: OauthApplicationTransferAuditEntryAccount

  """
  The database ID of the receiver of the OAuth Application.
  """
  receiverDatabaseId: Int @internal

  """
  The username of the receiver of the OAuth Application.
  """
  receiverName: String

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  The user requesting the transfer.
  """
  requestingUser: User

  """
  The database ID of the user requesting the transfer.
  """
  requestingUserDatabaseId: Int @internal

  """
  The username of the user requesting the transfer.
  """
  requestingUserLogin: String

  """
  The user responding to the transfer request.
  """
  respondingUser: User

  """
  The database ID of the user responding to the transfer request.
  """
  respondingUserDatabaseId: Int @internal

  """
  The username of the user responding to the transfer request.
  """
  respondingUserLogin: String

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The user or organization sending the OAuth Application.
  """
  sender: OauthApplicationTransferAuditEntryAccount

  """
  The database ID of the sender of the OAuth Application.
  """
  senderDatabaseId: Int @internal

  """
  The username of the user or organization sending the OAuth Application.
  """
  senderName: String

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The state of the OAuth Application.
  """
  state: OauthApplicationTransferAuditEntryState

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types that can own an OAuth Application.
"""
union OauthApplicationTransferAuditEntryAccount
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") =
    Organization
  | User

"""
The state of an OAuth Application when its tokens were revoked.
"""
enum OauthApplicationTransferAuditEntryState
  @underDevelopment(since: "2019-05-06")
  @serviceMapping(to: "github/audit_logs") {
  """
  The OAuth Application was active and allowed to have OAuth Accesses.
  """
  ACTIVE

  """
  The OAuth Application was in the process of being deleted.
  """
  PENDING_DELETION

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED
}

"""
The corresponding operation type for the action
"""
enum OperationType @serviceMapping(to: "github/audit_logs") {
  """
  An existing resource was accessed
  """
  ACCESS

  """
  A resource performed an authentication event
  """
  AUTHENTICATION

  """
  A new resource was created
  """
  CREATE

  """
  An existing resource was modified
  """
  MODIFY

  """
  An existing resource was removed
  """
  REMOVE

  """
  An existing resource was restored
  """
  RESTORE

  """
  An existing resource was transferred between multiple resources
  """
  TRANSFER
}

"""
Autogenerated input type of OptRepositoryIntoRecommendations
"""
input OptRepositoryIntoRecommendationsInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of OptRepositoryIntoRecommendations
"""
type OptRepositoryIntoRecommendationsPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was opted in.
  """
  repository: Repository
}

"""
Autogenerated input type of OptRepositoryOutOfRecommendations
"""
input OptRepositoryOutOfRecommendationsInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of OptRepositoryOutOfRecommendations
"""
type OptRepositoryOutOfRecommendationsPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was opted out.
  """
  repository: Repository
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC

  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
Audit log entry for a org.accept_business_invitation
"""
type OrgAcceptBusinessInvitationAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.add_billing_manager
"""
type OrgAddBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The email address used to invite a billing manager for the organization.
  """
  invitationEmail: String

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.add_member
"""
type OrgAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The permission level of the member added to the organization.
  """
  permission: OrgAddMemberAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The permissions available to members on an Organization.
"""
enum OrgAddMemberAuditEntryPermission @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators to repositories.
  """
  ADMIN

  """
  Can read and clone repositories.
  """
  READ
}

"""
Audit log entry for a org.audit_log_export
"""
type OrgAuditLogExportAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The search query used to filter Audit Log entries for export.
  """
  query: String

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The total number of Audit Log entries that were exported.
  """
  totalEntries: Int

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.billing_signup_error
"""
type OrgBillingSignupErrorAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The billing plan for the Organization.
  """
  billingPlan: OrgBillingSignupErrorAuditEntryBillingPlan

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The billing email address for the Organization.
  """
  email: String

  """
  The error that occurred during the signup process.
  """
  error: String @internal

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The billing plans available for Organizations.
"""
enum OrgBillingSignupErrorAuditEntryBillingPlan
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  Team Plan
  """
  BUSINESS

  """
  Enterprise Cloud Plan
  """
  BUSINESS_PLUS
}

"""
Audit log entry for a org.block_user
"""
type OrgBlockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The blocked user.
  """
  blockedUser: User

  """
  The database ID of the blocked user.
  """
  blockedUserDatabaseId: Int @internal

  """
  The username of the blocked user.
  """
  blockedUserName: String

  """
  The HTTP path for the blocked user.
  """
  blockedUserResourcePath: URI

  """
  The HTTP URL for the blocked user.
  """
  blockedUserUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the blocking User or Organization was marked spammy.
  """
  isSpammy: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.cancel_business_invitation
"""
type OrgCancelBusinessInvitationAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.cancel_invitation event.
"""
type OrgCancelInvitationAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the inviting User or Organization was marked spammy.
  """
  isSpammy: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The cancelled organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.disable_collaborators_only event.
"""
type OrgConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.disable_contributors_only event.
"""
type OrgConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.disable_sockpuppet_disallowed event.
"""
type OrgConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.enable_collaborators_only event.
"""
type OrgConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.enable_contributors_only event.
"""
type OrgConfigEnableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.config.enable_sockpuppet_disallowed event.
"""
type OrgConfigEnableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.create event.
"""
type OrgCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The billing plan for the Organization.
  """
  billingPlan: OrgCreateAuditEntryBillingPlan

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The SHA hash value for the terms of service when the organization was created.
  """
  termsOfServiceSha: String @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The billing plans available for organizations.
"""
enum OrgCreateAuditEntryBillingPlan @serviceMapping(to: "github/audit_logs") {
  """
  Team Plan
  """
  BUSINESS

  """
  Enterprise Cloud Plan
  """
  BUSINESS_PLUS

  """
  Free Plan
  """
  FREE

  """
  Tiered Per Seat Plan
  """
  TIERED_PER_SEAT

  """
  Legacy Unlimited Plan
  """
  UNLIMITED
}

"""
Audit log entry for a org.disable_oauth_app_restrictions event.
"""
type OrgDisableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.disable_saml event.
"""
type OrgDisableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/external_auth") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The number of filled seats the organization had.
  """
  filledSeatsCount: Int @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the organization enforced that all new members be linked with this SAML provider.
  """
  isEnforced: Boolean @internal

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Identifies the date and time when the organization was created.
  """
  organizationCreatedAt: DateTime @internal

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The number of pending invitations the organization had.
  """
  pendingInvitationCount: Int @internal

  """
  A reason why SAML was disabled for this provider.
  """
  reason: String @internal

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The number of seats the organization had.
  """
  seatsCount: Int @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/external_auth") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The SAML provider's digest algorithm URL.
  """
  digestMethodUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The number of filled seats the organization had.
  """
  filledSeatsCount: Int @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the organization enforced that all new members be linked with this SAML provider.
  """
  isEnforced: Boolean @internal

  """
  The SAML provider's issuer URL.
  """
  issuerUrl: URI

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  Identifies the date and time when the organization was created.
  """
  organizationCreatedAt: DateTime @internal

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The number of pending invitations the organization had.
  """
  pendingInvitationCount: Int @internal

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The number of seats the organization had.
  """
  seatsCount: Int @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The SAML provider's signature algorithm URL.
  """
  signatureMethodUrl: URI

  """
  The SAML provider's single sign-on URL.
  """
  singleSignOnUrl: URI

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The email address of the organization invitation.
  """
  email: String

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the inviting User or Organization was marked spammy.
  """
  isSpammy: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The organization invitation.
  """
  organizationInvitation: OrganizationInvitation

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The OAuth Application associated with the Audit Entry.
  """
  oauthApplication: OauthApplication @internal

  """
  The database ID of the OAuth Application.
  """
  oauthApplicationDatabaseId: Int @internal

  """
  The name of the OAuth Application.
  """
  oauthApplicationName: String

  """
  The HTTP path for the OAuth Application
  """
  oauthApplicationResourcePath: URI

  """
  The HTTP URL for the OAuth Application
  """
  oauthApplicationUrl: URI

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal

  """
  A descriptive reason for the billing manager being removed.
  """
  humanReason: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The reason for the billing manager being removed.
  """
  reason: OrgRemoveBillingManagerAuditEntryReason

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The reason a billing manager was removed from an Organization.
"""
enum OrgRemoveBillingManagerAuditEntryReason @serviceMapping(to: "github/audit_logs") {
  """
  SAML external identity missing
  """
  SAML_EXTERNAL_IDENTITY_MISSING

  """
  SAML SSO enforcement requires an external identity
  """
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.remove_member event.
"""
type OrgRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal

  """
  A descriptive reason for the member being removed.
  """
  humanReason: String @internal
  id: ID!

  """
  The types of membership the member has with the organization.
  """
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The reason for the member being removed.
  """
  reason: OrgRemoveMemberAuditEntryReason

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The type of membership a user has with an Organization.
"""
enum OrgRemoveMemberAuditEntryMembershipType @serviceMapping(to: "github/audit_logs") {
  """
  Organization administrators have full access and can change several settings,
  including the names of repositories that belong to the Organization and Owners
  team membership. In addition, organization admins can delete the organization
  and all of its repositories.
  """
  ADMIN

  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

  """
  A direct member is a user that is a member of the Organization.
  """
  DIRECT_MEMBER

  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR

  """
  An unaffiliated collaborator is a person who is not a member of the
  Organization and does not have access to any repositories in the Organization.
  """
  UNAFFILIATED
}

"""
The reason a member was removed from an Organization.
"""
enum OrgRemoveMemberAuditEntryReason @serviceMapping(to: "github/audit_logs") {
  """
  SAML external identity missing
  """
  SAML_EXTERNAL_IDENTITY_MISSING

  """
  SAML SSO enforcement requires an external identity
  """
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  """
  User was removed from organization during account recovery
  """
  TWO_FACTOR_ACCOUNT_RECOVERY

  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  """
  User account has been deleted
  """
  USER_ACCOUNT_DELETED
}

"""
Audit log entry for a org.remove_outside_collaborator event.
"""
type OrgRemoveOutsideCollaboratorAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal

  """
  A descriptive reason for the outside collaborator being removed from the Organization.
  """
  humanReason: String @internal
  id: ID!

  """
  The types of membership the outside collaborator has with the organization.
  """
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The reason for the outside collaborator being removed from the Organization.
  """
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The type of membership a user has with an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType @serviceMapping(to: "github/audit_logs") {
  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

  """
  An outside collaborator is a person who isn't explicitly a member of the
  Organization, but who has Read, Write, or Admin permissions to one or more
  repositories in the organization.
  """
  OUTSIDE_COLLABORATOR

  """
  An unaffiliated collaborator is a person who is not a member of the
  Organization and does not have access to any repositories in the organization.
  """
  UNAFFILIATED
}

"""
The reason an outside collaborator was removed from an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryReason @serviceMapping(to: "github/audit_logs") {
  """
  SAML external identity missing
  """
  SAML_EXTERNAL_IDENTITY_MISSING

  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.rename event.
"""
type OrgRenameAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The former organization name.
  """
  organizationNameWas: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.restore_member event.
"""
type OrgRestoreMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  The number of custom email routings for the restored member.
  """
  restoredCustomEmailRoutingsCount: Int

  """
  The number of issue assignments for the restored member.
  """
  restoredIssueAssignmentsCount: Int

  """
  Restored organization membership objects.
  """
  restoredMemberships: [OrgRestoreMemberAuditEntryMembership!]

  """
  The number of restored memberships.
  """
  restoredMembershipsCount: Int

  """
  The number of repositories of the restored member.
  """
  restoredRepositoriesCount: Int

  """
  The number of starred repositories for the restored member.
  """
  restoredRepositoryStarsCount: Int

  """
  The number of watched repositories for the restored member.
  """
  restoredRepositoryWatchesCount: Int

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Types of memberships that can be restored for an Organization member.
"""
union OrgRestoreMemberAuditEntryMembership @serviceMapping(to: "github/audit_logs") =
    OrgRestoreMemberMembershipOrganizationAuditEntryData
  | OrgRestoreMemberMembershipRepositoryAuditEntryData
  | OrgRestoreMemberMembershipTeamAuditEntryData

"""
Metadata for an organization membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipOrganizationAuditEntryData implements OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI
}

"""
Metadata for a repository membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipRepositoryAuditEntryData implements RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI
}

"""
Metadata for a team membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipTeamAuditEntryData implements TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI
}

"""
Audit log entry for a org.unblock_user
"""
type OrgUnblockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  The user being unblocked by the organization.
  """
  blockedUser: User

  """
  The database ID of the blocked user.
  """
  blockedUserDatabaseId: Int @internal

  """
  The username of the blocked user.
  """
  blockedUserName: String

  """
  The HTTP path for the blocked user.
  """
  blockedUserResourcePath: URI

  """
  The HTTP URL for the blocked user.
  """
  blockedUserUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the blocking User or Organization was marked spammy.
  """
  isSpammy: Boolean @internal

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a org.update_default_repository_permission
"""
type OrgUpdateDefaultRepositoryPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The new base repository permission level for the organization.
  """
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  """
  The former base repository permission level for the organization.
  """
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The default permission a repository can have in an Organization.
"""
enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators to repositories.
  """
  ADMIN

  """
  No default permission value.
  """
  NONE

  """
  Can read and clone repositories.
  """
  READ

  """
  Can read, clone and push to repositories.
  """
  WRITE
}

"""
Audit log entry for a org.update_member event.
"""
type OrgUpdateMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The new member permission level for the organization.
  """
  permission: OrgUpdateMemberAuditEntryPermission

  """
  The former member permission level for the organization.
  """
  permissionWas: OrgUpdateMemberAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The permissions available to members on an Organization.
"""
enum OrgUpdateMemberAuditEntryPermission @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators to repositories.
  """
  ADMIN

  """
  Can read and clone repositories.
  """
  READ
}

"""
Audit log entry for a org.update_member_repository_creation_permission event.
"""
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Can members create repositories in the organization.
  """
  canCreateRepositories: Boolean

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The permission for visibility level of repositories for this organization.
  """
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

"""
The permissions available for repository creation on an Organization.
"""
enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  All organization members are restricted from creating any repositories.
  """
  ALL

  """
  All organization members are restricted from creating internal repositories.
  """
  INTERNAL

  """
  All organization members are allowed to create any repositories.
  """
  NONE

  """
  All organization members are restricted from creating private repositories.
  """
  PRIVATE

  """
  All organization members are restricted from creating private or internal repositories.
  """
  PRIVATE_INTERNAL

  """
  All organization members are restricted from creating public repositories.
  """
  PUBLIC

  """
  All organization members are restricted from creating public or internal repositories.
  """
  PUBLIC_INTERNAL

  """
  All organization members are restricted from creating public or private repositories.
  """
  PUBLIC_PRIVATE
}

"""
Audit log entry for a org.update_member_repository_invitation_permission event.
"""
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Can outside collaborators be invited to repositories in the organization.
  """
  canInviteOutsideCollaboratorsToRepositories: Boolean

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type Organization implements Actor & Billable & FeatureFlaggable & MarketplaceListingOwner & MemberStatusable & Node & PackageOwner & PackageSearch & PlanOwner & ProfileOwner & ProjectNextOwner & ProjectOwner & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable
  @serviceMapping(to: "github/orgs") {
  """
  Indicates if action invocation is blocked for this organization
  """
  actionInvocationBlocked: Boolean! @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  actionsStatus: ActionsStatus @internal

  """
  Whether the organization has an active Enterprise Cloud Trial
  """
  activeEnterpriseCloudTrial: Boolean! @internal

  """
  Returns the listing plan for which this owner has an active subscription, for the
  specified Marketplace listing.
  """
  activeListingPlan(
    """
    The short name of the listing used in its URL.
    """
    listingSlug: String!
  ): MarketplaceListingPlan

  """
  Organization information only visible to admin
  """
  adminInfo: OrganizationAdminInfo

  """
  A list of all of the admins for this organization
  """
  admins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection! @internal

  """
  The HTTP path for organization announcements
  """
  announcementsResourcePath: URI! @underDevelopment(since: "2019-06-10")

  """
  The HTTP URL for organization announcements
  """
  announcementsUrl: URI! @underDevelopment(since: "2019-06-10")

  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Filter to only a particular kind of pinnable item.
    """
    type: PinnableItemType
  ): Boolean!

  """
  Audit log entries of the organization
  """
  auditLog(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned audit log entries.
    """
    orderBy: AuditLogOrder = {field: CREATED_AT, direction: DESC}

    """
    The query string to filter audit entries
    """
    query: String
  ): OrganizationAuditEntryConnection!

  """
  A URL pointing to the organization's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The HTTP path for this organization's billing settings.
  """
  billingSettingsResourcePath: URI! @underDevelopment(since: "2018-06-28")

  """
  The HTTP URL for this organization's billing settings.
  """
  billingSettingsUrl: URI! @underDevelopment(since: "2018-06-28")

  """
  Transaction records for all billing events tied to an account.
  """
  billingTransactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the transactions in descending order.
    """
    descending: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter out refunds and transactions without a payment associated.
    """
    sales: Boolean
  ): BillingTransactionConnection @internal

  """
  The organization's public profile company.
  """
  company: String @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The current credit on this account
  """
  currentCredit: Money @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  For repositories owned by this user/organization, finds the repositories they depend on.
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Whether only this user/organization's public repositories should be considered when looking for dependencies.
    """
    onlyOwnedPublicRepos: Boolean = false

    """
    Whether only dependencies that are public repositories should be returned.
    """
    onlyPublicDependencies: Boolean = false

    """
    Filter dependencies by the package manager they use.
    """
    packageManager: SecurityAdvisoryEcosystem

    """
    How to order the dependencies.
    """
    sortBy: RepositoryOwnerDependenciesOrderField = PACKAGE_NAME

    """
    Whether only repositories whose owner has a GitHub Sponsors listing should be returned.
    """
    sponsorableOnly: Boolean = false
  ): RepositoryConnection! @underDevelopment(since: "2020-11-18")

  """
  The organization's public profile description.
  """
  description: String

  """
  The organization's public profile description rendered to HTML.
  """
  descriptionHTML: String

  """
  The digest algorithm used to sign SAML requests for an Organization's identity provider.
  """
  digestMethod: URI @internal

  """
  Find an organization discussion by its number.
  """
  discussion(
    """
    The sequence number of the discussion to find.
    """
    number: Int!
  ): OrganizationDiscussion @underDevelopment(since: "2019-05-03")

  """
  A list of organization discussions.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If provided, filters discussions according to whether or not they are pinned.
    """
    isPinned: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): OrganizationDiscussionConnection! @underDevelopment(since: "2019-05-03")

  """
  The HTTP path for dismissing organization notices.
  """
  dismissNoticeResourcePath: URI! @internal

  """
  The HTTP URL for dismissing organization notices.
  """
  dismissNoticeUrl: URI! @internal

  """
  The HTTP path for dismissing the teams banner
  """
  dismissTeamsBannerResourcePath: URI! @internal

  """
  The HTTP URL for dismissing the teams banner
  """
  dismissTeamsBannerUrl: URI! @internal

  """
  A list of domains owned by the organization.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter by if the domain is approved.
    """
    isApproved: Boolean = null

    """
    Filter by if the domain is verified.
    """
    isVerified: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for verifiable domains returned.
    """
    orderBy: VerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): VerifiableDomainConnection

  """
  List of eligible parent teams
  """
  eligibleParentTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Find eligible parents for this team
    """
    forTeam: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The query string to filter teams by name with
    """
    query: String
  ): TeamConnection! @internal

  """
  The organization's public email.
  """
  email: String

  """
  The organization's enterprise account
  """
  enterprise: Enterprise @underDevelopment(since: "2019-06-28")

  """
  External Identities of organization members provisioned by the Identity
  Provider in effect for the organization (either its own, or its Enterprise's)
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filter external identities with org membership, otherwise fetch all the external identities
    """
    membersOnly: Boolean
  ): ExternalIdentityConnection! @internal

  """
  The teams that have one or more external mappings.
  """
  externallyManagedTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection! @internal

  """
  List of gists belonging to the organization.
  """
  gists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder

    """
    Filters Gists according to privacy.
    """
    privacy: GistPrivacy
  ): GistConnection! @internal

  """
  Whether the organization has insights enabled.
  """
  hasInsightsEnabled: Boolean! @internal

  """
  Whether the organization has projects enabled.
  """
  hasOrganizationProjectsEnabled: Boolean! @internal

  """
  Whether the organization has a public profile.
  """
  hasProfile: Boolean! @internal

  """
  Whether the organization has repository projects enabled.
  """
  hasRepositoryProjectsEnabled: Boolean! @internal

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Whether or not team discussions are enabled for this organization.
  """
  hasTeamDiscussionsEnabled: Boolean! @internal

  """
  Is this account on a free trial?
  """
  hasUnlimitedSeats: Boolean! @internal
  id: ID!

  """
  The organization's IdP x509 certificate.
  """
  idpCertificate: X509Certificate @internal

  """
  The HTTP path for importing LDAP Groups into an organization
  """
  importOrganizationResourcePath: URI! @internal

  """
  The HTTP URL for importing LDAP Groups into an organization
  """
  importOrganizationUrl: URI! @internal

  """
  The HTTP path for insights
  """
  insightsResourcePath: URI! @internal

  """
  The HTTP URL for insights
  """
  insightsUrl: URI! @internal

  """
  A list of the org's installed GitHub Apps
  """
  integrationInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only return installations for apps that do not belong to a Marketplace
    listing that belongs to one of the specified categories.
    """
    excludeMarketplaceCategories: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only return installations for apps that belong to a Marketplace listing that belongs to one of the specified categories.
    """
    includeMarketplaceCategories: [String!] = []

    """
    Whether to include installations associated with a Marketplace subscription
    """
    includeSubscriptions: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IntegrationInstallationConnection! @internal

  """
  The interaction ability settings for this organization.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  The setting value for whether the organization has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the organization.
  """
  ipAllowListEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for IP allow list entries returned.
    """
    orderBy: IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): IpAllowListEntryConnection!

  """
  The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
  """
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!

  """
  Owner's eligibility to use Actions
  """
  isActionsEligible: Boolean! @internal

  """
  Does this organization not have any available seats?
  """
  isAtSeatLimit: Boolean! @internal

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Is the project owner (organization, user, or a repo) managed by an Identity Provider
  """
  isEnterpriseManaged: Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Is the account billed through invoices?
  """
  isInvoiced: Boolean! @internal

  """
  Whether or not the user is spammy.
  """
  isSpammy: Boolean! @internal

  """
  Check if the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Returns whether or not the given amount of bytes would go over storage limits
  """
  isStorageAllowed(
    """
    Is storage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  Returns whether or not an action can be run at this time
  """
  isUsageAllowed(
    """
    Is usage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  Whether the organization has verified its profile email and website.
  """
  isVerified: Boolean!

  """
  Whether or not the viewer is blocked from the organization
  """
  isViewerBlocked: Boolean

  """
  A unique identifier for the Organization's SAML IdP
  """
  issuer: String @internal

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The HTTP path for fetching LDAP Group suggestions for Team Import
  """
  ldapGroupSuggestionsResourcePath: URI! @internal

  """
  The HTTP URL for fetching LDAP Group suggestions for Team Import
  """
  ldapGroupSuggestionsUrl: URI! @internal

  """
  The organization's public profile location.
  """
  location: String

  """
  The organization's login name.
  """
  login: String!

  """
  A list of all mannequins for this organization.
  """
  mannequins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for mannequins returned from the connection.
    """
    orderBy: MannequinOrder = {field: CREATED_AT, direction: ASC}
  ): MannequinConnection!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for user statuses returned from the connection.
    """
    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): UserStatusConnection!

  """
  The HTTP path for the organization's member list.
  """
  membersResourcePath: URI! @underDevelopment(since: "2019-05-24")

  """
  The HTTP URL for the organization's member list.
  """
  membersUrl: URI! @underDevelopment(since: "2019-05-24")

  """
  A list of users who are members of this organization.
  """
  membersWithRole(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The maximum number of organization members to retrieve
    """
    maxMembersLimit: Int = 50000 @internal
  ): OrganizationMemberConnection!

  """
  Fetch a migration by GUID
  """
  migration(
    """
    The GUID of the migration to load
    """
    guid: String!
  ): LegacyMigration

  """
  The organization's public profile name.
  """
  name: String

  """
  The HTTP path to create new projects
  """
  newProjectResourcePath: URI! @internal

  """
  The HTTP URL to create new projects
  """
  newProjectUrl: URI! @internal

  """
  The HTTP path creating a new team
  """
  newTeamResourcePath: URI!

  """
  The HTTP URL creating a new team
  """
  newTeamUrl: URI!

  """
  Indicates if email notification delivery for this organization is restricted to verified or approved domains.
  """
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!

  """
  Whether an OAuth application listed in the Marketplace
  must be whitelisted before authorization.
  """
  oapWhitelistRequired(
    """
    The slug of the MarketplaceListing
    """
    listingSlug: String!
  ): Boolean! @internal

  """
  The billing email for the organization.
  """
  organizationBillingEmail: String

  """
  A single package belonging to the owner.
  """
  package(
    """
    The global ID of the package.
    """
    id: ID!
  ): Package @internal

  """
  A single package version belonging to the owner.
  """
  packageVersion(
    """
    The global ID of the package version.
    """
    id: ID!
  ): PackageVersion @internal

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter registry package by whether it has been deleted
    """
    includeDeleted: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find a package by name.
    """
    name: String @internal

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Filter packages by whether it is publicly visible
    """
    publicOnly: Boolean = false @internal

    """
    Filter registry package by type (string).
    """
    registryPackageType: String @internal

    """
    Find packages in a repository by the repository's database ID.
    """
    repositoryDatabaseId: Int @internal

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID

    """
    Find packages in a repository by the repository's nameWithOwner.
    """
    repositoryNameWithOwner: String @internal
  ): PackageConnection!

  """
  A list of packages for a particular search query.
  """
  packagesForQuery(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter packages by type.
    """
    packageType: PackageType

    """
    Find packages by search query.
    """
    query: String
  ): PackageConnection! @internal

  """
  The user's default payment method
  """
  paymentMethod: PaymentMethod

  """
  The pending collaborator invitations for this organization.
  """
  pendingCollaboratorInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Optionally filter to show pending collaborators invitations that occupy a seat.
    """
    isOccupyingSeat: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The ID of the user to optionally filter invitations for.
    """
    userId: ID
  ): RepositoryInvitationConnection! @internal

  """
  A list of users with pending collaborator invitations for this organization.
  """
  pendingCollaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Optionally filter to show pending collaborators with invitations that occupy a seat.
    """
    isOccupyingSeat: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Optional query to search collaborators by login.
    """
    query: String
  ): PendingCollaboratorConnection! @internal

  """
  A list of pending invitations for this organization to join an enterprise
  """
  pendingEnterpriseInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Enterprise IDs to filter invitations by
    """
    enterpriseIds: [ID!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnterpriseOrganizationInvitationConnection @underDevelopment(since: "2019-06-28")

  """
  A list of users who have been invited to join this organization.
  """
  pendingMembers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  The GitHub::Plan for this Organization
  """
  plan: Plan! @internal

  """
  Returns the limit for the account's billing plan.
  """
  planLimit(
    """
    The limit for the plan feature
    """
    feature: PlanFeatureLimit!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Int! @underDevelopment(since: "2018-12-17")

  """
  Returns whether or not the account's billing plan supports a feature.
  """
  planSupports(
    """
    The plan feature to check
    """
    feature: PlanFeature!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Boolean! @underDevelopment(since: "2018-12-17")

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Find project by project next number.
  """
  projectNext(
    """
    The project next number.
    """
    number: Int!
  ): ProjectNext

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to only include public projects.
    """
    includePrivate: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  A list of project next items under the owner.
  """
  projectsNext(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectNextConnection!

  """
  The HTTP path listing organization's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing organization's projects
  """
  projectsUrl: URI!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection! @serviceMapping(to: "github/repo_info")

  """
  Get a list of this user or organization's repositories that use any of the specified dependencies.
  """
  repositoriesUsingDependencies(
    """
    Repository IDs for dependencies to look up.
    """
    dependencyIds: [ID!]!
  ): [RepositoriesUsingDependency!]! @underDevelopment(since: "2020-11-30")

  """
  A list of repositories owned by the organization to which the viewer has
  contributed and also has permission to manage the topics on.
  """
  repositoriesWithTopicManageAccess(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection! @internal

  """
  Find Repository.
  """
  repository(
    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionCommentOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionConnection!

  """
  A list of all repository migrations for this organization.
  """
  repositoryMigrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repository migrations returned.
    """
    orderBy: RepositoryMigrationOrder = {field: CREATED_AT, direction: ASC}

    """
    Filter repository migrations by state.
    """
    state: MigrationState
  ): RepositoryMigrationConnection!

  """
  When true the organization requires all members, billing managers, and outside
  collaborators to enable two-factor authentication.
  """
  requiresTwoFactorAuthentication: Boolean

  """
  The HTTP path for this organization.
  """
  resourcePath: URI!

  """
  A list of retired namespaces for this owner
  """
  retiredNamespaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RetiredNamespaceConnection! @internal

  """
  The Organization's SAML identity providers
  """
  samlIdentityProvider: OrganizationIdentityProvider

  """
  The signature algorithm used to sign SAML requests for an Organization's identity provider.
  """
  signatureMethod: URI @internal

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in a given time range.
    """
    period: SponsorsActivityPeriod = MONTH
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  This object's sponsorship of the viewer.
  """
  sponsorshipForViewerAsMaintainer: Sponsorship @internal

  """
  The viewer's sponsorship of this entity.
  """
  sponsorshipForViewerAsSponsor: Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  This object's sponsorships as the maintainer.
  """
  sponsorshipsAsMaintainer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  This object's sponsorships as the sponsor.
  """
  sponsorshipsAsSponsor(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  The HTTP path for the organization's Single Sign-on prompt.
  """
  ssoResourcePath: URI! @internal

  """
  The URL endpoint for the organization's SAML IdP SSO.
  """
  ssoUrl: URI @internal

  """
  User information only visible to site admin
  """
  stafftoolsInfo: OrganizationStafftoolsInfo @internal

  """
  Return the associated billing subscription for the user.
  """
  subscription: Subscription!

  """
  Find an organization's team by its slug.
  """
  team(
    """
    The name or slug of the team to find.
    """
    slug: String!
  ): Team

  """
  A list of teams in this organization.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """
    Filters teams based on members. Can be one of ME or EMPTY.
    """
    membersFilter: TeamMembersFilter

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder

    """
    If non-null, filters teams according to privacy
    """
    privacy: TeamPrivacy

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """
    If true, restrict to only root teams
    """
    rootTeamsOnly: Boolean = false

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path listing organization's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP path for team toolbar actions
  """
  teamsToolbarActionsResourcePath: URI! @internal

  """
  The HTTP URL for team toolbar actions
  """
  teamsToolbarActionsUrl: URI! @internal

  """
  The HTTP URL listing organization's teams
  """
  teamsUrl: URI!

  """
  A list of template repositories relevant to this user or organization.
  """
  templateRepositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2019-05-03")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2019-05-03")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2019-05-03")
  ): RepositoryConnection! @underDevelopment(since: "2019-05-03")

  """
  The terms of service this organization has agreed to.
  """
  termsOfServiceType: OrganizationTermsOfServiceType! @internal

  """
  The number of seats for this account including bundled seats that are not in use.
  """
  totalAvailableSeats: Int! @internal

  """
  The organization's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  Verified domains available to this organization.
  """
  verifiedDomainsList: [String!]!

  """
  Organization is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Viewer can create repositories on this organization
  """
  viewerCanCreateRepositories: Boolean!

  """
  Viewer can create teams on this organization.
  """
  viewerCanCreateTeams: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Viewer is an active member of this organization.
  """
  viewerIsAMember: Boolean!

  """
  Check if the viewer's only relation to this organization is as its billing manager.
  """
  viewerIsBillingManagerOnly: Boolean @underDevelopment(since: "2018-06-28")

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  The organization's public profile URL.
  """
  websiteUrl: URI
}

"""
Organization information only visible to members
"""
type OrganizationAdminInfo @internal @serviceMapping(to: "github/orgs") {
  """
  Base repository permission for organization members
  """
  defaultRepositoryPermission: DefaultRepositoryPermissionField!

  """
  Enterprise Server installations owned by the business.
  """
  enterpriseServerInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Enterprise Server installations returned.
    """
    orderBy: EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): EnterpriseServerInstallationConnection! @underDevelopment(since: "2019-03-26")

  """
  A list of pending invitations for users to this organization
  """
  invitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationInvitationConnection

  """
  ability for organization org members to create public repositories
  """
  membersCanCreatePublicRepositories: Boolean!

  """
  ability for organization org members to create repositories
  """
  membersCanCreateRepositories: Boolean!

  """
  A list of users who are outside collaborators of this organization.
  """
  outsideCollaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
}

"""
The possible organization-associated record types.
"""
enum OrganizationAssociatedRecordType @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Gist.
  """
  GIST

  """
  Organization invitation.
  """
  INVITATION

  """
  Repository.
  """
  REPO
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry @serviceMapping(to: "github/audit_logs") =
    AccountPlanChangeAuditEntry
  | BusinessAddOrganizationAuditEntry
  | IssueCommentUpdateAuditEntry
  | MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OauthApplicationDestroyAuditEntry
  | OauthApplicationResetSecretAuditEntry
  | OauthApplicationRevokeTokensAuditEntry
  | OauthApplicationTransferAuditEntry
  | OrgAcceptBusinessInvitationAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgAuditLogExportAuditEntry
  | OrgBillingSignupErrorAuditEntry
  | OrgBlockUserAuditEntry
  | OrgCancelBusinessInvitationAuditEntry
  | OrgCancelInvitationAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigDisableContributorsOnlyAuditEntry
  | OrgConfigDisableSockpuppetDisallowedAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableContributorsOnlyAuditEntry
  | OrgConfigEnableSockpuppetDisallowedAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRenameAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingClearAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | ProjectCreateAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoDisableAuditEntry
  | RepoEnableAuditEntry
  | RepoPagesCnameAuditEntry
  | RepoPagesCreateAuditEntry
  | RepoPagesDestroyAuditEntry
  | RepoPagesHttpsRedirectDisabledAuditEntry
  | RepoPagesHttpsRedirectEnabledAuditEntry
  | RepoPagesPrivateAuditEntry
  | RepoPagesPublicAuditEntry
  | RepoPagesSourceAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepoRenameAuditEntry
  | RepoTransferAuditEntry
  | RepoTransferStartAuditEntry
  | RepoUnarchivedAuditEntry
  | RepoUpdateMemberAuditEntry
  | RepositoryVisibilityChangeClearAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamChangePrivacyAuditEntry
  | TeamCreateAuditEntry
  | TeamDeleteAuditEntry
  | TeamDestroyAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry
  | TeamRenameAuditEntry
  | TeamUpdatePermissionAuditEntry
  | TeamUpdateRepositoryPermissionAuditEntry
  | UserAddEmailAuditEntry
  | UserStatusUpdateAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type OrganizationAuditEntryConnection @serviceMapping(to: "github/audit_logs") {
  """
  A list of edges.
  """
  edges: [OrganizationAuditEntryEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationAuditEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Metadata for an audit entry with action org.*
"""
interface OrganizationAuditEntryData @serviceMapping(to: "github/audit_logs") {
  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI
}

"""
An edge in a connection.
"""
type OrganizationAuditEntryEdge @serviceMapping(to: "github/audit_logs") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationAuditEntry
}

"""
The connection type for Organization.
"""
type OrganizationConnection @serviceMapping(to: "github/orgs") {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A CredentialAuthorization between an Organization and a User.
"""
type OrganizationCredentialAuthorization implements Node @underDevelopment(since: "2019-02-06") {
  """
  The PublicKey or OauthAccess credential linked to this OrganizationCredentialAuthorization
  """
  credential: AuthorizedCredential

  """
  The credential type that this OrganizationCredentialAuthorization authorizes.
  """
  credentialType: OrganizationCredentialAuthorizationCredential!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!
}

"""
The connection type for OrganizationCredentialAuthorization.
"""
type OrganizationCredentialAuthorizationConnection @underDevelopment(since: "2019-02-06") {
  """
  A list of edges.
  """
  edges: [OrganizationCredentialAuthorizationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationCredentialAuthorization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible values for OrganizationCredentialAuthorization.credential_type.
"""
enum OrganizationCredentialAuthorizationCredential @underDevelopment(since: "2019-02-08") {
  """
  The Organization Credential Authorization is for a Personal Access Token.
  """
  PERSONAL_ACCESS_TOKEN

  """
  The Organization Credential Authorization is for a Public SSH Key
  """
  PUBLIC_KEY
}

"""
An edge in a connection.
"""
type OrganizationCredentialAuthorizationEdge @underDevelopment(since: "2019-02-06") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationCredentialAuthorization
}

"""
An organization discussion.
"""
type OrganizationDiscussion implements Comment & Deletable & Node & Updatable & UpdatableComment
  @underDevelopment(since: "2019-05-03")
  @serviceMapping(to: "github/discussions") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the discussion's organization.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the discussion body hash.
  """
  bodyVersion: String!

  """
  Type of comment
  """
  commentType: String! @internal

  """
  A list of comments on this discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): OrganizationDiscussionCommentConnection!

  """
  The HTTP path for discussion comments.
  """
  commentsResourcePath: URI!

  """
  The HTTP URL for discussion comments.
  """
  commentsUrl: URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Whether or not the discussion is pinned.
  """
  isPinned: Boolean!

  """
  Whether or not the discussion is only visible to organization members. Public discussions are visible to everyone.
  """
  isPrivate: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2019-05-03")

  """
  Identifies the discussion within its organization.
  """
  number: Int!

  """
  The organization that defines the context of this discussion.
  """
  organization: Organization!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2019-05-03")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  The title of the discussion
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this discussion
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Whether or not the current viewer can pin this discussion.
  """
  viewerCanPin: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment on an organization discussion.
"""
type OrganizationDiscussionComment implements Comment & Deletable & Node & Updatable & UpdatableComment
  @underDevelopment(since: "2019-05-03")
  @serviceMapping(to: "github/discussions") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The current version of the body content.
  """
  bodyVersion: String!

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The discussion this comment is about.
  """
  discussion: OrganizationDiscussion!

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2019-05-03")

  """
  Identifies the comment number.
  """
  number: Int!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The HTTP path for this comment.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2019-05-03")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for OrganizationDiscussionComment.
"""
type OrganizationDiscussionCommentConnection
  @underDevelopment(since: "2019-05-03")
  @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [OrganizationDiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationDiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationDiscussionCommentEdge
  @underDevelopment(since: "2019-05-03")
  @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationDiscussionComment
}

"""
The connection type for OrganizationDiscussion.
"""
type OrganizationDiscussionConnection @underDevelopment(since: "2019-05-03") @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [OrganizationDiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationDiscussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationDiscussionEdge @underDevelopment(since: "2019-05-03") @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationDiscussion
}

"""
An edge in a connection.
"""
type OrganizationEdge @serviceMapping(to: "github/orgs") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

"""
An Identity Provider configured to provision SAML and SCIM identities for Organizations
"""
type OrganizationIdentityProvider implements Node
  @serviceMapping(to: "github/external_identities")
  @useNextGlobalIdFormat(after: "2021-06-18") {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: URI

  """
  External Identities provisioned by this Identity Provider
  """
  externalIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to external identities with valid org membership only
    """
    membersOnly: Boolean
  ): ExternalIdentityConnection!
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """
  The Issuer Entity ID for the SAML Identity Provider
  """
  issuer: String

  """
  Organization this Identity Provider belongs to
  """
  organization: Organization

  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: URI

  """
  The URL endpoint for the Identity Provider's SAML SSO.
  """
  ssoUrl: URI
}

"""
An Invitation for a user to an organization.
"""
type OrganizationInvitation implements Node
  @serviceMapping(to: "github/org_invites")
  @useNextGlobalIdFormat(after: "2021-06-24") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The email address of the user invited to the organization.
  """
  email: String
  id: ID!

  """
  The type of invitation that was sent (e.g. email, user).
  """
  invitationType: OrganizationInvitationType!

  """
  The user who was invited to the organization.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User!

  """
  The organization the invite is for
  """
  organization: Organization!

  """
  The user's pending role in the organization (e.g. member, owner).
  """
  role: OrganizationInvitationRole!

  """
  A list of teams the user will be added to
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): TeamConnection! @internal
}

"""
The connection type for OrganizationInvitation.
"""
type OrganizationInvitationConnection @serviceMapping(to: "github/org_invites") {
  """
  A list of edges.
  """
  edges: [OrganizationInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationInvitationEdge @serviceMapping(to: "github/org_invites") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationInvitation
}

"""
Information about organization invitations.
"""
type OrganizationInvitationMetadata @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Count of accepted invitations.
  """
  acceptedInvitationsCount: Int!

  """
  Count of cancelled invitations.
  """
  cancelledInvitationsCount: Int!

  """
  Count of invitations sent to email addresses.
  """
  emailInviteeInvitationsCount: Int!

  """
  Count of total invitations.
  """
  totalInvitationsCount: Int!

  """
  Count of invitations sent to GitHub users.
  """
  userInviteeInvitationsCount: Int!
}

"""
Ordering options for organization invitation connections
"""
input OrganizationInvitationOrder @underDevelopment(since: "2019-03-26") @serviceMapping(to: "github/org_invites") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order organization invitations by.
  """
  field: OrganizationInvitationOrderField!
}

"""
Properties by which organization invitation connections can be ordered.
"""
enum OrganizationInvitationOrderField @underDevelopment(since: "2019-03-26") @serviceMapping(to: "github/org_invites") {
  """
  Order organization invitations by creation time
  """
  CREATED_AT
}

"""
The possible organization invitation roles.
"""
enum OrganizationInvitationRole @serviceMapping(to: "github/org_invites") {
  """
  The user is invited to be an admin of the organization.
  """
  ADMIN

  """
  The user is invited to be a billing manager of the organization.
  """
  BILLING_MANAGER

  """
  The user is invited to be a direct member of the organization.
  """
  DIRECT_MEMBER

  """
  The user's previous role will be reinstated.
  """
  REINSTATE
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType @serviceMapping(to: "github/org_invites") {
  """
  The invitation was to an email address.
  """
  EMAIL

  """
  The invitation was to an existing user.
  """
  USER
}

"""
The connection type for User.
"""
type OrganizationMemberConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [OrganizationMemberEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user within an organization.
"""
type OrganizationMemberEdge @serviceMapping(to: "github/orgs") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
  """
  hasTwoFactorEnabled: Boolean

  """
  The item at the end of the edge.
  """
  node: User

  """
  The role this user has in the organization.
  """
  role: OrganizationMemberRole
}

"""
The possible roles within an organization for its members.
"""
enum OrganizationMemberRole @serviceMapping(to: "github/orgs") {
  """
  The user is an administrator of the organization.
  """
  ADMIN

  """
  The user is a member of the organization.
  """
  MEMBER
}

"""
The possible values for the members can create repositories setting on an organization.
"""
enum OrganizationMembersCanCreateRepositoriesSettingValue {
  """
  Members will be able to create public and private repositories.
  """
  ALL

  """
  Members will not be able to create public or private repositories.
  """
  DISABLED

  """
  Members will be able to create only private repositories.
  """
  PRIVATE
}

"""
Ordering options for organization connections.
"""
input OrganizationOrder @serviceMapping(to: "github/orgs") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order organizations by.
  """
  field: OrganizationOrderField!
}

"""
Properties by which organization connections can be ordered.
"""
enum OrganizationOrderField @serviceMapping(to: "github/orgs") {
  """
  Order organizations by creation time
  """
  CREATED_AT

  """
  Order organizations by login
  """
  LOGIN
}

"""
Organization information only visible to site admin
"""
type OrganizationStafftoolsInfo implements AccountStafftoolsInfo @internal @serviceMapping(to: "github/orgs") {
  """
  Total number of actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned
  orgs. -1 means a timeout occured and the account may have many actions run
  """
  actionWorkflowsRunCount: Int!

  """
  Records created per hour while active.
  """
  associatedRecordCreationVelocity(
    """
    The associated record type
    """
    type: OrganizationAssociatedRecordType!
  ): Int!

  """
  First created at time for record type.
  """
  associatedRecordFirstCreatedAt(
    """
    The associated record type
    """
    type: OrganizationAssociatedRecordType!
  ): DateTime

  """
  The number of repositories this account is associated with.
  """
  associatedRepositoriesCount(
    """
    Array of owner's affiliation options for repository count. For example,
    OWNER will include only repositories that the organization or user being viewed owns.
    """
    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  The organization billing email address.
  """
  billingEmail: String

  """
  Billing email domain metadata.
  """
  billingEmailDomainMetadata: EmailDomainMetadata!

  """
  Billing email domain reputation.
  """
  billingEmailDomainReputation: SpamuraiReputation!

  """
  Has actually paid money to GitHub at some point.
  """
  hasActuallyPaidMoney: Boolean!

  """
  Does the account have a blacklisted payment method.
  """
  hasBlacklistedPaymentMethod: Boolean!

  """
  Account has matching spam pattern on last ip.
  """
  hasMatchingLastIpSpamPattern: Boolean!

  """
  Account has newer non-spammy ip neighbor.
  """
  hasNewerNonSpammyIpNeighbor: Boolean!

  """
  Does account have a paid plan.
  """
  hasPaidPlan: Boolean!

  """
  The interaction ability settings for this organization.
  """
  interactionAbility: RepositoryInteractionAbility!

  """
  Information about organization invitations.
  """
  invitationMetadata: OrganizationInvitationMetadata!

  """
  The accounts that show share the same lastIp
  """
  ipNeighbors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_24
  ): AccountConnection

  """
  The number of accounts with the same last ip.
  """
  ipNeighborsCount: Int!

  """
  Is the account classified as a gift account.
  """
  isGiftAccount: Boolean!

  """
  Is the account hammy.
  """
  isHammy: Boolean!

  """
  Can this account be marked as spammy.
  """
  isNeverSpammy: Boolean!

  """
  Is the account spammy.
  """
  isSpammy: Boolean!

  """
  Is the account suspended.
  """
  isSuspended: Boolean!

  """
  Indicates if the account is subject to trade restrictions.
  """
  isTradeRestricted: Boolean!

  """
  The five most recently updated project cards that the user created. Returns
  empty results if timed out querying for project cards
  """
  lastFivePublicProjectCards: [ProjectCard!]!

  """
  The five most recently updated projects that the user created. Returns empty results if timed out querying for projects
  """
  lastFivePublicProjects: [Project!]!

  """
  The ip address for the account recorded when they last logged in.
  """
  lastIp: String

  """
  The networks for this account that have LFS usage, .
  """
  lfsNetworksByUsage(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection

  """
  The repositories for this account that have LFS objects.
  """
  lfsRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!

  """
  Class C reputation.
  """
  networkAddress24Reputation: SpamuraiReputation

  """
  IP address reputation.
  """
  networkAddress32Reputation: SpamuraiReputation

  """
  The number of repositories this account owns.
  """
  ownedRepositoriesCount(
    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  Total actions minutes used in the past month for private repos owned by the
  account. If the account is a user then this includes actions run in private
  repos owned by 25 of the user's most recently created owned orgs. -1 means a
  timeout occured and the account may have many actions run.
  """
  privateActionsMinuteUsage: Int!

  """
  Account profile.
  """
  profile: Profile

  """
  Count of public project cards created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectCardsCount: Int!

  """
  Count of public projects created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectsCount: Int!

  """
  Most recent actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned orgs.
  """
  recentActionWorkflowsRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActionsWorkflowRunStafftoolsInfoConnection!

  """
  The number of spammy accounts with the same last ip.
  """
  spammyIpNeighborsCount: Int!

  """
  The spammy reason.
  """
  spammyReason: String

  """
  Staff notes for account.
  """
  staffNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StaffNoteConnection

  """
  The account time zone.
  """
  timeZone: String
}

"""
An organization teams hovercard context
"""
type OrganizationTeamsHovercardContext implements HovercardContext @serviceMapping(to: "github/hovercards") {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Teams in this organization the user is a member of that are relevant
  """
  relevantTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection!

  """
  The path for the full team list for this user
  """
  teamsResourcePath: URI!

  """
  The URL for the full team list for this user
  """
  teamsUrl: URI!

  """
  The total number of teams the user is on in the organization
  """
  totalTeamCount: Int!
}

"""
The type of terms of service for an organization.
"""
enum OrganizationTermsOfServiceType @internal @serviceMapping(to: "github/account_management") {
  """
  Corporate terms of service
  """
  CORPORATE

  """
  Custom terms of service
  """
  CUSTOM

  """
  Corporate ESA/Education terms of service
  """
  ESA_EDUCATION

  """
  Evaluation terms of service
  """
  EVALUATION

  """
  Standard terms of service
  """
  STANDARD
}

"""
An organization list hovercard context
"""
type OrganizationsHovercardContext implements HovercardContext @serviceMapping(to: "github/hovercards") {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Organizations this user is a member of that are relevant
  """
  relevantOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of organization database IDs to filter by.
    """
    databaseIds: [Int!] @internal

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of organization logins to filter by.
    """
    logins: [String!] @internal
  ): OrganizationConnection!

  """
  The total number of organizations this user is in
  """
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node
  @serviceMapping(to: "github/package_registry")
  @useNextGlobalIdFormat(after: "2021-07-01") {
  """
  All dependencies for this package.
  """
  allDependencies: [PackageVersionDependencies!] @internal

  """
  The package type color
  """
  color: String! @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Find the latest version for the package.
  """
  latestVersion: PackageVersion

  """
  Identifies the name of the package.
  """
  name: String!

  """
  Identifies the title of the package, with the owner prefixed.
  """
  nameWithOwner: String! @internal

  """
  Find the package file identified by the guid.
  """
  packageFileByGuid(
    """
    The unique identifier of the package_file
    """
    guid: String!
  ): PackageFile @internal

  """
  Find the package file identified by the sha256.
  """
  packageFileBySha256(
    """
    The SHA256 of the package_file
    """
    sha256: String!
  ): PackageFile @internal

  """
  Identifies the type of the package.
  """
  packageType: PackageType!

  """
  List the prerelease versions for this package.
  """
  preReleaseVersions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned packages.
    """
    orderBy: PackageVersionOrder = {field: CREATED_AT, direction: DESC}
  ): PackageVersionConnection @internal

  """
  The repository this package belongs to.
  """
  repository: Repository

  """
  An internal subset of Repository data for this package's repository.
  """
  repositoryInfo: PackageRepositoryInfo @internal

  """
  Identifies the title of the package, escaped for safe use in a shell command.
  """
  shellSafeName: String! @internal

  """
  Statistics about package activity.
  """
  statistics: PackageStatistics

  """
  list of tags for this package
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageTagConnection! @internal

  """
  List the topics for this package.
  """
  topics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TopicConnection @internal

  """
  Find package version by version string.
  """
  version(
    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    The package version.
    """
    version: String!
  ): PackageVersion

  """
  Find package version by version string.
  """
  versionByPlatform(
    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    Find a package for a specific platform.
    """
    platform: String!

    """
    The package version.
    """
    version: String!
  ): PackageVersion @internal

  """
  Find package version by manifest SHA256.
  """
  versionBySha256(
    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    The package SHA256 digest.
    """
    sha256: String!
  ): PackageVersion @internal

  """
  list of versions for this package
  """
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned packages.
    """
    orderBy: PackageVersionOrder = {field: CREATED_AT, direction: DESC}
  ): PackageVersionConnection!

  """
  List package versions with a specific metadatum.
  """
  versionsByMetadatum(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not deleted versions will be included.
    """
    includeDeleted: Boolean = false @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter on a specific metadatum.
    """
    metadatum: RegistryPackageMetadatum!

    """
    Ordering of the returned packages.
    """
    orderBy: PackageVersionOrder = {field: CREATED_AT, direction: DESC}
  ): PackageVersionConnection @internal
}

"""
The connection type for Package.
"""
type PackageConnection @serviceMapping(to: "github/package_registry") {
  """
  A list of edges.
  """
  edges: [PackageEdge]

  """
  A list of nodes.
  """
  nodes: [Package]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A package dependency contains the information needed to satisfy a dependency.
"""
type PackageDependency implements Node @internal {
  """
  Identifies the type of dependency.
  """
  dependencyType: PackageDependencyType!
  id: ID!

  """
  Identifies the name of the dependency.
  """
  name: String!

  """
  Identifies the version of the dependency.
  """
  version: String!
}

"""
A package dependency contains the information needed to satisfy a dependency.
"""
input PackageDependencyAttributes @internal {
  """
  Identifies the type of dependency.
  """
  dependencyType: PackageDependencyType!

  """
  Identifies the name of the dependency.
  """
  name: String!

  """
  Identifies the version of the dependency.
  """
  version: String!
}

"""
The connection type for PackageDependency.
"""
type PackageDependencyConnection @internal {
  """
  A list of edges.
  """
  edges: [PackageDependencyEdge]

  """
  A list of nodes.
  """
  nodes: [PackageDependency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageDependencyEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageDependency
}

"""
The possible types of a package dependency.
"""
enum PackageDependencyType @internal {
  """
  An optional package dependency type.
  """
  BUNDLED

  """
  A default package dependency type.
  """
  DEFAULT

  """
  A dev package dependency type.
  """
  DEV

  """
  An optional package dependency type.
  """
  OPTIONAL

  """
  A peer package dependency type.
  """
  PEER

  """
  A test package dependency type.
  """
  TEST
}

"""
An edge in a connection.
"""
type PackageEdge @serviceMapping(to: "github/package_registry") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node @useNextGlobalIdFormat(after: "2021-07-01") {
  """
  whether billing gives you access to the file
  """
  billingAllowed: Boolean! @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  A unique identifier for this file.
  """
  guid: String @internal
  id: ID!

  """
  MD5 hash of the file.
  """
  md5: String

  """
  URL to download the asset metadata.
  """
  metadataUrl: URI @internal

  """
  Name of the file.
  """
  name: String!

  """
  The package version this file belongs to.
  """
  packageVersion: PackageVersion

  """
  SHA1 hash of the file.
  """
  sha1: String

  """
  SHA256 hash of the file.
  """
  sha256: String

  """
  Size of the file in bytes.
  """
  size: Int

  """
  Identifies the subresource integrity (SRI).
  """
  sri: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  URL to download the asset.
  """
  url: URI
}

"""
The connection type for PackageFile.
"""
type PackageFileConnection {
  """
  A list of edges.
  """
  edges: [PackageFileEdge]

  """
  A list of nodes.
  """
  nodes: [PackageFile]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageFileEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageFile
}

"""
Ways in which lists of package files can be ordered upon return.
"""
input PackageFileOrder {
  """
  The direction in which to order package files by the specified field.
  """
  direction: OrderDirection

  """
  The field in which to order package files by.
  """
  field: PackageFileOrderField
}

"""
Properties by which package file connections can be ordered.
"""
enum PackageFileOrderField {
  """
  Order package files by creation time
  """
  CREATED_AT
}

"""
The possible states of a package file.
"""
enum PackageFileState @internal {
  """
  Package file doesn't have a blob backing it.
  """
  NEW

  """
  All Package file contents have been uploaded.
  """
  UPLOADED
}

"""
Arbitrary metadata about a specific package version.
"""
type PackageMetadatum @internal {
  """
  The name for this metadatum.
  """
  name: String!

  """
  The package version this metadatum describes.
  """
  packageVersion: PackageVersion

  """
  The value for this metadatum.
  """
  value: String!
}

"""
The connection type for PackageMetadatum.
"""
type PackageMetadatumConnection @internal {
  """
  A list of edges.
  """
  edges: [PackageMetadatumEdge]

  """
  A list of nodes.
  """
  nodes: [PackageMetadatum]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageMetadatumEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageMetadatum
}

"""
Represents a single package metadatum
"""
input PackageMetadatumTuple @internal {
  """
  Name of the metadatum.
  """
  name: String!

  """
  True, if the metadatum can be updated if it already exists
  """
  update: Boolean

  """
  Value of the metadatum.
  """
  value: String!
}

"""
Ways in which lists of packages can be ordered upon return.
"""
input PackageOrder {
  """
  The direction in which to order packages by the specified field.
  """
  direction: OrderDirection

  """
  The field in which to order packages by.
  """
  field: PackageOrderField
}

"""
Properties by which package connections can be ordered.
"""
enum PackageOrderField {
  """
  Order packages by creation time
  """
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  id: ID!

  """
  A single package belonging to the owner.
  """
  package(
    """
    The global ID of the package.
    """
    id: ID!
  ): Package @internal

  """
  A single package version belonging to the owner.
  """
  packageVersion(
    """
    The global ID of the package version.
    """
    id: ID!
  ): PackageVersion @internal

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter registry package by whether it has been deleted
    """
    includeDeleted: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find a package by name.
    """
    name: String @internal

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Filter packages by whether it is publicly visible
    """
    publicOnly: Boolean = false @internal

    """
    Filter registry package by type (string).
    """
    registryPackageType: String @internal

    """
    Find packages in a repository by the repository's database ID.
    """
    repositoryDatabaseId: Int @internal

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID

    """
    Find packages in a repository by the repository's nameWithOwner.
    """
    repositoryNameWithOwner: String @internal
  ): PackageConnection!
}

"""
A subset of Repository attributes for internal use only from the registry service.
"""
type PackageRepositoryInfo @internal {
  """
  The database id of the repository associated with this package.
  """
  databaseId: Int!

  """
  The global id of the repository associated with this package.
  """
  id: ID!

  """
  The nwo of the repository associated with this package.
  """
  nameWithOwner: String!

  """
  The database id of the organization that the repository associated with this package belongs to, if any.
  """
  organizationDatabaseId: Int

  """
  The database id of the owner of the repository associated with this package.
  """
  ownerDatabaseId: Int!

  """
  The global id of the owner of the repository associated with this package.
  """
  ownerId: ID!

  """
  The login of the owner of the repository associated with this package.
  """
  ownerLogin: String!

  """
  The type of the owner of the repository associated with this package, 'User' or 'Organization'.
  """
  ownerType: String!

  """
  The database id of the parent of the repository associated with this package.
  """
  parentDatabaseId: Int

  """
  The global id of the parent of the repository associated with this package.
  """
  parentId: ID

  """
  The associated repository's visibility level.
  """
  visibility: RepositoryVisibility!
}

"""
Represents an interface to search packages on an object.
"""
interface PackageSearch @internal {
  id: ID!

  """
  A list of packages for a particular search query.
  """
  packagesForQuery(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter packages by type.
    """
    packageType: PackageType

    """
    Find packages by search query.
    """
    query: String
  ): PackageConnection! @internal
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  """
  Number of times the package was downloaded this month.
  """
  downloadsThisMonth: Int! @internal

  """
  Number of times the package was downloaded this week.
  """
  downloadsThisWeek: Int! @internal

  """
  Number of times the package was downloaded this year.
  """
  downloadsThisYear: Int! @internal

  """
  Number of times the package was downloaded today.
  """
  downloadsToday: Int! @internal

  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  id: ID!

  """
  Identifies the tag name of the version.
  """
  name: String!

  """
  Version that the tag is associated with.
  """
  version: PackageVersion
}

"""
The connection type for PackageTag.
"""
type PackageTagConnection {
  """
  A list of edges.
  """
  edges: [PackageTagEdge]

  """
  A list of nodes.
  """
  nodes: [PackageTag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageTagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageTag
}

"""
The possible types of a package.
"""
enum PackageType {
  """
  A debian package.
  """
  DEBIAN

  """
  A docker image.
  """
  DOCKER
    @deprecated(
      reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
    )

  """
  A maven package.
  """
  MAVEN

  """
  An npm package.
  """
  NPM

  """
  A nuget package.
  """
  NUGET

  """
  A python package.
  """
  PYPI

  """
  A rubygems package.
  """
  RUBYGEMS
}

"""
Information about a specific package version.
"""
type PackageVersion implements Node
  @serviceMapping(to: "github/package_registry")
  @useNextGlobalIdFormat(after: "2021-07-01") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  Whether or not this version has been deleted.
  """
  deleted: Boolean! @internal

  """
  Time at which the version was deleted.
  """
  deletedAt: DateTime @internal

  """
  list of dependencies for this package
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find dependencies by type.
    """
    type: PackageDependencyType
  ): PackageDependencyConnection! @internal

  """
  A file associated with this package version
  """
  fileByName(
    """
    A specific file to find.
    """
    filename: String!
  ): PackageFile @internal

  """
  List of files associated with this package version
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering of the returned package files.
    """
    orderBy: PackageFileOrder = {field: CREATED_AT, direction: ASC}
  ): PackageFileConnection!
  id: ID!

  """
  A single line of text to install this package version.
  """
  installationCommand: String @internal

  """
  The package manifest for this package version.
  """
  manifest: String @internal

  """
  Metadata associated with this package version
  """
  metadata(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List of metadatum names to find.
    """
    names: [String]
  ): PackageMetadatumConnection @internal

  """
  The package associated with this version.
  """
  package: Package

  """
  The platform this version was built for.
  """
  platform: String

  """
  Whether or not this version is a pre-release.
  """
  preRelease: Boolean!

  """
  The README of this package version.
  """
  readme: String

  """
  The HTML README of this package version
  """
  readmeHtml: HTML @internal

  """
  The release associated with this package version.
  """
  release: Release

  """
  Identifies the sha256.
  """
  sha256: String @internal

  """
  Identifies the version number, escaped for safe use in a shell command.
  """
  shellSafeVersion: String! @internal

  """
  Identifies the size.
  """
  size: Int @internal

  """
  Statistics about package activity.
  """
  statistics: PackageVersionStatistics

  """
  The package version summary.
  """
  summary: String

  """
  Time at which the most recent file upload for this package version finished
  """
  updatedAt: DateTime! @internal

  """
  The version string.
  """
  version: String!

  """
  Can the current viewer edit this Package version.
  """
  viewerCanEdit: Boolean! @internal
}

"""
The connection type for PackageVersion.
"""
type PackageVersionConnection @serviceMapping(to: "github/package_registry") {
  """
  A list of edges.
  """
  edges: [PackageVersionEdge]

  """
  A list of nodes.
  """
  nodes: [PackageVersion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A lightweight object that wraps the version to dependencies relationship. Only
used internally to support the rubygems dependencies endpoint.
"""
type PackageVersionDependencies @internal {
  """
  All dependencies for this version
  """
  dependencies: [PackageDependency!]

  """
  Identifies the version number.
  """
  version: String!
}

"""
An edge in a connection.
"""
type PackageVersionEdge @serviceMapping(to: "github/package_registry") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageVersion
}

"""
Ways in which lists of package versions can be ordered upon return.
"""
input PackageVersionOrder {
  """
  The direction in which to order package versions by the specified field.
  """
  direction: OrderDirection

  """
  The field in which to order package versions by.
  """
  field: PackageVersionOrderField
}

"""
Properties by which package version connections can be ordered.
"""
enum PackageVersionOrderField {
  """
  Order package versions by creation time
  """
  CREATED_AT
}

"""
Represents a object that contains package version activity statistics such as downloads.
"""
type PackageVersionStatistics {
  """
  Number of times the package was downloaded this month.
  """
  downloadsThisMonth: Int! @internal

  """
  Number of times the package was downloaded this week.
  """
  downloadsThisWeek: Int! @internal

  """
  Number of times the package was downloaded this year.
  """
  downloadsThisYear: Int! @internal

  """
  Number of times the package was downloaded today.
  """
  downloadsToday: Int! @internal

  """
  Number of times the package was downloaded since it was created.
  """
  downloadsTotalCount: Int!
}

"""
Classes of errors that may occur when executing a GitHub Packages mutation.
"""
enum PackagesErrorType @internal {
  """
  The packages owning account has been disabled due to billing, spam status, or otherwise.
  """
  ACCOUNT_DISABLED

  """
  The packages owning account is not opted into a necessary feature flag.
  """
  FEATURE_FLAG

  """
  An attempt to add a package file that already exists on a given version.
  """
  FILE_EXISTS

  """
  The request was successful.
  """
  NONE

  """
  An attempt to publish a package that already exists.
  """
  PACKAGE_EXISTS

  """
  The packages owning account is on a legacy plan and can't use the service.
  """
  PLAN_INELIGIBLE

  """
  The repository is archived and can't accept uploads.
  """
  REPOSITORY_ARCHIVED

  """
  The repository is disabled for billing, by a GitHub admin, for a ToS
  violation, DMCA notice, or other, and can't accept uploads.
  """
  REPOSITORY_DISABLED

  """
  The repository is locked for billing, migration, renames, etc., and can't accept uploads.
  """
  REPOSITORY_LOCKED

  """
  The repository or its owner is spammy and it can't accept uploads.
  """
  REPOSITORY_SPAMMY

  """
  The packages owning account has exceeded its storage or bandwidth allotment.
  """
  RESOURCE_LIMITED

  """
  The packages owning account has trade restrictions in place.
  """
  TRADE_RESTRICTION

  """
  The current user has been blocked by the packages owner.
  """
  USER_BLOCKED

  """
  The current user is spammy and should not interact with packages.
  """
  USER_SPAMMY

  """
  One or more general validation errors.
  """
  VALIDATION

  """
  An attempt to publish a package version that already exists.
  """
  VERSION_EXISTS

  """
  An attempt to associate a package with a repository other than its current one.
  """
  WRONG_REPOSITORY
}

"""
Represents a mutation result for a Packages-related mutation.
"""
type PackagesMutationResult @internal {
  """
  The high-level type of error that occurred.
  """
  errorType: PackagesErrorType!

  """
  Boolean flag indicating whether the mutation succeeded or not.
  """
  success: Boolean!

  """
  A safe summary message of what went wrong to show the end user.
  """
  userSafeMessage: String!

  """
  The most appropriate HTTP status code to return to the end user.
  """
  userSafeStatus: Int!

  """
  If the mutation fails due to invalid inputs, errors will show up in this list.
  """
  validationErrors: [UserError!]!
}

"""
The possible page build states.
"""
enum PageBuildStatus @internal @serviceMapping(to: "github/pages") {
  """
  The Page is building.
  """
  BUILDING

  """
  The Page is built.
  """
  BUILT

  """
  The Page is errored.
  """
  ERRORED
}

"""
A TLS certificate for a given GitHub Pages custom domain.
"""
type PageCertificate @internal @serviceMapping(to: "github/pages") {
  """
  Identifies the URL path that our certificate provider will request to prove our ownership of the alternate domain.
  """
  altChallengePath: URI @internal

  """
  Identifies the response that our certificate provider expects when it requests the alternate challengePath.
  """
  altChallengeResponse: String @internal

  """
  Identifies the alternate domain which the certificate belongs to.
  """
  altDomain: String!

  """
  Identifies the URL path that our certificate provider will request to prove our ownership of the domain.
  """
  challengePath: URI @internal

  """
  Identifies the response that our certificate provider expects when it requests the challengePath.
  """
  challengeResponse: String @internal

  """
  Identifies the domain which the certificate belongs to.
  """
  domain: String!

  """
  Identifies the earthsmoke private key used to generate the CSR.
  """
  earthsmokeKeyVersionId: Int @internal

  """
  Identifies when the certificate expires.
  """
  expiresAt: DateTime @internal

  """
  Identifies the private key used to generate the certificate as Fastly names it.
  """
  fastlyPrivateKeyId: String @internal

  """
  Identifies the current state in the request process the certificate is in.
  """
  state: PageCertificateState

  """
  Provides greater detail related to the state, such as an error message.
  """
  stateDetail: String
}

"""
The possible page certificate states.
"""
enum PageCertificateState @internal @serviceMapping(to: "github/pages") {
  """
  The certificate has been approved.
  """
  APPROVED

  """
  Authorization created
  """
  AUTHORIZATION_CREATED

  """
  Authorization verification pending.
  """
  AUTHORIZATION_PENDING

  """
  Authorization has been revoked.
  """
  AUTHORIZATION_REVOKED

  """
  Domain authorization succeeded.
  """
  AUTHORIZED

  """
  The ACME authorization is in a bad state. We need to start over.
  """
  BAD_AUTHZ

  """
  Certificate is pending removal
  """
  DESTROY_PENDING

  """
  Detected a change to DNS settings. Requesting a new certificate.
  """
  DNS_CHANGED

  """
  An error occurred.
  """
  ERRORED

  """
  The certificate has been successfully issued.
  """
  ISSUED

  """
  This domain was recently added. The certificate request process will begin shortly.
  """
  NEW

  """
  The certificate has been uploaded and is awaiting approval.
  """
  UPLOADED
}

"""
GitHub Pages deployment for a given Repository.
"""
type PageDeployment implements Node @internal @serviceMapping(to: "github/pages") {
  """
  The git object ID corresponding to the commit currently deployed.
  """
  builtRevision: GitObjectID
  id: ID!

  """
  The git branch name used to build the site.
  """
  sourceBranch: String!

  """
  The subdirectory in the repository working tree used to build the site.
  """
  sourcePath: String!

  """
  The current build status of the Page.
  """
  status: PageBuildStatus

  """
  This URL at which this site can be accessed.
  """
  url: URI
}

"""
The connection type for PageDeployment.
"""
type PageDeploymentConnection @internal @serviceMapping(to: "github/pages") {
  """
  A list of edges.
  """
  edges: [PageDeploymentEdge]

  """
  A list of nodes.
  """
  nodes: [PageDeployment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PageDeploymentEdge @internal @serviceMapping(to: "github/pages") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PageDeployment
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Represents the changes to an individual file in a diff.
"""
type Patch {
  """
  The HTML blob patch URL.
  """
  blobUrl: URI! @internal

  """
  The contents API URL.
  """
  contentsUrl: URI! @internal

  """
  The diff lines for this patch.
  """
  diffLines(
    """
    Indicates whether diff lines should be syntax highlighted.
    """
    syntaxHighlightingEnabled: Boolean = true
  ): [DiffLine]

  """
  Whether or not the patch is binary
  """
  isBinary: Boolean!

  """
  Whether or not the patch is a large diff
  """
  isLargeDiff: Boolean!

  """
  Whether or not the patch is in a submodule
  """
  isSubmodule: Boolean!

  """
  The number of lines added in this patch.
  """
  linesAdded: Int!

  """
  The total lines added or removed in this patch.
  """
  linesChanged: Int!

  """
  The number of lines removed in this patch.
  """
  linesDeleted: Int!

  """
  The tree entry after the change.
  """
  newTreeEntry: TreeEntry

  """
  The tree entry before the change.
  """
  oldTreeEntry: TreeEntry

  """
  The HTML raw patch URL.
  """
  rawUrl: URI! @internal

  """
  The percent similarity in the case of a rename.
  """
  similarity: Int @internal

  """
  Identifies the status of the patch.
  """
  status: PatchStatus!

  """
  The textual diff of this patch.
  """
  text: String

  """
  The textual diff of this patch in Unicode.
  """
  unicodeText: String @internal
}

"""
The connection type for Patch.
"""
type PatchConnection {
  """
  A list of edges.
  """
  edges: [PatchEdge]

  """
  A list of nodes.
  """
  nodes: [Patch]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PatchEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Patch
}

"""
The possible types of patch statuses.
"""
enum PatchStatus {
  """
  The file was added. Git status 'A'.
  """
  ADDED

  """
  The file's type was changed. Git status 'T'.
  """
  CHANGED

  """
  The file was copied. Git status 'C'.
  """
  COPIED

  """
  The file was deleted. Git status 'D'.
  """
  DELETED

  """
  The file's contents were changed. Git status 'M'.
  """
  MODIFIED

  """
  The file was renamed. Git status 'R'.
  """
  RENAMED
}

"""
The user's default payment method
"""
type PaymentMethod @internal @serviceMapping(to: "github/account_management") {
  """
  Last four digits of the credit card number
  """
  cardLastFourDigits: String

  """
  The type of credit card (Visa/MasterCard/etc)
  """
  cardType: String

  """
  The expiration date of the credit card
  """
  expirationDate: DateTime

  """
  The formatted expiration date of the card.
  """
  formattedExpirationDate(
    """
    The format the expiration date should be returned in. Defaults to: %-m/%Y
    """
    format: String
  ): String

  """
  The formatted and sanitized credit card number; e.g. ****-0001
  """
  formattedNumber: String
  id: ID!

  """
  Is this a PayPal payment method?
  """
  isPaypal: Boolean!

  """
  Does the payment method have a valid token?.
  """
  isValid: Boolean! @internal

  """
  On PayPal, the account's email address
  """
  paypalEmail: String
}

"""
Represents a pdf file.
"""
type PdfFileType implements RawBlobUrl @serviceMapping(to: "github/repo_info") {
  """
  The URL to this file.
  """
  url: URI
}

"""
A list of pending repository collaborators for an account.
"""
type PendingCollaboratorConnection @internal @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [PendingCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a pending collaborator on a repository.
"""
type PendingCollaboratorEdge @internal @serviceMapping(to: "github/shared") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The pending invitations for a pending collaborator.
  """
  pendingInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryInvitationConnection! @internal
}

"""
Represents the pending cycle for an account.
"""
type PendingCycle @internal {
  """
  When this pending cycle will be active, and any pending changes will be applied to the account's subscription.
  """
  activeOn: DateTime

  """
  The number of LFS packs.
  """
  dataPacks: Int

  """
  The total cost of data packs with discounts applied.
  """
  dataPacksPrice: Money!

  """
  Are there any pending changes being applied to the next billing cycle?
  """
  hasChanges: Boolean!

  """
  Does the pending cycle have a change to the data packs?
  """
  isChangingDataPacks: Boolean!

  """
  Does the pending cycle have a change to the plan duration?
  """
  isChangingDuration: Boolean!

  """
  Does this pending cycle have any changes to its seat count or include a plan with seats?
  """
  isChangingSeats: Boolean!

  """
  Does the pending cycle have any downgrades being applied?
  """
  isDowngrading: Boolean!

  """
  The total cost of the next billing cycle.
  """
  paymentAmount: Money!

  """
  Changes to marketplace purchases associated with the next billing cycle.
  """
  pendingMarketplaceChanges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The slug of the Marketplace listing we want changes for.
    """
    listingSlug: String
  ): PendingMarketplaceChangeConnection! @serviceMapping(to: "github/marketplace")

  """
  Changes to subscribable purchases associated with the next billing cycle.
  """
  pendingSubscribableChanges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The slug of the Sponsors listing we want changes for.
    """
    listingSlug: String
  ): PendingSubscribableChangeConnection! @serviceMapping(to: "github/account_management")

  """
  The type of plan.
  """
  plan: Plan!

  """
  The duration of the plan.
  """
  planDuration: BillingDuration!

  """
  The total cost of the GitHub plan with discounts applied.
  """
  planPrice: Money!

  """
  The number of seats.
  """
  seats: Int
}

"""
Represents a pending change for a marketplace purchase.
"""
type PendingMarketplaceChange @internal @serviceMapping(to: "github/marketplace") {
  """
  When the change is effective
  """
  activeOn: DateTime!

  """
  Can this change be applied immediately?
  """
  canApply: Boolean!

  """
  The database id for the pending marketplace change.
  """
  id: Int!

  """
  Is the pending change a cancellation?
  """
  isCancellation: Boolean!

  """
  The total cost of the marketplace purchase for the next billing cycle.
  """
  price: Money!

  """
  The number of units for the marketplace purchase.
  """
  quantity: Int

  """
  The subscribable object that this change is related to.
  """
  subscribable: MarketplaceListingPlan!
}

"""
The connection type for PendingMarketplaceChange.
"""
type PendingMarketplaceChangeConnection @internal @serviceMapping(to: "github/marketplace") {
  """
  A list of edges.
  """
  edges: [PendingMarketplaceChangeEdge]

  """
  A list of nodes.
  """
  nodes: [PendingMarketplaceChange]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PendingMarketplaceChangeEdge @internal @serviceMapping(to: "github/marketplace") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PendingMarketplaceChange
}

"""
Represents a pending change for a subscribable purchase.
"""
type PendingSubscribableChange @internal @serviceMapping(to: "github/account_management") {
  """
  When the change is effective
  """
  activeOn: DateTime!

  """
  Can this change be applied immediately?
  """
  canApply: Boolean!

  """
  The database id for the pending subscribable change.
  """
  id: Int!

  """
  Is the pending change a cancellation?
  """
  isCancellation: Boolean!

  """
  The total cost of the subscribable purchase for the next billing cycle.
  """
  price: Money!

  """
  The number of units for the subscribable purchase.
  """
  quantity: Int

  """
  The subscribable object, such as a Marketplace listing plan or GitHub Sponsors tier, that this change is related to.
  """
  subscribable: BillingSubscribable!
}

"""
The connection type for PendingSubscribableChange.
"""
type PendingSubscribableChangeConnection @internal @serviceMapping(to: "github/account_management") {
  """
  A list of edges.
  """
  edges: [PendingSubscribableChangeEdge]

  """
  A list of nodes.
  """
  nodes: [PendingSubscribableChange]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PendingSubscribableChangeEdge @internal @serviceMapping(to: "github/account_management") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PendingSubscribableChange
}

"""
A package vulnerability being ingested and reviewed
"""
type PendingVulnerability @internal @serviceMapping(to: "github/advisory_database") {
  """
  A list of affected packages
  """
  affects: [String]

  """
  The type of vulnerability
  """
  classification: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Who recorded the vulnerability?
  """
  createdBy: Actor

  """
  The CVE ID for this vulnerability if it has one
  """
  cveId: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The rendered description
  """
  descriptionHtml: HTML!

  """
  A list of ecosystems for the affected packages
  """
  ecosystems: [VulnerabilityPlatform]!

  """
  The universal vulnerability identifier e.g. CVE-2017-11666
  """
  externalIdentifier: String

  """
  Link to external vulnerability record
  """
  externalReference: URI

  """
  The GitHub Security Advisory ID for this vulnerability
  """
  ghsaId: String!
  id: ID!

  """
  Whether Pending Vulnerability is in a status that is rejectable
  """
  isRejectable: Boolean!

  """
  Whether Pending Vulnerability is in a status that is reviewable by calling user
  """
  isReviewable: Boolean!

  """
  Is the vulnerability for internal testing only?
  """
  isSimulation: Boolean!

  """
  Whether Pending Vulnerability is in a status that is submittable
  """
  isSubmittable: Boolean!

  """
  A list of affected version ranges
  """
  pendingVulnerableVersionRanges: [PendingVulnerableVersionRange]!

  """
  Time that reviewer A marked reviewer
  """
  reviewAAt: DateTime

  """
  Time that reviewer B marked reviewer
  """
  reviewBAt: DateTime

  """
  The rendered reviewer notes
  """
  reviewNotesHtml: HTML!

  """
  Reviewer A for pending vulnerability
  """
  reviewerA: Actor

  """
  Reviewer B for pending vulnerability
  """
  reviewerB: Actor

  """
  The potential for exploitability of the vulnerability
  """
  severity: VulnerabilitySeverity

  """
  The system that originated this record
  """
  source: String

  """
  The identifier for this record in the originating system
  """
  sourceIdentifier: String

  """
  Where is the pending vulnerability in the review process
  """
  status: PendingVulnerabilityStatus!

  """
  The vulnerability summary
  """
  summary: String

  """
  The Vulnerability this was submitted into
  """
  vulnerability: Vulnerability

  """
  The WhiteSource ID for this vulnerability if it has one
  """
  whiteSourceId: String
}

"""
The connection type for PendingVulnerability.
"""
type PendingVulnerabilityConnection @internal @serviceMapping(to: "github/advisory_database") {
  """
  A list of edges.
  """
  edges: [PendingVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [PendingVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PendingVulnerabilityEdge @internal @serviceMapping(to: "github/advisory_database") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PendingVulnerability
}

"""
Status of the pending vulnerability.
"""
enum PendingVulnerabilityStatus @internal @serviceMapping(to: "github/advisory_database") {
  """
  Pending.
  """
  PENDING

  """
  Rejected.
  """
  REJECTED

  """
  Reviewer A has reviewed this pending vuln
  """
  REVIEWED_A

  """
  Reviewer B has reviewed this pending vuln
  """
  REVIEWED_B

  """
  This pending vuln has been submitted into a Vulnerability
  """
  SUBMITTED
}

"""
An affected version range for a given pending vulnerability
"""
type PendingVulnerableVersionRange @internal @serviceMapping(to: "github/security_alerts") {
  """
  The affected package
  """
  affects: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The package manager of the package
  """
  ecosystem: String

  """
  The estimated number of repositories with dependencies within the range
  """
  estimatedAffectedRepositoryCount: Int

  """
  The fixed version
  """
  fixedIn: String

  """
  The serialized range of affected versions
  """
  requirements: String!
}

"""
Autogenerated input type of PerformImport
"""
input PerformImportInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the importing organization.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["LegacyMigration"])
}

"""
Autogenerated return type of PerformImport
"""
type PerformImportPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending import migration.
  """
  migration: LegacyMigration
}

"""
Represents items that can be created or performed via GitHub Apps.
"""
interface PerformableViaApp @internal {
  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Types that can grant permissions on a repository to a user
"""
union PermissionGranter @serviceMapping(to: "github/community_and_safety") = Organization | Repository | Team

"""
A level of permission and source for a user's access to a repository.
"""
type PermissionSource @serviceMapping(to: "github/roles_and_permissions") {
  """
  The organization the repository belongs to.
  """
  organization: Organization!

  """
  The level of access this source has granted to the user.
  """
  permission: DefaultRepositoryPermissionField!

  """
  The source of this permission.
  """
  source: PermissionGranter!
}

"""
Autogenerated input type of PinIssue
"""
input PinIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to be pinned
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of PinIssue
"""
type PinIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-12-04")

  """
  The issue that was pinned
  """
  issue: Issue
}

"""
Types that can be pinned to a profile page.
"""
union PinnableItem @serviceMapping(to: "github/profiles") = Gist | Repository

"""
The connection type for PinnableItem.
"""
type PinnableItemConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [PinnableItemEdge]

  """
  A list of nodes.
  """
  nodes: [PinnableItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnableItemEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PinnableItem
}

"""
Represents items that can be pinned to a profile page or dashboard.
"""
enum PinnableItemType @serviceMapping(to: "github/profiles") {
  """
  A gist.
  """
  GIST

  """
  An issue.
  """
  ISSUE

  """
  An organization.
  """
  ORGANIZATION

  """
  A project.
  """
  PROJECT

  """
  A pull request.
  """
  PULL_REQUEST

  """
  A repository.
  """
  REPOSITORY

  """
  A team.
  """
  TEAM

  """
  A user.
  """
  USER
}

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
type PinnedDiscussion implements Node & RepositoryNode
  @serviceMapping(to: "github/discussions")
  @useNextGlobalIdFormat(after: "2021-08-30") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The discussion that was pinned.
  """
  discussion: Discussion!

  """
  Color stops of the chosen gradient
  """
  gradientStopColors: [String!]!
  id: ID!

  """
  Background texture pattern
  """
  pattern: PinnedDiscussionPattern!

  """
  The actor that pinned this discussion.
  """
  pinnedBy: Actor!

  """
  Preconfigured background gradient option
  """
  preconfiguredGradient: PinnedDiscussionGradient

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for PinnedDiscussion.
"""
type PinnedDiscussionConnection @serviceMapping(to: "github/discussions") {
  """
  A list of edges.
  """
  edges: [PinnedDiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [PinnedDiscussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnedDiscussionEdge @serviceMapping(to: "github/discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PinnedDiscussion
}

"""
Preconfigured gradients that may be used to style discussions pinned within a repository.
"""
enum PinnedDiscussionGradient @serviceMapping(to: "github/discussions") {
  """
  A gradient of blue to mint
  """
  BLUE_MINT

  """
  A gradient of blue to purple
  """
  BLUE_PURPLE

  """
  A gradient of pink to blue
  """
  PINK_BLUE

  """
  A gradient of purple to coral
  """
  PURPLE_CORAL

  """
  A gradient of red to orange
  """
  RED_ORANGE
}

"""
Preconfigured background patterns that may be used to style discussions pinned within a repository.
"""
enum PinnedDiscussionPattern @serviceMapping(to: "github/discussions") {
  """
  An upward-facing chevron pattern
  """
  CHEVRON_UP

  """
  A hollow dot pattern
  """
  DOT

  """
  A solid dot pattern
  """
  DOT_FILL

  """
  A heart pattern
  """
  HEART_FILL

  """
  A plus sign pattern
  """
  PLUS

  """
  A lightning bolt pattern
  """
  ZAP
}

"""
Represents a 'pinned' event on a given issue or pull request.
"""
type PinnedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
type PinnedIssue implements Node @serviceMapping(to: "github/issues") @useNextGlobalIdFormat(after: "2021-05-15") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The issue that was pinned.
  """
  issue: Issue!

  """
  The actor that pinned this issue.
  """
  pinnedBy: Actor!

  """
  The repository that this issue was pinned to.
  """
  repository: Repository!
}

"""
The connection type for PinnedIssue.
"""
type PinnedIssueConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [PinnedIssueEdge]

  """
  A list of nodes.
  """
  nodes: [PinnedIssue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnedIssueEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PinnedIssue
}

"""
The billing plan associated with a user or organization
"""
type Plan @internal {
  """
  The size in kilobytes made available in the plan.
  """
  allowedDiskSize: Int!

  """
  The number of private repositories allowed in the plan.
  """
  allowedPrivateRepositoriesCount: Int!

  """
  The display name of the plan.
  """
  displayName: String!

  """
  Is the plan the business plan?
  """
  isBusiness: Boolean!

  """
  Is the plan the business plus plan?
  """
  isBusinessPlus: Boolean!

  """
  Is the plan per seat or per repo.
  """
  isPerSeat: Boolean!

  """
  Is the plan the pro plan?
  """
  isPro: Boolean!

  """
  The internal name of the plan.
  """
  name: String!
}

"""
A plan change for a given subscription that provides pricing details
"""
type PlanChange @internal {
  """
  prorated final price to apply the plan change
  """
  finalPrice(
    """
    Should the final price only include GitHub items?
    """
    githubOnly: Boolean

    """
    Should the final price include the account balance?
    """
    useBalance: Boolean
  ): Money!

  """
  the subscription item tied to a plan change for a given listing plan
  """
  subscriptionItem(
    """
    An optional quantity to override the planChange amount.
    """
    quantity: Int

    """
    The ID for the listing plan or sponsors tier tied to the item
    """
    subscribableId: ID
  ): SubscriptionItem!
}

"""
Set of features which are supported based on the billing plan.
"""
enum PlanFeature @serviceMapping(to: "github/account_management") {
  """
  Enables the ability to use Codespaces if the feature flag is enabled
  """
  ALLOW_CODESPACES

  """
  Enables GraphQL API access to audit log entries.
  """
  AUDIT_LOG_API

  """
  Enables automatic review requests and enforcement based on a CODEOWNERS file.
  """
  CODEOWNERS

  """
  Enables autolink references in the owner's repositories.
  """
  CUSTOM_KEY_LINKS

  """
  Enables granular roles beyond read, write, and admin, with the use of fine grained permissions.
  """
  CUSTOM_ROLES

  """
  Enables displaying comment author's full name
  """
  DISPLAY_COMMENTER_FULL_NAME

  """
  Enables the ability for organization owners to view the verified domain emails of organization members.
  """
  DISPLAY_VERIFIED_DOMAIN_EMAILS

  """
  Enables draft pull requests.
  """
  DRAFT_PRS

  """
  Enables granular permissions beyond read, write, and admin.
  """
  FINE_GRAINED_PERMISSIONS

  """
  Enables insights tab for repositories.
  """
  INSIGHTS

  """
  Enables defining an allowed list of IP addresses for access to resources owned by an enterprise or organization.
  """
  IP_ALLOWLIST

  """
  Enables Pages site generated from the repository.
  """
  PAGES

  """
  Enables Pages site generated from the repository to be private.
  """
  PRIVATE_PAGES

  """
  Enables protected branches.
  """
  PROTECTED_BRANCHES

  """
  Enables Scheduled and Realtime Reminders for organizations.
  """
  REMINDERS

  """
  Enables the creation of repositories.
  """
  REPOS

  """
  Enables the ability to export a list of users with access to a repository in an organization.
  """
  REPO_ACCESS_EXPORT

  """
  Enables the ability to restrict email notification delivery to verified domain emails in an organization.
  """
  RESTRICT_NOTIFICATION_DELIVERY

  """
  Enables users to authenticate with organization/enterprise managed SSH certificate authorities.
  """
  SSH_CERTIFICATES

  """
  Enables teams to be requested for review on a pull request.
  """
  TEAM_REVIEW_REQUESTS

  """
  Enables wikis tab for repositories.
  """
  WIKIS
}

"""
Set of features limits which are supported based on the billing plan.
"""
enum PlanFeatureLimit @serviceMapping(to: "github/account_management") {
  """
  The number of collaborators allowed on a repository.
  """
  COLLABORATORS

  """
  The maximum number of users allowed to be assigned to an issue or pull request.
  """
  ISSUE_PR_ASSIGNEES

  """
  The maximum number of users allowed to be requested for review on a pull request.
  """
  MANUAL_REVIEW_REQUESTS

  """
  The maximum size in bytes of an LFS blob.
  """
  MEDIA_BLOB_MAX_SIZE

  """
  The number in seconds a raw blob will be available.
  """
  RAW_BLOB_ACCESS_EXPIRES_IN_SECONDS

  """
  The number of owned repositories allowed.
  """
  REPOS
}

"""
The privacy of a plan feature.
"""
enum PlanFeaturePrivacy @internal @serviceMapping(to: "github/account_management") {
  """
  Private
  """
  PRIVATE

  """
  Public
  """
  PUBLIC
}

"""
Entities that can have a billing plan with various features.
"""
interface PlanOwner @underDevelopment(since: "2018-12-17") @serviceMapping(to: "github/account_management") {
  """
  Returns the limit for the account's billing plan.
  """
  planLimit(
    """
    The limit for the plan feature
    """
    feature: PlanFeatureLimit!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Int! @underDevelopment(since: "2018-12-17")

  """
  Returns whether or not the account's billing plan supports a feature.
  """
  planSupports(
    """
    The plan feature to check
    """
    feature: PlanFeature!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Boolean! @underDevelopment(since: "2018-12-17")
}

"""
An ISO-8601 encoded UTC date string with millisecond precision.
"""
scalar PreciseDateTime @serviceMapping(to: "github/audit_logs")

"""
Autogenerated input type of PrepareImport
"""
input PrepareImportInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the importing organization.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["LegacyMigration"])
}

"""
Autogenerated return type of PrepareImport
"""
type PrepareImportPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending import migration.
  """
  migration: LegacyMigration
}

"""
Audit log entry for a private_repository_forking.clear event.
"""
type PrivateRepositoryForkingClearAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a private_repository_forking.disable event.
"""
type PrivateRepositoryForkingDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a private_repository_forking.enable event.
"""
type PrivateRepositoryForkingEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Account profile record that includes metadata like timestamps.
For internal use only.
Please use public profile fields on User object for public use cases.
"""
type Profile @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Profile bio.
  """
  bio: String

  """
  Profile company.
  """
  company: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Profile email.
  """
  email: String

  """
  Profile location.
  """
  location: String

  """
  Profile name.
  """
  name: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  Profile website URL.
  """
  websiteUrl: URI
}

"""
A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own.
"""
type ProfileItemShowcase @serviceMapping(to: "github/profiles") {
  """
  Whether or not the owner has pinned any repositories or gists.
  """
  hasPinnedItems: Boolean!

  """
  The repositories and gists in the showcase. If the profile owner has any
  pinned items, those will be returned. Otherwise, the profile owner's popular
  repositories will be returned.
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PinnableItemConnection!
}

"""
Represents any entity on GitHub that has a profile page.
"""
interface ProfileOwner @serviceMapping(to: "github/profiles") {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Filter to only a particular kind of pinnable item.
    """
    type: PinnableItemType
  ): Boolean!

  """
  The public profile email.
  """
  email: String
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The public profile name.
  """
  name: String

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  The public profile website URL.
  """
  websiteUrl: URI
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type Project implements Closable & Node & Updatable
  @serviceMapping(to: "github/projects")
  @useNextGlobalIdFormat(after: "2021-07-09") {
  """
  The HTTP path for this project's activity
  """
  activityResourcePath: URI! @internal

  """
  The HTTP URL for this project's activity
  """
  activityUrl: URI! @internal

  """
  The HTTP path for the link to add cards to this project
  """
  addCardsLinkResourcePath: URI! @internal

  """
  The HTTP URL for the link to add cards to this project
  """
  addCardsLinkUrl: URI! @internal

  """
  A list of teams that could be added to this project by the current viewer
  """
  addableTeamsForViewer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters teams with query on team name and team slug
    """
    query: String
  ): TeamConnection! @internal

  """
  The HTTP path for a list of this project's administrators
  """
  adminsSettingsResourcePath: URI! @internal

  """
  The HTTP URL for a list of this project's administrators
  """
  adminsSettingsUrl: URI! @internal

  """
  The HTTP path for this project's archived cards
  """
  archivedCardsResourcePath: URI! @internal

  """
  The HTTP URL for this project's archived cards
  """
  archivedCardsUrl: URI! @internal

  """
  The HTTP path for a column's automation options
  """
  automationOptionsResourcePath: URI! @internal

  """
  The HTTP URL for a column's automation options
  """
  automationOptionsUrl: URI! @internal

  """
  The project's description body.
  """
  body: String

  """
  The projects description body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  List of cards in this project
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include pending cards in the returned cards
    """
    includePending: Boolean = true

    """
    Include cards already in columns in the returned cards
    """
    includeTriaged: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectCardConnection! @internal

  """
  The HTTP path for this project's cards
  """
  cardsResourcePath: URI! @internal

  """
  The HTTP URL for this project's cards
  """
  cardsUrl: URI! @internal

  """
  The HTTP path for cloning this project
  """
  cloneResourcePath: URI! @internal

  """
  The HTTP URL for cloning this project
  """
  cloneUrl: URI! @internal

  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  A list of users that have direct access to this project.
  """
  collaborators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectUserConnection! @internal

  """
  List of columns in the project
  """
  columns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectColumnConnection!

  """
  The HTTP path for this project's columns
  """
  columnsResourcePath: URI! @internal

  """
  The HTTP URL for this project's columns
  """
  columnsUrl: URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The HTTP edit path for this project
  """
  editResourcePath: URI! @internal

  """
  The HTTP edit URL for this project
  """
  editUrl: URI! @internal

  """
  The HTTP path for viewing this project in fullscreen mode
  """
  fullscreenResourcePath: URI! @internal

  """
  The HTTP URL for viewing this project in fullscreen mode
  """
  fullscreenUrl: URI! @internal

  """
  Whether this project has the maximum number of repositories linked.
  """
  hasMaxLinkedRepositories: Boolean! @underDevelopment(since: "2018-08-14")
  id: ID!

  """
  Whether the project is saved as public
  """
  isPublic: Boolean! @internal

  """
  The HTTP path for searching repositories for linking
  """
  linkableRepositoriesResourcePath: URI! @internal

  """
  The HTTP URL for searching repositories for linking
  """
  linkableRepositoriesUrl: URI! @internal

  """
  A list of repositories linked to this project.
  """
  linkedRepositories: [Repository] @underDevelopment(since: "2018-06-29")

  """
  The HTTP path for adding and removing linked repositories
  """
  linkedRepositoriesSettingsResourcePath: URI! @internal

  """
  The HTTP URL for adding and removing linked repositories
  """
  linkedRepositoriesSettingsUrl: URI! @internal

  """
  Message to display when project locked for cloning.
  """
  lockedForCloningBy: String @internal

  """
  Message to display when project locked for automation resync.
  """
  lockedForResyncBy: String @internal

  """
  The web socket channel ID for project metadata live updates.
  """
  metadataWebsocket: String! @internal

  """
  The project's name.
  """
  name: String!

  """
  The HTTP path to create new project workflows
  """
  newWorkflowResourcePath: URI! @internal

  """
  The HTTP URL to create new project workflows
  """
  newWorkflowUrl: URI! @internal

  """
  The project's number.
  """
  number: Int!

  """
  The HTTP path for this project's organization settings
  """
  orgSettingsResourcePath: URI! @internal

  """
  The HTTP URL for this project's organization settings
  """
  orgSettingsUrl: URI! @internal

  """
  The permission that all members of the owning organization have on this project.
  """
  organizationPermission: ProjectPermission @internal

  """
  The project's owner. Currently limited to repositories, organizations, and users.
  """
  owner: ProjectOwner!

  """
  List of pending cards in this project
  """
  pendingCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection!

  """
  The HTTP path for previewing a note
  """
  previewNoteResourcePath: URI! @internal

  """
  The HTTP URL for previewing a note
  """
  previewNoteUrl: URI! @internal

  """
  Project progress details.
  """
  progress: ProjectProgress!

  """
  Whether the project is publicly visible
  """
  publicProjectOrOwner: Boolean! @internal

  """
  The HTTP path for reordering this project's columns
  """
  reorderColumnsResourcePath: URI! @internal

  """
  The HTTP URL for reordering this project's columns
  """
  reorderColumnsUrl: URI! @internal

  """
  The HTTP path for this project
  """
  resourcePath: URI!

  """
  The search query that the current viewer has saved
  """
  searchQueryForViewer: String @internal

  """
  The HTTP path for search results for cards to add to this project
  """
  searchResultsResourcePath: URI! @internal

  """
  The HTTP URL for search results for cards to add to this project
  """
  searchResultsUrl: URI! @internal

  """
  The HTTP path for this project's settings
  """
  settingsResourcePath: URI! @internal

  """
  The HTTP URL for this project's settings
  """
  settingsUrl: URI! @internal

  """
  ID of source
  """
  sourceId: Int @internal

  """
  Source type when not created from scratch
  """
  sourceKind: String @internal

  """
  Whether the project is open or closed.
  """
  state: ProjectState!

  """
  Suggestions for repositories that could be linked to this project.
  """
  suggestedRepositoriesToLink: [Repository] @internal

  """
  The HTTP path for valid project owners when cloning
  """
  targetOwnerResultsResourcePath: URI! @internal

  """
  The HTTP URL for valid project owners when cloning
  """
  targetOwnerResultsUrl: URI! @internal

  """
  A list of teams that have access to this project.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectTeamConnection! @internal

  """
  The HTTP path for this project's team settings
  """
  teamsSettingsResourcePath: URI! @internal

  """
  The HTTP path for this project's team results when searching for a team to add
  """
  teamsSettingsTeamResultsResourcePath: URI! @internal

  """
  The HTTP URL for this project's team results when searching for a team to add
  """
  teamsSettingsTeamResultsUrl: URI! @internal

  """
  The HTTP URL for this project's team settings
  """
  teamsSettingsUrl: URI! @internal

  """
  Whether project progress should be tracked or not
  """
  trackProgress: Boolean! @internal

  """
  The HTTP path for updating this project's state
  """
  updateStateResourcePath: URI! @internal

  """
  The HTTP URL for updating this project's state
  """
  updateStateUrl: URI! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project
  """
  url: URI!

  """
  A user's permission on the project
  """
  userPermission(
    """
    ID of the user whose permission we're trying to get
    """
    userId: ID!
  ): ProjectPermission @internal

  """
  The HTTP path for this project's collaborator settings
  """
  usersSettingsResourcePath: URI! @internal

  """
  The HTTP URL for this project's collaborator settings
  """
  usersSettingsUrl: URI! @internal

  """
  A list of users who have access to this project
  """
  usersWithAccess(
    """
    Collaborators' affiliation level with the project.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Minimum level of project access
    """
    permission: ProjectPermission = READ
  ): UserConnection! @internal

  """
  Check if the current viewer can administer this object.
  """
  viewerCanAdminister: Boolean! @internal

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  The web socket channel ID for live updates.
  """
  websocket: String! @internal

  """
  List of workflows in the project
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectWorkflowConnection! @internal
}

"""
A card in a project.
"""
type ProjectCard implements Node @serviceMapping(to: "github/projects") @useNextGlobalIdFormat(after: "2021-07-09") {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  column: ProjectColumn

  """
  The card content item
  """
  content: ProjectCardItem

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this card
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Whether the card is archived
  """
  isArchived: Boolean!

  """
  The card note
  """
  note: String

  """
  The project that contains this card.
  """
  project: Project!

  """
  The HTTP path for this card
  """
  resourcePath: URI!

  """
  The state of ProjectCard
  """
  state: ProjectCardState

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this card
  """
  url: URI!
}

"""
The possible archived states of a project card.
"""
enum ProjectCardArchivedState @serviceMapping(to: "github/projects") {
  """
  A project card that is archived
  """
  ARCHIVED

  """
  A project card that is not archived
  """
  NOT_ARCHIVED
}

"""
The connection type for ProjectCard.
"""
type ProjectCardConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectCardEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectCard]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectCardEdge @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectCard
}

"""
An issue or PR and its owning repository to be used in a project card.
"""
input ProjectCardImport @serviceMapping(to: "github/projects") {
  """
  The issue or pull request number.
  """
  number: Int!

  """
  Repository name with owner (owner/repository).
  """
  repository: String!
}

"""
Types that can be inside Project Cards.
"""
union ProjectCardItem @serviceMapping(to: "github/projects") = Issue | PullRequest

"""
Various content states of a ProjectCard
"""
enum ProjectCardState @serviceMapping(to: "github/projects") {
  """
  The card has content only.
  """
  CONTENT_ONLY

  """
  The card has a note only.
  """
  NOTE_ONLY

  """
  The card is redacted.
  """
  REDACTED
}

"""
A column inside a project.
"""
type ProjectColumn implements Node @serviceMapping(to: "github/projects") @useNextGlobalIdFormat(after: "2021-03-18") {
  """
  The HTTP path for archiving the cards in a project column
  """
  archiveResourcePath: URI! @internal

  """
  The HTTP URL for archiving the cards in a project column
  """
  archiveUrl: URI! @internal

  """
  List of cards in the column
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectCardConnection!

  """
  The HTTP path for this project column's cards
  """
  cardsResourcePath: URI! @internal

  """
  The HTTP URL for this project column's cards
  """
  cardsUrl: URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The project column's name.
  """
  name: String!

  """
  The project that contains this column.
  """
  project: Project!

  """
  The semantic purpose of the column
  """
  purpose: ProjectColumnPurpose

  """
  The HTTP path for this project column
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this project column
  """
  url: URI!

  """
  The HTTP path for this project column's workflow
  """
  workflowResourcePath: URI! @internal

  """
  The HTTP URL for this project column's workflow
  """
  workflowUrl: URI! @internal

  """
  List of workflows associated with the project column
  """
  workflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectWorkflowConnection! @internal
}

"""
The connection type for ProjectColumn.
"""
type ProjectColumnConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectColumnEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectColumn]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectColumnEdge @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectColumn
}

"""
A project column and a list of its issues and PRs.
"""
input ProjectColumnImport @serviceMapping(to: "github/projects") {
  """
  The name of the column.
  """
  columnName: String!

  """
  A list of issues and pull requests in the column.
  """
  issues: [ProjectCardImport!]

  """
  The position of the column, starting from 0.
  """
  position: Int!
}

"""
The semantic purpose of the column - todo, in progress, or done.
"""
enum ProjectColumnPurpose @serviceMapping(to: "github/projects") {
  """
  The column contains cards which are complete
  """
  DONE

  """
  The column contains cards which are currently being worked on
  """
  IN_PROGRESS

  """
  The column contains cards still to be worked on
  """
  TODO
}

"""
A list of projects associated with the owner.
"""
type ProjectConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a project.create
"""
type ProjectCreateAuditEntry implements AuditEntry & Node
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The database ID of the project.
  """
  projectDatabaseId: Int!

  """
  The name of the new project.
  """
  projectName: String!

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An edge in a connection.
"""
type ProjectEdge @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
Represents an event related to a project on the timeline of an issue or pull request.
"""
interface ProjectEvent @internal @serviceMapping(to: "github/projects") {
  """
  Project referenced by event.
  """
  project: Project

  """
  Did this event result from workflow automation?
  """
  wasAutomated: Boolean! @internal
}

"""
New projects that manage issues, pull requests and drafts with tables and.
"""
type ProjectNext implements Closable & Node & Updatable @serviceMapping(to: "github/memex") {
  """
  Returns true if the project is closed.
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The project's description.
  """
  description: String

  """
  List of fields in the project
  """
  fields(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectNextFieldConnection!
  id: ID!

  """
  List of items in the project
  """
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectNextItemConnection!

  """
  The project's number.
  """
  number: Int!

  """
  The project's owner. Currently limited to organizations.
  """
  owner: ProjectNextOwner!

  """
  The project's name.
  """
  title: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
The connection type for ProjectNext.
"""
type ProjectNextConnection @serviceMapping(to: "github/memex") {
  """
  A list of edges.
  """
  edges: [ProjectNextEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectNext]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectNextEdge @serviceMapping(to: "github/memex") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectNext
}

"""
A field inside a project.
"""
type ProjectNextField @serviceMapping(to: "github/memex") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The project field's name.
  """
  name: String!

  """
  The project that contains this column.
  """
  project: ProjectNext!

  """
  The field's settings.
  """
  settings: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectNextField.
"""
type ProjectNextFieldConnection @serviceMapping(to: "github/memex") {
  """
  A list of edges.
  """
  edges: [ProjectNextFieldEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectNextField]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectNextFieldEdge @serviceMapping(to: "github/memex") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectNextField
}

"""
An item in a Memex project.
"""
type ProjectNextItem implements Node @serviceMapping(to: "github/memex") {
  """
  The content of the referenced issue or pull request
  """
  content: ProjectNextItemContent

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  List of field values
  """
  fieldValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectNextItemFieldValueConnection!
  id: ID!

  """
  The project that contains this item.
  """
  project: ProjectNext!

  """
  The title of the item
  """
  title: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectNextItem.
"""
type ProjectNextItemConnection @serviceMapping(to: "github/memex") {
  """
  A list of edges.
  """
  edges: [ProjectNextItemEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectNextItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectNextItemContent @serviceMapping(to: "github/memex") = Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectNextItemEdge @serviceMapping(to: "github/memex") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectNextItem
}

"""
An value of a field in an item of Memex project.
"""
type ProjectNextItemFieldValue implements Node @serviceMapping(to: "github/memex") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created the item.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The project field that contains this value.
  """
  projectField: ProjectNextField!

  """
  The project item that contains this value.
  """
  projectItem: ProjectNextItem!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The value of a field
  """
  value: String
}

"""
The connection type for ProjectNextItemFieldValue.
"""
type ProjectNextItemFieldValueConnection @serviceMapping(to: "github/memex") {
  """
  A list of edges.
  """
  edges: [ProjectNextItemFieldValueEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectNextItemFieldValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectNextItemFieldValueEdge @serviceMapping(to: "github/memex") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectNextItemFieldValue
}

"""
Represents an owner of a Project.
"""
interface ProjectNextOwner @serviceMapping(to: "github/projects") {
  id: ID!

  """
  Find project by project next number.
  """
  projectNext(
    """
    The project next number.
    """
    number: Int!
  ): ProjectNext

  """
  A list of project next items under the owner.
  """
  projectsNext(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): ProjectNextConnection!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder @serviceMapping(to: "github/projects") {
  """
  The direction in which to order projects by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order projects by.
  """
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField @serviceMapping(to: "github/projects") {
  """
  Order projects by creation time
  """
  CREATED_AT

  """
  Order projects by name
  """
  NAME

  """
  Order projects by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner @serviceMapping(to: "github/projects") {
  id: ID!

  """
  Is the project owner (organization, user, or a repo) managed by an Identity Provider
  """
  isEnterpriseManaged: Boolean! @internal

  """
  The HTTP path to create new projects
  """
  newProjectResourcePath: URI! @internal

  """
  The HTTP URL to create new projects
  """
  newProjectUrl: URI! @internal

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to only include public projects.
    """
    includePrivate: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing owners projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing owners projects
  """
  projectsUrl: URI!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!
}

"""
The access level to a project
"""
enum ProjectPermission @internal @serviceMapping(to: "github/projects") {
  """
  Can read, write, and modify permissions
  """
  ADMIN

  """
  Cannot read or do anything else
  """
  NONE

  """
  Can read
  """
  READ

  """
  Can read and write
  """
  WRITE
}

"""
Project progress stats.
"""
type ProjectProgress @serviceMapping(to: "github/projects") {
  """
  The number of done cards.
  """
  doneCount: Int!

  """
  The percentage of done cards.
  """
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """
  The number of in-progress cards.
  """
  inProgressCount: Int!

  """
  The percentage of in-progress cards.
  """
  inProgressPercentage: Float!

  """
  The number of to do cards.
  """
  todoCount: Int!

  """
  The percentage of to do cards.
  """
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState @serviceMapping(to: "github/projects") {
  """
  The project is closed.
  """
  CLOSED

  """
  The project is open.
  """
  OPEN
}

"""
The connection type for Team.
"""
type ProjectTeamConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectTeamEdge]

  """
  A list of nodes.
  """
  nodes: [Team]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a connection between a project (parent) and a team (child).
"""
type ProjectTeamEdge @internal @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Team

  """
  The permission level the team has on the project
  """
  permission: ProjectPermission!

  """
  The HTTP path for this project's team
  """
  projectTeamResourcePath: URI!

  """
  The HTTP URL for this project's team
  """
  projectTeamUrl: URI!
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate @serviceMapping(to: "github/projects") {
  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board with columns for To do, In progress and Done.
  """
  BASIC_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""
The connection type for User.
"""
type ProjectUserConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectUserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user project.
"""
type ProjectUserEdge @internal @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The permission level the user has on the project
  """
  permission: ProjectPermission!

  """
  The HTTP path for this project's user
  """
  projectUserResourcePath: URI! @internal

  """
  The HTTP URL for this project's user
  """
  projectUserUrl: URI! @internal
}

"""
Automated workflow in a project triggered by an event.
"""
type ProjectWorkflow implements Node @internal @serviceMapping(to: "github/projects") {
  """
  List of actions for the workflow.
  """
  actions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectWorkflowActionConnection! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project workflow.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The actor who performed the last update to the project workflow.
  """
  lastUpdater: Actor

  """
  The project that this workflow applies to.
  """
  project: Project!

  """
  The project column that this workflow applies to.
  """
  projectColumn: ProjectColumn

  """
  The HTTP edit path for this project workflow
  """
  resourcePath: URI! @internal

  """
  The trigger type that initiates the project workflow.
  """
  triggerType: ProjectWorkflowTriggerType!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP edit URL for this project workflow
  """
  url: URI! @internal
}

"""
An action to perform as a part of an automated workflow.
"""
type ProjectWorkflowAction implements Node @internal @serviceMapping(to: "github/projects") {
  """
  The type of action to perform for a project workflow.
  """
  actionType: ProjectWorkflowActionType!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who originally created the project workflow action.
  """
  creator: Actor

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The actor who performed the last update to the project workflow action.
  """
  lastUpdater: Actor

  """
  The project that this workflow applies to.
  """
  projectWorkflow: ProjectWorkflow!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for ProjectWorkflowAction.
"""
type ProjectWorkflowActionConnection @internal @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectWorkflowActionEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectWorkflowAction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectWorkflowActionEdge @internal @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectWorkflowAction
}

"""
The type of action to perform for a project workflow.
"""
enum ProjectWorkflowActionType @internal @serviceMapping(to: "github/projects") {
  """
  Move card to another column
  """
  TRANSITION_TO_COLUMN
}

"""
The connection type for ProjectWorkflow.
"""
type ProjectWorkflowConnection @internal @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [ProjectWorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectWorkflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectWorkflowEdge @internal @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectWorkflow
}

"""
The trigger type that initiates the project workflow.
"""
enum ProjectWorkflowTriggerType @internal @serviceMapping(to: "github/projects") {
  """
  An issue that belongs to the project was closed.
  """
  ISSUE_CLOSED

  """
  A project card was added from an issue.
  """
  ISSUE_PENDING_CARD_ADDED

  """
  An issue that belongs to the project was reopened.
  """
  ISSUE_REOPENED

  """
  A pull request that belongs to the project was approved.
  """
  PR_APPROVED

  """
  A pull request that belongs to the project was closed without merging changes.
  """
  PR_CLOSED_NOT_MERGED

  """
  A pull request that belongs to the project was merged.
  """
  PR_MERGED

  """
  A pull request that belongs to the project has requested changes or approved reviews were dismissed.
  """
  PR_PENDING_APPROVAL

  """
  A project card was added from a pull request.
  """
  PR_PENDING_CARD_ADDED

  """
  A pull request that belongs to the project was reopened.
  """
  PR_REOPENED
}

"""
A user's public key.
"""
type PublicKey implements Node
  @serviceMapping(to: "github/ssh_authentication")
  @useNextGlobalIdFormat(after: "2021-05-15") {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: DateTime

  """
  Identifies the date and time when the key was created. Keys created before
  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: DateTime

  """
  The fingerprint for this PublicKey.
  """
  fingerprint: String!
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """
  The public key string.
  """
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before
  March 5th, 2014 may have inaccurate values. Values will be null for keys not
  owned by the user.
  """
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection @serviceMapping(to: "github/ssh_authentication") {
  """
  A list of edges.
  """
  edges: [PublicKeyEdge]

  """
  A list of nodes.
  """
  nodes: [PublicKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge @serviceMapping(to: "github/ssh_authentication") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PublicKey
}

"""
Autogenerated input type of PublishMarketplaceListingPlan
"""
input PublishMarketplaceListingPlanInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing plan ID to publish.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])
}

"""
Autogenerated return type of PublishMarketplaceListingPlan
"""
type PublishMarketplaceListingPlanPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The published Marketplace listing plan.
  """
  marketplaceListingPlan: MarketplaceListingPlan
}

"""
A repository pull request.
"""
type PullRequest implements AbuseReportable & Assignable & Blockable & Closable & Comment & Commentable & Labelable & Lockable & Node & PerformableViaApp & Reactable & Reportable & RepositoryNode & Subscribable & Trigger & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  Number of workflow runs pending approval on the pull request
  """
  actionRequiredWorkflowRunCount: Int!

  """
  Reason that the conversation was locked.
  """
  activeLockReason: LockReason

  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  A list of Users assigned to this object.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: AutoMergeRequest

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The owner of the repository associated with this pull request's base Ref.
  """
  baseRepositoryOwner: RepositoryOwner @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the body hash of the pull request.
  """
  bodyVersion: String! @internal

  """
  Whether or not the pull request is rebaseable.
  """
  canBeRebased: Boolean!

  """
  The number of changed files in this pull request.
  """
  changedFiles: Int!

  """
  The HTTP path for the checks of this pull request.
  """
  checksResourcePath: URI!

  """
  The HTTP URL for the checks of this pull request.
  """
  checksUrl: URI!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  The actor who closed the pull request.
  """
  closedBy: Actor @internal

  """
  List of issues that were may be closed by this pull request
  """
  closingIssuesReferences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection
    """
    orderBy: IssueOrder
  ): IssueConnection @serviceMapping(to: "github/issues")

  """
  Find a particular comment on this pull request.
  """
  comment(
    """
    Look up comment by its database ID.
    """
    databaseId: Int!
  ): IssueComment @underDevelopment(since: "2018-10-05")

  """
  Type of comment
  """
  commentType: String! @internal

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder

    """
    List issue comments since given date
    """
    since: DateTime @underDevelopment(since: "2018-08-13")
  ): IssueCommentConnection! @serviceMapping(to: "github/issues")

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestCommitConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  Identifies a diff over two commits within this pull request.
  """
  diff(
    """
    How long to allow for loading the diff.
    """
    timeout: Int
  ): Diff

  """
  The HTTP path to dismiss merge tips for the viewer.
  """
  dismissMergeTipResourcePath: URI! @internal

  """
  The HTTP URL to dismiss merge tips for the viewer.
  """
  dismissMergeTipUrl: URI! @internal

  """
  The actor who edited this pull request's body.
  """
  editor: Actor

  """
  Lists the files changed within this pull request.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestChangedFileConnection

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner

  """
  The hovercard information for this issue
  """
  hovercard(
    """
    Whether or not to include notification contexts
    """
    includeNotificationContexts: Boolean = true
  ): Hovercard!
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Whether or not the pull request is corrupt.
  """
  isCorrupt: Boolean! @internal

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  """
  The pull request issue's database ID. This is a legacy requirement of the REST API and should never be exposed publicly.
  """
  issueDatabaseId: Int! @internal

  """
  A list of labels associated with the object.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}
  ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  A list of latest reviews per user associated with the pull request.
  """
  latestOpinionatedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return reviews from user who have write access to the repository
    """
    writersOnly: Boolean = false
  ): PullRequestReviewConnection

  """
  Latest pull request review comment created by current viewer
  """
  latestReviewCommentByViewer: PullRequestReviewComment @underDevelopment(since: "2021-05-26")

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  """
  A list of mentionable items that can be mentioned in the context of this pull request.
  """
  mentionableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users, teams with query on mentionable items
    """
    query: String
  ): MentionableItemConnection

  """
  The commit that was created when this pull request was merged.
  """
  mergeCommit: Commit

  """
  Detailed information about the current pull request merge state status.
  """
  mergeStateStatus: MergeStateStatus!

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  """
  Identifies the milestone associated with the pull request.
  """
  milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  The image URL used to represent this resource in open graph data
  """
  ogImageUrl: URI @internal

  """
  Indicates whether the issue or pull request has exceeded the comment limit.
  """
  overCommentLimit: Boolean! @underDevelopment(since: "2018-10-02")

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """
  List of project cards associated with this pull request.
  """
  projectCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    A list of archived states to filter the cards by
    """
    archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectCardConnection! @serviceMapping(to: "github/projects")

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  A list of required status checks expected for this commit.
  """
  requiredStatusChecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RequiredStatusCheckConnection!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for restoring this pull request's head ref.
  """
  restoreHeadRefResourcePath: URI! @internal

  """
  The HTTP URL for restoring this pull request's head ref.
  """
  restoreHeadRefUrl: URI! @internal

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  Find a particular code review of this pull request.
  """
  review(
    """
    Look up review by its database ID.
    """
    databaseId: Int!
  ): PullRequestReview @underDevelopment(since: "2018-10-18")

  """
  Find a particular comment in a review on this pull request.
  """
  reviewComment(
    """
    Look up comment by its database ID.
    """
    databaseId: Int!
  ): PullRequestReviewComment @underDevelopment(since: "2018-10-11")

  """
  The current status of this pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision

  """
  A list of review points associated with the pull request.
  """
  reviewPoints(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewPointConnection

  """
  A list of review requests associated with the pull request.
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection

  """
  The list of all review threads for this pull request.
  """
  reviewThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewThreadConnection!

  """
  A list of reviews associated with the pull request.
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter by author of the review.
    """
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    A list of states to filter the reviews.
    """
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-02")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  Identifies the state of the pull request.
  """
  state: PullRequestState!

  """
  The status contexts belonging to the last commit before merge that were created before the merge.
  """
  statusAtMerge: Status @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  A list of suggested users to assign to this object
  """
  suggestedAssignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If provided, searches users by login or profile name
    """
    query: String
  ): UserConnection! @serviceMapping(to: "github/mobile_api")

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  Number of tasks in the pull request's task list
  """
  taskListItemCount(
    """
    Limit the count to tasks in the specified statuses.
    """
    statuses: [TaskListItemStatus]
  ): Int!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Allows filtering timeline events by a `since` timestamp.
    """
    since: DateTime
  ): PullRequestTimelineConnection!
    @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  Get a timeline item from a url
  """
  timelineItem(
    """
    The url to decode.
    """
    url: String
  ): PullRequestTimelineItems

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of element to focus on.
    """
    focus: ID

    """
    Filter timeline items by type.
    """
    itemTypes: [PullRequestTimelineItemsItemType!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter timeline items by a `since` timestamp.
    """
    since: DateTime

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int

    """
    Only return events visible in GitHub's UI.
    """
    visibleEventsOnly: Boolean @internal
  ): PullRequestTimelineItemsConnection!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Indicates whether the current user has been blocked by the issue or pull request's author.
  """
  viewerBlockedByAuthor: Boolean! @internal

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  `true` if the current user can close the issue or PR.
  """
  viewerCanClose: Boolean! @internal

  """
  Indicates whether the current user can add a new comment.
  """
  viewerCanComment: Boolean! @underDevelopment(since: "2018-10-02")

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Whether or not the viewer can disable auto-merge
  """
  viewerCanDisableAutoMerge: Boolean!

  """
  Whether or not the viewer can enable auto-merge
  """
  viewerCanEnableAutoMerge: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanRestoreHeadRef: Boolean! @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Check if the viewer has a pending review on this pull request.
  """
  viewerHasPendingReview: Boolean! @internal

  """
  The latest review given from the viewer.
  """
  viewerLatestReview: PullRequestReview

  """
  The person who has requested the viewer for review on this pull request.
  """
  viewerLatestReviewRequest: ReviewRequest

  """
  The merge body text for the viewer and method.
  """
  viewerMergeBodyText(
    """
    The merge method for the message.
    """
    mergeType: PullRequestMergeMethod
  ): String!

  """
  The merge headline text for the viewer and method.
  """
  viewerMergeHeadlineText(
    """
    The merge method for the message.
    """
    mergeType: PullRequestMergeMethod
  ): String!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  The websocket channel ID for live updates.
  """
  websocket(
    """
    The channel to use.
    """
    channel: PullRequestPubSubTopic!
  ): String! @internal
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile @serviceMapping(to: "github/pull_requests") {
  """
  The number of additions to the file.
  """
  additions: Int!

  """
  The number of deletions to the file.
  """
  deletions: Int!

  """
  The path of the file.
  """
  path: String!

  """
  The state of the file for the viewer.
  """
  viewerViewedState: FileViewedState!
}

"""
The connection type for PullRequestChangedFile.
"""
type PullRequestChangedFileConnection @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestChangedFileEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequestChangedFile]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestChangedFileEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestChangedFile
}

"""
Represents a Git commit part of a pull request.
"""
type PullRequestCommit implements Node & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  The Git commit object
  """
  commit: Commit!
  id: ID!

  """
  The pull request this commit belongs to
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this pull request commit
  """
  resourcePath: URI!

  """
  The HTTP URL for this pull request commit
  """
  url: URI!

  """
  The websocket channel ID for live updates.
  """
  websocket: String! @internal
}

"""
Represents a commit comment thread part of a pull request.
"""
type PullRequestCommitCommentThread implements Node & RepositoryNode @serviceMapping(to: "github/pull_requests") {
  """
  The comments that exist in this thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int @internal
  ): CommitCommentConnection!

  """
  The commit the comments were made on.
  """
  commit: Commit!
  id: ID!

  """
  The file the comments were made on.
  """
  path: String

  """
  The position in the diff for the commit that the comment was made on.
  """
  position: Int

  """
  The pull request this commit comment thread belongs to
  """
  pullRequest: PullRequest!

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
The connection type for PullRequestCommit.
"""
type PullRequestCommitConnection @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestCommitEdge]

  """
  Identifies whether the number of commits exceeds the limit.
  """
  hasLimitExceeded: Boolean! @internal

  """
  A list of nodes.
  """
  nodes: [PullRequestCommit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestCommitEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestCommit
}

"""
The connection type for PullRequest.
"""
type PullRequestConnection @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
This aggregates pull requests opened by a user within one repository.
"""
type PullRequestContributionsByRepository @serviceMapping(to: "github/pull_requests") {
  """
  The pull request contributions.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestContributionConnection!

  """
  A list of data about pull request contributions based on the pull request's state.
  """
  contributionsByState: [PullRequestContributionsByState!]!

  """
  The repository in which the pull requests were opened.
  """
  repository: Repository!
}

"""
This aggregates pull request contributions by state.
"""
type PullRequestContributionsByState
  @underDevelopment(since: "2018-10-02")
  @serviceMapping(to: "github/pull_requests") {
  """
  The state the pull requests are in.
  """
  state: PullRequestState!

  """
  A count of how many contributions are in this state.
  """
  totalContributions: Int!
}

"""
An edge in a connection.
"""
type PullRequestEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequest
}

"""
Ways in which to filter lists of pull requests.
"""
input PullRequestFilters @serviceMapping(to: "github/pull_requests") {
  """
  The assignee by which the pull requests are filtered.
  """
  assignee: String

  """
  The author by which the pull requests are filtered.
  """
  author: String

  """
  The name of the base branch by which the pull requests are filtered
  """
  baseRefName: String

  """
  The label names by which the pull requests are filtered.
  """
  labels: [String!]

  """
  The mentioned login by which the pull requests are filtered.
  """
  mentions: String

  """
  The milestone by which the pull requests are filtered.
  """
  milestone: String

  """
  The login of the requested reviewer by whom the pull requests are filtered.
  """
  reviewRequested: String

  """
  The review state by which the pull requests are filtered.
  """
  reviewState: PullRequestReviewStateFilter

  """
  The login of the reviewer by whom the pull requests are filtered.
  """
  reviewedBy: String

  """
  The state by which the pull requests are filtered.
  """
  state: PullRequestState
}

"""
Represents available types of methods to use when merging a pull request.
"""
enum PullRequestMergeMethod @serviceMapping(to: "github/merge") {
  """
  Add all commits from the head branch to the base branch with a merge commit.
  """
  MERGE

  """
  Add all commits from the head branch onto the base branch individually.
  """
  REBASE

  """
  Combine all commits from the head branch into a single commit in the base branch.
  """
  SQUASH
}

"""
Ways in which lists of issues can be ordered upon return.
"""
input PullRequestOrder @serviceMapping(to: "github/extensibility") {
  """
  The direction in which to order pull requests by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order pull requests by.
  """
  field: PullRequestOrderField!
}

"""
Properties by which pull_requests connections can be ordered.
"""
enum PullRequestOrderField @serviceMapping(to: "github/extensibility") {
  """
  Order pull_requests by creation time
  """
  CREATED_AT

  """
  Order pull_requests by update time
  """
  UPDATED_AT
}

"""
The possible PubSub channels for a pull request.
"""
enum PullRequestPubSubTopic {
  """
  The channel ID for observing head ref updates.
  """
  HEAD_REF

  """
  The channel ID for observing pull request state updates.
  """
  STATE

  """
  The channel ID for updating items on the pull request timeline.
  """
  TIMELINE

  """
  The channel ID for observing pull request updates.
  """
  UPDATED
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements AbuseReportable & Blockable & Comment & Deletable & Node & Reactable & Reportable & RepositoryNode & Updatable & UpdatableComment
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  Indicates whether the author of this review has push access to the repository.
  """
  authorCanPushToRepository: Boolean!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  Identifies the pull request review body.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body of this review rendered as plain text.
  """
  bodyText: String!

  """
  Identifies the pull request review body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  A list of review comments for the current pull request review.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): PullRequestReviewCommentConnection! @serviceMapping(to: "github/pull_request_reviews")

  """
  Identifies the commit associated with this pull request review.
  """
  commit: Commit

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The HTTP path permalink for the pull request diff of the review.
  """
  diffResourcePath: URI! @internal

  """
  The HTTP URL permalink for the pull request diff of the review.
  """
  diffUrl: URI! @internal

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  A list of teams that this review was made on behalf of.
  """
  onBehalfOf(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Identifies the pull request associated with this pull request review.
  """
  pullRequest: PullRequest!

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this PullRequestReview.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  Identifies the current state of the pull request review.
  """
  state: PullRequestReviewState!

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies when the Pull Request Review was submitted
  """
  submittedAt: DateTime

  """
  A list of review comment threads for this pull request review.
  """
  threads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewThreadConnection

  """
  A union of review threads and comments that are replies to other review threads.
  """
  threadsAndReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of element to focus on.
    """
    focus: ID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int
  ): PullRequestReviewItemConnection

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this PullRequestReview.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal

  """
  The websocket channel ID for live updates.
  """
  websocket(
    """
    The channel to use.
    """
    channel: PullRequestReviewPubSubTopic!
  ): String! @internal
}

"""
A review comment associated with a given repository pull request.
"""
type PullRequestReviewComment implements AbuseReportable & Blockable & Comment & Deletable & Minimizable & Node & Reactable & Reportable & RepositoryNode & Updatable & UpdatableComment
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  The abuse reports received for this content.
  """
  abuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AbuseReportConnection!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The comment body of this review comment.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blocks
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The comment body of this review comment rendered as plain text.
  """
  bodyText: String!

  """
  The comment body hash of this review comment.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the commit associated with the comment.
  """
  commit: Commit

  """
  Identifies when the comment was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  The HTTP URL permalink for this review comment positioned in the current diff.
  """
  currentDiffResourcePath: URI @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The diff hunk to which the comment applies.
  """
  diffHunk: String!

  """
  Identifies when the comment was created in a draft state.
  """
  draftedAt: DateTime!

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  the most recent time this content was reported
  """
  lastReportedAt: DateTime @internal

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Returns why the comment was minimized.
  """
  minimizedReason: String

  """
  Identifies the original commit associated with the comment.
  """
  originalCommit: Commit

  """
  The HTTP URL permalink for this review comment positioned in the original diff.
  """
  originalDiffResourcePath: URI @internal

  """
  The original line index in the diff to which the comment applies.
  """
  originalPosition: Int!

  """
  Identifies when the comment body is outdated
  """
  outdated: Boolean!

  """
  The path to which the comment applies.
  """
  path: String!

  """
  The line index in the diff to which the comment applies.
  """
  position: Int

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The pull request associated with this review comment.
  """
  pullRequest: PullRequest!

  """
  The pull request review associated with this review comment.
  """
  pullRequestReview: PullRequestReview

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The comment this is a reply to.
  """
  replyTo: PullRequestReviewComment

  """
  the number of times this content has been reported
  """
  reportCount: Int @internal

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path permalink for this review comment.
  """
  resourcePath: URI!

  """
  Is this comment on a range that contains deletions
  """
  selectionContainsDeletions: Boolean! @internal

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  Identifies the state of the comment.
  """
  state: PullRequestReviewCommentState!

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  The thread this comment was posted in.
  """
  thread: PullRequestReviewThread

  """
  the top reported reason for this content
  """
  topReportReason: String @internal

  """
  The HTTP path to the endpoint for updating this review comment.
  """
  updateResourcePath: URI!
    @deprecated(reason: "Object-specific update endpoints will be removed. Removal on 2018-07-01 UTC.")
    @internal

  """
  The HTTP URL to the endpoint for updating this review comment.
  """
  updateUrl: URI!
    @deprecated(reason: "Object-specific update endpoints will be removed. Removal on 2018-07-01 UTC.")
    @internal

  """
  Identifies when the comment was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL permalink for this review comment.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can block the author of this content.
  """
  viewerCanBlock: Boolean! @internal

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer should see the minimize button in the UI.
  """
  viewerCanSeeMinimizeButton: Boolean! @internal

  """
  Check if the viewer can see unminimize button in the UI.
  """
  viewerCanSeeUnminimizeButton: Boolean! @internal

  """
  Check if the current viewer can unblock the author of this content.
  """
  viewerCanUnblock: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal

  """
  The websocket channel ID for live updates.
  """
  websocket(
    """
    The channel to use.
    """
    channel: PullRequestPubSubTopic!
  ): String! @internal
}

"""
The connection type for PullRequestReviewComment.
"""
type PullRequestReviewCommentConnection @serviceMapping(to: "github/pull_requests") {
  """
  Identifies the count of items after the focused item (`focus`).
  """
  afterFocusCount: Int! @internal

  """
  Identifies the count of items before the focused item (`focus`).
  """
  beforeFocusCount: Int! @internal

  """
  A list of edges.
  """
  edges: [PullRequestReviewCommentEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int! @internal

  """
  A list of nodes.
  """
  nodes: [PullRequestReviewComment]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int! @internal

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewCommentEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReviewComment
}

"""
The possible states of a pull request review comment.
"""
enum PullRequestReviewCommentState @serviceMapping(to: "github/pull_request_reviews") {
  """
  A comment that is part of a pending review
  """
  PENDING

  """
  A comment that is part of a submitted review
  """
  SUBMITTED
}

"""
The connection type for PullRequestReview.
"""
type PullRequestReviewConnection @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestReviewEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequestReview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
This aggregates pull request reviews made by a user within one repository.
"""
type PullRequestReviewContributionsByRepository @serviceMapping(to: "github/pull_requests") {
  """
  The pull request review contributions.
  """
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for contributions returned from the connection.
    """
    orderBy: ContributionOrder = {direction: DESC}
  ): CreatedPullRequestReviewContributionConnection!

  """
  The repository in which the pull request reviews were made.
  """
  repository: Repository!
}

"""
The review status of a pull request.
"""
enum PullRequestReviewDecision @serviceMapping(to: "github/pull_request_reviews") {
  """
  The pull request has received an approving review.
  """
  APPROVED

  """
  Changes have been requested on the pull request.
  """
  CHANGES_REQUESTED

  """
  A review is required before the pull request can be merged.
  """
  REVIEW_REQUIRED
}

"""
An edge in a connection.
"""
type PullRequestReviewEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReview
}

"""
The possible events to perform on a pull request review.
"""
enum PullRequestReviewEvent {
  """
  Submit feedback and approve merging these changes.
  """
  APPROVE

  """
  Submit general feedback without explicit approval.
  """
  COMMENT

  """
  Dismiss review so it now longer effects merging.
  """
  DISMISS

  """
  Submit feedback that must be addressed before merging.
  """
  REQUEST_CHANGES
}

"""
An object contained in a pull request review.
"""
union PullRequestReviewItem = PullRequestReviewComment | PullRequestReviewThread

"""
Review threads and replies for a pull request review.
"""
type PullRequestReviewItemConnection {
  """
  Identifies the count of items after the focused item (`focus`).
  """
  afterFocusCount: Int! @internal

  """
  Identifies the count of items before the focused item (`focus`).
  """
  beforeFocusCount: Int! @internal

  """
  A list of edges.
  """
  edges: [PullRequestReviewItemEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int! @internal

  """
  A list of nodes.
  """
  nodes: [PullRequestReviewItem]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int! @internal

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReviewItem
}

"""
A Review Point object for a given Pull Request.
"""
type PullRequestReviewPoint @underDevelopment(since: "2021-01-30") @serviceMapping(to: "github/pull_requests") {
  """
  The order number for this PullRequestReviewPoint on its PullRequest.
  """
  number: Int!

  """
  The HTTP path permalink for this PullRequestReviewPoint.
  """
  resourcePath: URI!

  """
  The HTTP URL permalink for this PullRequestReviewPoint.
  """
  url: URI!
}

"""
The connection type for PullRequestReviewPoint.
"""
type PullRequestReviewPointConnection
  @underDevelopment(since: "2021-02-12")
  @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestReviewPointEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequestReviewPoint]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewPointEdge @underDevelopment(since: "2021-02-12") @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReviewPoint
}

"""
The possible PubSub channels for a pull request.
"""
enum PullRequestReviewPubSubTopic @internal {
  """
  The channel ID for observing pull request review updates.
  """
  UPDATED
}

"""
The possible states of a pull request review.
"""
enum PullRequestReviewState {
  """
  A review allowing the pull request to merge.
  """
  APPROVED

  """
  A review blocking the pull request from merging.
  """
  CHANGES_REQUESTED

  """
  An informational review.
  """
  COMMENTED

  """
  A review that has been dismissed.
  """
  DISMISSED

  """
  A review that has not yet been submitted.
  """
  PENDING
}

"""
The review state by which pull requests are filtered.
"""
enum PullRequestReviewStateFilter
  @underDevelopment(since: "2020-09-22")
  @serviceMapping(to: "github/pull_request_reviews") {
  """
  A review allowing the pull request to merge has been submitted.
  """
  APPROVED

  """
  A review blocking the pull request from merging has been submitted.
  """
  CHANGES_REQUESTED

  """
  A review has not yet been submitted.
  """
  NONE

  """
  An approving review has not yet been submitted.
  """
  REQUIRED
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestReviewThread implements Node @serviceMapping(to: "github/pull_requests") {
  """
  Are the diff lines for this thread truncated? Only true for multi-line comments that reference more than 100 lines.
  """
  areDiffLinesTruncated: Boolean! @underDevelopment(since: "2019-11-04")

  """
  A list of pull request comments associated with the thread.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of element to focus on.
    """
    focus: ID @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Skips the first _n_ elements in the list.
    """
    skip: Int

    """
    Skip loading of comments if thread is collapsed.
    """
    skipIfCollapsed: Boolean = false @internal
  ): PullRequestReviewCommentConnection! @serviceMapping(to: "github/pull_request_reviews")

  """
  The HTTP URL permalink for this review thread's file in the current diff.
  """
  currentDiffFileResourcePath: URI @internal

  """
  The HTTP URL permalink for this review thread positioned in the current diff.
  """
  currentDiffResourcePath: URI @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The diff lines where this thread was created on.
  """
  diffLines(
    """
    Number of context lines to return.
    """
    maxContextLines: Int = 3

    """
    Skip loading of diff lines if thread is collapsed.
    """
    skipIfCollapsed: Boolean = false

    """
    Indicates whether diff lines should be syntax highlighted.
    """
    syntaxHighlightingEnabled: Boolean = true
  ): [DiffLine]

  """
  The side of the diff on which this thread was placed.
  """
  diffSide: DiffSide!

  """
  The HTTP path permalink for this review thread's diff excerpt on the discussion page.
  """
  discussionDiffResourcePath: URI! @internal

  """
  The HTTP URL permalink for this review thread's diff excerpt on the discussion page.
  """
  discussionDiffUrl: URI! @internal

  """
  The type of line the thread refers to (multi-line only)
  """
  endLineType: String
  id: ID!

  """
  Whether or not the thread has been collapsed (resolved)
  """
  isCollapsed: Boolean!

  """
  Indicates whether this thread was outdated by newer changes.
  """
  isOutdated: Boolean!

  """
  Whether this thread has been resolved
  """
  isResolved: Boolean!

  """
  The line in the file to which this thread refers
  """
  line: Int

  """
  The HTTP URL permalink for this review thread's file in the original diff.
  """
  originalDiffFileResourcePath: URI @internal

  """
  The HTTP URL permalink for this review thread positioned in the original diff.
  """
  originalDiffResourcePath: URI @internal

  """
  The original line in the file to which this thread refers.
  """
  originalLine: Int

  """
  The original start line in the file to which this thread refers (multi-line only).
  """
  originalStartLine: Int

  """
  Identifies the file path of this thread.
  """
  path: String!

  """
  Identifies the position of this thread.
  """
  position: Int @internal

  """
  Identifies the pull request associated with this thread.
  """
  pullRequest: PullRequest!

  """
  The commit to which this thread refers.
  """
  pullRequestCommit: PullRequestCommit! @underDevelopment(since: "2018-06-25")

  """
  Identifies the repository associated with this thread.
  """
  repository: Repository!

  """
  path for resolve form
  """
  resolveResourcePath: URI! @internal

  """
  URL for resolve form
  """
  resolveUrl: URI! @internal

  """
  The user who resolved this thread
  """
  resolvedBy: User

  """
  The actor who resolved this thread.
  """
  resolvedByActor: Actor @internal

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: DiffSide

  """
  The start line in the file to which this thread refers (multi-line only)
  """
  startLine: Int

  """
  The type of line the thread starts on (multi-line only)
  """
  startLineType: String

  """
  path for unresolve form
  """
  unresolveResourcePath: URI! @internal

  """
  URL for unresolve form
  """
  unresolveUrl: URI! @internal

  """
  Indicates whether the current viewer can reply to this thread.
  """
  viewerCanReply: Boolean!

  """
  Whether or not the viewer can resolve this thread
  """
  viewerCanResolve: Boolean!

  """
  Whether or not the viewer can unresolve this thread
  """
  viewerCanUnresolve: Boolean!

  """
  Reasons why the current viewer can not reply to this thread.
  """
  viewerCannotReplyReasons: [ThreadCannotReplyReason!]! @internal
}

"""
Review comment threads for a pull request review.
"""
type PullRequestReviewThreadConnection @serviceMapping(to: "github/pull_requests") {
  """
  A list of edges.
  """
  edges: [PullRequestReviewThreadEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int! @internal

  """
  A list of nodes.
  """
  nodes: [PullRequestReviewThread]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int! @internal

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewThreadEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestReviewThread
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker @serviceMapping(to: "github/pull_requests") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The last commit the viewer has seen.
  """
  lastSeenCommit: Commit!

  """
  The pull request to which the marker belongs.
  """
  pullRequest: PullRequest!
}

"""
The possible states of a pull request.
"""
enum PullRequestState {
  """
  A pull request that has been closed without being merged.
  """
  CLOSED

  """
  A pull request that has been closed by being merged.
  """
  MERGED

  """
  A pull request that is still open.
  """
  OPEN
}

"""
A repository pull request template.
"""
type PullRequestTemplate @serviceMapping(to: "github/pull_requests") {
  """
  The body of the template
  """
  body: String

  """
  The filename of the template
  """
  filename: String

  """
  The repository the template belongs to
  """
  repository: Repository!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  """
  A list of edges.
  """
  edges: [PullRequestTimelineItemEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequestTimelineItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItem =
    AssignedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | Commit
  | CommitCommentThread
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MergedEvent
  | MilestonedEvent
  | PullRequestReview
  | PullRequestReviewComment
  | PullRequestReviewThread
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
An edge in a connection.
"""
type PullRequestTimelineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems @serviceMapping(to: "github/pull_requests") =
    AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type PullRequestTimelineItemsConnection @serviceMapping(to: "github/pull_requests") {
  """
  Identifies the count of items after the focused item (`focus`).
  """
  afterFocusCount: Int!

  """
  Identifies the count of items before the focused item (`focus`).
  """
  beforeFocusCount: Int!

  """
  A list of edges.
  """
  edges: [PullRequestTimelineItemsEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [PullRequestTimelineItems]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Identifies the date and time when the timeline was last updated.
  """
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type PullRequestTimelineItemsEdge @serviceMapping(to: "github/pull_requests") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequestTimelineItems
}

"""
The possible item types found in a timeline.
"""
enum PullRequestTimelineItemsItemType {
  """
  Represents a 'added_to_merge_queue' event on a given pull request.
  """
  ADDED_TO_MERGE_QUEUE_EVENT @internal

  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT

  """
  Represents an 'assigned' event on any assignable object.
  """
  ASSIGNED_EVENT

  """
  Represents a 'automatic_base_change_failed' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT

  """
  Represents a 'automatic_base_change_succeeded' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT

  """
  Represents a 'auto_merge_disabled' event on a given pull request.
  """
  AUTO_MERGE_DISABLED_EVENT

  """
  Represents a 'auto_merge_enabled' event on a given pull request.
  """
  AUTO_MERGE_ENABLED_EVENT

  """
  Represents a 'auto_rebase_enabled' event on a given pull request.
  """
  AUTO_REBASE_ENABLED_EVENT

  """
  Represents a 'auto_squash_enabled' event on a given pull request.
  """
  AUTO_SQUASH_ENABLED_EVENT

  """
  Represents a 'base_ref_changed' event on a given issue or pull request.
  """
  BASE_REF_CHANGED_EVENT

  """
  Represents a 'base_ref_deleted' event on a given pull request.
  """
  BASE_REF_DELETED_EVENT

  """
  Represents a 'base_ref_force_pushed' event on a given pull request.
  """
  BASE_REF_FORCE_PUSHED_EVENT

  """
  Represents a 'closed' event on any `Closable`.
  """
  CLOSED_EVENT

  """
  Represents a 'comment_deleted' event on a given issue or pull request.
  """
  COMMENT_DELETED_EVENT

  """
  Represents a 'connected' event on a given issue or pull request.
  """
  CONNECTED_EVENT

  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT

  """
  Represents a 'convert_to_draft' event on a given pull request.
  """
  CONVERT_TO_DRAFT_EVENT

  """
  Represents a mention made by one issue or pull request to another.
  """
  CROSS_REFERENCED_EVENT

  """
  Represents a 'demilestoned' event on a given issue or pull request.
  """
  DEMILESTONED_EVENT

  """
  Represents a 'deployed' event on a given pull request.
  """
  DEPLOYED_EVENT

  """
  Represents a 'deployment_environment_changed' event on a given pull request.
  """
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT

  """
  Represents a 'disconnected' event on a given issue or pull request.
  """
  DISCONNECTED_EVENT

  """
  Represents a 'head_ref_deleted' event on a given pull request.
  """
  HEAD_REF_DELETED_EVENT

  """
  Represents a 'head_ref_force_pushed' event on a given pull request.
  """
  HEAD_REF_FORCE_PUSHED_EVENT

  """
  Represents a 'head_ref_restored' event on a given pull request.
  """
  HEAD_REF_RESTORED_EVENT

  """
  Represents a comment on an Issue.
  """
  ISSUE_COMMENT

  """
  Represents a 'labeled' event on a given issue or pull request.
  """
  LABELED_EVENT

  """
  Represents a 'locked' event on a given issue or pull request.
  """
  LOCKED_EVENT

  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT

  """
  Represents a 'mentioned' event on a given issue or pull request.
  """
  MENTIONED_EVENT

  """
  Represents a 'merged' event on a given pull request.
  """
  MERGED_EVENT

  """
  Represents a 'milestoned' event on a given issue or pull request.
  """
  MILESTONED_EVENT

  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT

  """
  Represents a 'pinned' event on a given issue or pull request.
  """
  PINNED_EVENT

  """
  Represents a Git commit part of a pull request.
  """
  PULL_REQUEST_COMMIT

  """
  Represents a commit comment thread part of a pull request.
  """
  PULL_REQUEST_COMMIT_COMMENT_THREAD

  """
  A review object for a given pull request.
  """
  PULL_REQUEST_REVIEW

  """
  A threaded list of comments for a given pull request.
  """
  PULL_REQUEST_REVIEW_THREAD

  """
  Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
  """
  PULL_REQUEST_REVISION_MARKER

  """
  Represents a 'ready_for_review' event on a given pull request.
  """
  READY_FOR_REVIEW_EVENT

  """
  Represents a 'referenced' event on a given `ReferencedSubject`.
  """
  REFERENCED_EVENT

  """
  Represents a 'removed_from_merge_queue' event on a given pull request.
  """
  REMOVED_FROM_MERGE_QUEUE_EVENT @internal

  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT

  """
  Represents a 'renamed' event on a given issue or pull request
  """
  RENAMED_TITLE_EVENT

  """
  Represents a 'reopened' event on any `Closable`.
  """
  REOPENED_EVENT

  """
  Represents a 'review_dismissed' event on a given issue or pull request.
  """
  REVIEW_DISMISSED_EVENT

  """
  Represents an 'review_requested' event on a given pull request.
  """
  REVIEW_REQUESTED_EVENT

  """
  Represents an 'review_request_removed' event on a given pull request.
  """
  REVIEW_REQUEST_REMOVED_EVENT

  """
  Represents a 'subscribed' event on a given `Subscribable`.
  """
  SUBSCRIBED_EVENT

  """
  Represents a 'transferred' event on a given issue or pull request.
  """
  TRANSFERRED_EVENT

  """
  Represents an 'unassigned' event on any assignable object.
  """
  UNASSIGNED_EVENT

  """
  Represents an 'unlabeled' event on a given issue or pull request.
  """
  UNLABELED_EVENT

  """
  Represents an 'unlocked' event on a given issue or pull request.
  """
  UNLOCKED_EVENT

  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT

  """
  Represents an 'unpinned' event on a given issue or pull request.
  """
  UNPINNED_EVENT

  """
  Represents an 'unsubscribed' event on a given `Subscribable`.
  """
  UNSUBSCRIBED_EVENT

  """
  Represents a 'user_blocked' event on a given user.
  """
  USER_BLOCKED_EVENT
}

"""
The possible target states when updating a pull request.
"""
enum PullRequestUpdateState @serviceMapping(to: "github/pull_requests") {
  """
  A pull request that has been closed without being merged.
  """
  CLOSED

  """
  A pull request that is still open.
  """
  OPEN
}

"""
A Git push.
"""
type Push implements Node & Trigger @useNextGlobalIdFormat(after: "2021-05-15") {
  id: ID!

  """
  The SHA after the push
  """
  nextSha: GitObjectID

  """
  The permalink for this push.
  """
  permalink: URI!

  """
  The SHA before the push
  """
  previousSha: GitObjectID

  """
  The user who pushed
  """
  pusher: User!

  """
  The repository that was pushed to
  """
  repository: Repository!
}

"""
A team, user or app who has the ability to push to a protected branch.
"""
type PushAllowance implements Node {
  """
  The actor that can push.
  """
  actor: PushAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user or team.
  """
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
The connection type for PushAllowance.
"""
type PushAllowanceConnection {
  """
  A list of edges.
  """
  edges: [PushAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [PushAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PushAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PushAllowance
}

"""
A push notification service.
"""
enum PushNotificationService @serviceMapping(to: "github/mobile_push_notifications") {
  """
  Apple Push Notification Service
  """
  APNS

  """
  Google Firebase Cloud Messaging
  """
  FCM
}

"""
The query root of GitHub's GraphQL interface.
"""
type Query @serviceMapping(to: "github/graphql_api") {
  """
  Lookup an account by database ID.
  """
  account(
    """
    The account's database ID.
    """
    accountId: Int!
  ): Account @internal

  """
  Account from database id.
  """
  accountFromDatabaseId(
    """
    The database id of the account.
    """
    databaseId: Int!
  ): Account @internal

  """
  Accounts from database IDs.
  """
  accountsFromDatabaseIds(
    """
    Account database IDs. Limit 100.
    """
    databaseIds: [Int!]!
  ): [Account!]! @internal

  """
  Lookup user, organization, and bot accounts from last IP.
  """
  accountsFromLastIp(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IPv4 network address.
    """
    ip: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_32
  ): AccountConnection @internal

  """
  Returns a list of applied topics filtered by `query` if any.
  """
  appliedTopics(
    """
    How many applied topics to return.
    """
    limit: Int = 10

    """
    Query to search applied topics by
    """
    query: String
  ): [Topic!]! @internal

  """
  Look up a code of conduct by its key
  """
  codeOfConduct(
    """
    The code of conduct's key
    """
    key: String!
  ): CodeOfConduct

  """
  Look up a code of conduct by its key
  """
  codesOfConduct: [CodeOfConduct]

  """
  Lookup a collection by slug.
  """
  collection(
    """
    The collection's slug.
    """
    slug: String!
  ): ExploreCollection

  """
  A package release indexed in the dependency graph
  """
  dependencyGraphPackageReleases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Flag to return the latest release if none match the requirements
    """
    defaultToLatest: Boolean = true

    """
    Cursor to paginate dependencies
    """
    dependenciesAfter: String

    """
    Number of dependencies to fetch
    """
    dependenciesFirst: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Flag to indicate that dependencies should be eagerly loaded
    """
    includeDependencies: Boolean

    """
    Flag to return unpublished package releases
    """
    includeUnpublished: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The package manager
    """
    packageManager: String

    """
    The package name
    """
    packageName: String

    """
    The version bounds
    """
    requirements: String
  ): DependencyGraphPackageReleaseConnection! @internal @serviceMapping(to: "github/dependency_graph")

  """
  A package indexed in dependency graph
  """
  dependencyGraphPackages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Total number of packages to return
    """
    limit: Int

    """
    The package name
    """
    names: [String!]

    """
    The package manager
    """
    packageManager: String
  ): DependencyGraphPackageConnection! @internal @serviceMapping(to: "github/dependency_graph")

  """
  A package indexed in dependency graph that is not mapped to a repository
  """
  dependencyGraphUnmappedPackages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Total number of unmapped packages to return
    """
    limit: Int

    """
    The package name
    """
    names: [String!]

    """
    The package manager
    """
    packageManager: String
  ): DependencyGraphPackageConnection! @internal @serviceMapping(to: "github/dependency_graph")

  """
  Get the number of public GitHub employees.
  """
  employeesCount: Int! @internal

  """
  Get set of client side enabled feature flags for viewer.
  """
  enabledFeatures: [FeatureFlag!]! @internal

  """
  Look up an enterprise by URL slug.
  """
  enterprise(
    """
    The enterprise invitation token.
    """
    invitationToken: String

    """
    The enterprise URL slug.
    """
    slug: String!
  ): Enterprise

  """
  Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  """
  enterpriseAdministratorInvitation(
    """
    The slug of the enterprise the user was invited to join.
    """
    enterpriseSlug: String!

    """
    The role for the business member invitation.
    """
    role: EnterpriseAdministratorRole!

    """
    The login of the user invited to join the business.
    """
    userLogin: String!
  ): EnterpriseAdministratorInvitation

  """
  Look up a pending enterprise administrator invitation by invitation token.
  """
  enterpriseAdministratorInvitationByToken(
    """
    The invitation token sent with the invitation email.
    """
    invitationToken: String!
  ): EnterpriseAdministratorInvitation

  """
  The support contact for this enterprise
  """
  enterpriseSupportContact: SupportContact

  """
  Returns a list of the collections on GitHub Explore.
  """
  exploreCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of collection names to include.
    """
    display_names: [String]

    """
    Set to true to include only the collections featured on GitHub.
    """
    featured: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned collections.
    """
    orderBy: ExploreCollectionOrder

    """
    A query for filtering collections by name.
    """
    query: String

    """
    A list of collection slugs to include.
    """
    slugs: [String]
  ): ExploreCollectionConnection! @internal

  """
  Returns a few randomly chosen featured, curated collections.
  """
  featuredCollectionsSample(
    """
    How many collections to return.
    """
    limit: Int = 3
  ): [ExploreCollection!]! @internal

  """
  A list of categories that are featured on the Marketplace homepage
  """
  featuredMarketplaceCategories: [MarketplaceCategory!]! @internal @serviceMapping(to: "github/marketplace")

  """
  Returns a few randomly chosen featured, curated topics.
  """
  featuredTopicsSample(
    """
    How many topics to return.
    """
    limit: Int = 3
  ): [Topic!]! @internal

  """
  Get alphabetically sorted list of Integration categories
  """
  integrationCategories(
    """
    An optional category slug to select a specific category.
    """
    slug: String
  ): [IntegrationFeature!]! @internal

  """
  Lookup a single Integration listing
  """
  integrationListing(
    """
    Select the listing which matches this slug
    """
    slug: String!
  ): IntegrationListing @internal

  """
  Lookup Integration listings
  """
  integrationListings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Select listings whose name or description matches the query.
    """
    query: String

    """
    Select only listings with the given category slug.
    """
    slug: String
  ): IntegrationListingConnection! @internal

  """
  Get list of open internship positions for GitHub.
  """
  internships: [JobPosition!]! @internal

  """
  Get list of open positions for working at GitHub.
  """
  jobs: [JobDepartment!]! @internal

  """
  Find the most recent unread broadcast post for the viewer.
  """
  latestUnreadBroadcast: BlogBroadcast @internal

  """
  Look up an open source license by its key
  """
  license(
    """
    The license's downcased SPDX ID
    """
    key: String!
  ): License

  """
  Return a list of known open source licenses
  """
  licenses: [License]!

  """
  Get an estimate number of paid team accounts for marketing purposes.
  """
  marketingPaidTeamAccountsCount: Int! @internal

  """
  Get an estimate number of repositories for marketing purposes.
  """
  marketingRepositoryCount: Int! @internal

  """
  Get an estimate number of users for marketing purposes.
  """
  marketingUserCount: Int! @internal

  """
  Look up Marketplace agreements sorted with the latest version first.
  """
  marketplaceAgreements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Select only integrator agreements. Defaults to including both integrator and end-user
    agreements. Set to false to select only end-user agreements.
    """
    forIntegrators: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MarketplaceAgreementConnection! @internal @serviceMapping(to: "github/marketplace")

  """
  Get alphabetically sorted list of Marketplace categories
  """
  marketplaceCategories(
    """
    Exclude categories with no listings.
    """
    excludeEmpty: Boolean

    """
    Exclude filter-type categories.
    """
    excludeFilterCategories: Boolean = false @underDevelopment(since: "2018-10-01")

    """
    Returns top level categories only, excluding any subcategories.
    """
    excludeSubcategories: Boolean

    """
    Only return categories that are visible in side navigation and have listings.
    """
    forNavigation: Boolean = false @internal

    """
    Return only the specified categories.
    """
    includeCategories: [String!]

    """
    Return categories that can be used as subcategories for the given category slug.
    """
    subcategoryCandidatesFor: String @internal
  ): [MarketplaceCategory!]! @serviceMapping(to: "github/marketplace")

  """
  Look up a Marketplace category by its slug.
  """
  marketplaceCategory(
    """
    The URL slug of the category.
    """
    slug: String!

    """
    Also check topic aliases for the category slug
    """
    useTopicAliases: Boolean
  ): MarketplaceCategory @serviceMapping(to: "github/marketplace")

  """
  Get the latest version of the GitHub Marketplace Terms of Service.
  """
  marketplaceEndUserAgreement: MarketplaceAgreement @internal @serviceMapping(to: "github/marketplace")

  """
  Get the latest version of the GitHub Marketplace Developer Agreement.
  """
  marketplaceIntegratorAgreement: MarketplaceAgreement @internal @serviceMapping(to: "github/marketplace")

  """
  Look up a single Marketplace listing
  """
  marketplaceListing(
    """
    Select the listing that matches this slug. It's the short name of the listing used in its URL.
    """
    slug: String!
  ): MarketplaceListing @serviceMapping(to: "github/marketplace")

  """
  Look up Marketplace listings
  """
  marketplaceListings(
    """
    Select listings that can be administered by the specified user.
    """
    adminId: ID

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    """
    allStates: Boolean

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Select only listings with the given category.
    """
    categorySlug: String

    """
    Select only listings that are currently featured.
    """
    featuredOnly: Boolean = false @internal

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned listings.
    """
    orderBy: MarketplaceListingOrder = {field: ID, direction: DESC}

    """
    Select listings for products owned by the specified organization.
    """
    organizationId: ID

    """
    Select only listings where the primary category matches the given category slug.
    """
    primaryCategoryOnly: Boolean = false

    """
    Select listings whose name or description matches the query.
    """
    query: String @internal

    """
    Select the listings with these slugs, if they are visible to the viewer.
    """
    slugs: [String]

    """
    Select the listings in this state that are visible to the viewer.
    """
    state: MarketplaceListingState

    """
    Select the listings in these states that are visible to the viewer.
    """
    states: [MarketplaceListingState!] @underDevelopment(since: "2019-03-01")

    """
    Also check topic aliases for the category slug
    """
    useTopicAliases: Boolean

    """
    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    """
    viewerCanAdmin: Boolean

    """
    Select only listings that offer a free trial.
    """
    withFreeTrialsOnly: Boolean = false
  ): MarketplaceListingConnection! @serviceMapping(to: "github/marketplace")

  """
  Get subscription details for an account's purchase of a Marketplace listing.
  """
  marketplacePurchase(
    """
    The database ID of the User or Organization account.
    """
    accountId: Int!

    """
    The database ID of the Marketplace listing.
    """
    marketplaceListingId: Int!
  ): SubscriptionItem @internal @serviceMapping(to: "github/marketplace")

  """
  Search GitHub Marketplace.
  """
  marketplaceSearch(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Search listings within the category with this slug.
    """
    categorySlug: String

    """
    Include only listings that are compatible with GitHub Enterprise.
    """
    enterpriseCompatibleOnly: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Select listings that match this text.
    """
    query: String!

    """
    What kind of search results to return.
    """
    type: MarketplaceSearchType

    """
    Select the listings in this verification state that are visible to the viewer.
    """
    verificationState: MarketplaceVerificationState

    """
    Select only listings that offer a free trial.
    """
    withFreeTrialsOnly: Boolean
  ): SearchResultItemConnection! @internal @serviceMapping(to: "github/marketplace")

  """
  A collection of blog posts related to the Marketplace.
  """
  marketplaceStories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Whether or not we only want featured blog posts
    """
    featuredOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned stories
    """
    orderBy: MarketplaceStoryOrder = {field: PUBLISHED_AT, direction: DESC}
  ): MarketplaceStoryConnection! @internal @serviceMapping(to: "github/marketplace")

  """
  Return information about the GitHub instance
  """
  meta: GitHubMetadata!

  """
  Returns all capabilities for the mobile clients
  """
  mobileCapabilities: [String] @serviceMapping(to: "github/mobile_api")

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Lookup a organization by login.
  """
  organization(
    """
    The organization's login.
    """
    login: String!
  ): Organization

  """
  Lookup a registry package owner
  """
  packageOwner(
    """
    The name to lookup the owner by.
    """
    login: String!
  ): PackageOwner @internal

  """
  Search packages under a registry package owner
  """
  packageSearch(
    """
    The name to lookup the owner by.
    """
    login: String!
  ): PackageSearch @internal

  """
  Fetch a page certificate by domain
  """
  pageCertificate(
    """
    The domain of the page certificate
    """
    domain: String!
  ): PageCertificate! @internal

  """
  Returns a list of popular topics featured on GitHub.
  """
  popularTopics(
    """
    How many popular topics to return.
    """
    limit: Int = 10
  ): [Topic!]! @internal

  """
  Look up multiple public repositories by their owners and names, as well as by database ID.
  """
  publicRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of repository database IDs.
    """
    databaseIds: [Int!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of repository owners and names, e.g., github/linguist.
    """
    namesWithOwners: [String!]
  ): RepositoryConnection! @internal

  """
  The client's rate limit information.
  """
  rateLimit(
    """
    If true, calculate the cost for the query without evaluating it
    """
    dryRun: Boolean = false
  ): RateLimit

  """
  Returns a list of recently created topics on GitHub that have been applied to at least
  one repository.
  """
  recentTopics(
    """
    How many recent topics to return.
    """
    limit: Int = 10
  ): [Topic!]! @internal

  """
  Returns recommended Marketplace apps
  """
  recommendedMarketplaceApps: [MarketplaceListing!]! @internal @serviceMapping(to: "github/marketplace")

  """
  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
  """
  relay: Query!

  """
  Lookup a given repository by the owner and repository name.
  """
  repository(
    """
    The name of the repository
    """
    name: String!

    """
    The login field of a user or organization
    """
    owner: String!
  ): Repository

  """
  Lookup a single GitHub Action
  """
  repositoryAction(
    """
    Select the action that matches this id.
    """
    id: ID!
  ): RepositoryAction

  """
  Lookup a single GitHub Action by slug.
  """
  repositoryActionBySlug(
    """
    Select the action that matches this slug.
    """
    slug: String!
  ): RepositoryAction

  """
  A list of repository actions.
  """
  repositoryActions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Select only actions that are currently featured.
    """
    featuredOnly: Boolean = false @internal

    """
    Return only actions that match all given filters.
    """
    filterBy: RepositoryActionFilters = {} @internal

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned repository actions.
    """
    orderBy: RepositoryActionOrder = {field: CREATED_AT, direction: DESC}

    """
    Select only actions that are publicly accessible.
    """
    publicOnly: Boolean = false @internal

    """
    Select only actions that the Viewer has write access to.
    """
    writableOnly: Boolean = false @internal
  ): RepositoryActionsConnection @internal

  """
  Lookup a repository owner (ie. either a User or an Organization) by login.
  """
  repositoryOwner(
    """
    The username to lookup the owner by.
    """
    login: String!
  ): RepositoryOwner

  """
  Who the query was requested by.
  """
  requester: Requester! @underDevelopment(since: "2018-06-25")

  """
  Lookup resource by a URL.
  """
  resource(
    """
    The URL.
    """
    url: URI!
  ): UniformResourceLocatable

  """
  Perform a search across resources.
  """
  search(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Calculate aggregations. This arg must be true for `languageAggregations` to be returned.
    """
    aggregations: Boolean = false @internal

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for.
    """
    query: String!

    """
    The types of search items to search within.
    """
    type: SearchType!
  ): SearchResultItemConnection!

  """
  GitHub Security Advisories
  """
  securityAdvisories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter advisories by identifier, e.g. GHSA or CVE.
    """
    identifier: SecurityAdvisoryIdentifierFilter

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityAdvisoryOrder = {field: UPDATED_AT, direction: DESC}

    """
    Filter advisories to those published since a time in the past.
    """
    publishedSince: DateTime

    """
    Filter advisories to those updated since a time in the past.
    """
    updatedSince: DateTime
  ): SecurityAdvisoryConnection! @serviceMapping(to: "github/advisory_database")

  """
  Fetch a Security Advisory by its GHSA ID
  """
  securityAdvisory(
    """
    GitHub Security Advisory ID.
    """
    ghsaId: String!
  ): SecurityAdvisory

  """
  Software Vulnerabilities documented by GitHub Security Advisories
  """
  securityVulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection! @serviceMapping(to: "github/advisory_database")

  """
  Users and organizations who can be sponsored via GitHub Sponsors.
  """
  sponsorables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Optional filter for which dependencies should be checked for sponsorable
    owners. Only sponsorable owners of dependencies in this ecosystem will be
    included. Used when onlyDependencies = true.
    """
    dependencyEcosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Whether only sponsorables who own the viewer's dependencies will be
    returned. Must be authenticated to use. Can check an organization instead
    for their dependencies owned by sponsorables by passing
    orgLoginForDependencies.
    """
    onlyDependencies: Boolean = false

    """
    Ordering options for users and organizations returned from the connection.
    """
    orderBy: SponsorableOrder = {field: LOGIN, direction: ASC}

    """
    Optional organization username for whose dependencies should be checked.
    Used when onlyDependencies = true. Omit to check your own dependencies. If
    you are not an administrator of the organization, only dependencies from its
    public repositories will be considered.
    """
    orgLoginForDependencies: String
  ): SponsorableItemConnection! @serviceMapping(to: "github/github_sponsors")

  """
  Look up a single Sponsors Listing
  """
  sponsorsListing(
    """
    Select the Sponsors listing which matches this slug
    """
    slug: String!
  ): SponsorsListing
    @deprecated(
      reason: "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC."
    )
    @serviceMapping(to: "github/github_sponsors")

  """
  A way for GitHub staff members to see a narrow subset of data about any repository in the system
  """
  staffAccessedRepository(
    """
    The name of the repository
    """
    name: String!

    """
    The login field of a user or organization
    """
    owner: String!
  ): StaffAccessedRepository @internal

  """
  Stafftools information.
  """
  stafftoolsInfo: StafftoolsInfo @internal

  """
  A list of suggested navigation destinations for the viewer.
  """
  suggestedNavigationDestinations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sorted list of recent page views. Each page should follow the following pattern `type:path`
    """
    pageViews: [String!]
  ): NavigationDestinationConnection! @internal

  """
  A (temporary) nullable version of viewer
  """
  tempNullableViewer: User @internal

  """
  Find toggleable feature by slug.
  """
  toggleableFeature(
    """
    The toggleable feature slug.
    """
    slug: String!
  ): ToggleableFeature @internal @serviceMapping(to: "github/features")

  """
  Returns a list of toggleable features.
  """
  toggleableFeatures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ToggleableFeatureConnection @internal @serviceMapping(to: "github/features")

  """
  Look up a topic by name.
  """
  topic(
    """
    The topic's name.
    """
    name: String!
  ): Topic

  """
  Returns a list of the topics on GitHub.
  """
  topics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Set to true to include only the topics that have additional content, such as a description.
    """
    curated: Boolean = false

    """
    Set to true to include only the topics featured on GitHub.
    """
    featured: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of topic names to include.
    """
    names: [String]

    """
    Ordering options for the returned topics.
    """
    orderBy: TopicOrder

    """
    A query for filtering topics by name.
    """
    query: String
  ): TopicConnection! @internal

  """
  A list of trending developers
  """
  trendingDevelopers: [User]

  """
  Returns trending Marketplace apps based on their installation count.
  """
  trendingMarketplaceApps: [MarketplaceListing!]! @internal @serviceMapping(to: "github/marketplace")

  """
  A list of trending repositories
  """
  trendingRepositories: [Repository]

  """
  Get the number of unread broadcast posts (or -1 if unknown) for the viewer.
  """
  unreadBroadcastsCount: Int! @internal

  """
  Lookup a user by login.
  """
  user(
    """
    The user's login.
    """
    login: String!
  ): User

  """
  The currently authenticated user.
  """
  viewer: User!

  """
  Is the viewer allowed to create new blog posts.
  """
  viewerCanCreatePosts: Boolean! @internal

  """
  Returns true if the user has trade restrictions
  """
  viewerHasTradeRestrictions: Boolean!
}

"""
Represents the client's rate limit.
"""
type RateLimit @serviceMapping(to: "github/graphql_api") {
  """
  The point cost for the current query counting against the rate limit.
  """
  cost: Int!

  """
  Field-level breakdown of this query's cost
  """
  costBreakdowns: [CostBreakdown!] @internal

  """
  The maximum number of points the client is permitted to consume in a 60 minute window.
  """
  limit: Int!

  """
  The maximum number of nodes this query may return
  """
  nodeCount: Int!

  """
  Type-by-type breakdown of how many nodes this query may access
  """
  nodeCountBreakdowns: [NodeCountBreakdown!] @internal

  """
  The number of points remaining in the current rate limit window.
  """
  remaining: Int!

  """
  The time at which the current rate limit window resets in UTC epoch seconds.
  """
  resetAt: DateTime!

  """
  The number of points used in the current rate limit window.
  """
  used: Int!
}

"""
Represents the raw blob url for a tree entry.
"""
interface RawBlobUrl @serviceMapping(to: "github/repo_info") {
  """
  The URL to this file.
  """
  url: URI
}

"""
Represents a subject that can be reacted on.
"""
interface Reactable {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!
}

"""
The connection type for User.
"""
type ReactingUserConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [ReactingUserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user that's made a reaction.
"""
type ReactingUserEdge @serviceMapping(to: "github/shared") {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  The moment when the user made the reaction.
  """
  reactedAt: DateTime!
}

"""
An emoji reaction to a particular piece of content.
"""
type Reaction implements Node @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  Identifies the emoji reaction.
  """
  content: ReactionContent!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The reactable piece of content
  """
  reactable: Reactable!

  """
  Identifies the user who created this reaction.
  """
  user: User
}

"""
A list of reactions that have been left on the subject.
"""
type ReactionConnection {
  """
  A list of edges.
  """
  edges: [ReactionEdge]

  """
  A list of nodes.
  """
  nodes: [Reaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""
Emojis that can be attached to Issues, Pull Requests and Comments.
"""
enum ReactionContent {
  """
  Represents the `:confused:` emoji.
  """
  CONFUSED

  """
  Represents the `:eyes:` emoji.
  """
  EYES

  """
  Represents the `:heart:` emoji.
  """
  HEART

  """
  Represents the `:hooray:` emoji.
  """
  HOORAY

  """
  Represents the `:laugh:` emoji.
  """
  LAUGH

  """
  Represents the `:rocket:` emoji.
  """
  ROCKET

  """
  Represents the `:-1:` emoji.
  """
  THUMBS_DOWN

  """
  Represents the `:+1:` emoji.
  """
  THUMBS_UP
}

"""
An edge in a connection.
"""
type ReactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Reaction
}

"""
A group of emoji reactions to a particular piece of content.
"""
type ReactionGroup @serviceMapping(to: "github/issues") {
  """
  Identifies the emoji reaction.
  """
  content: ReactionContent!

  """
  Identifies when the reaction was created.
  """
  createdAt: DateTime

  """
  Reactors to the reaction subject with the emotion represented by this reaction group.
  """
  reactors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReactorConnection!

  """
  The subject that was reacted to.
  """
  subject: Reactable!

  """
  Count of reactions for this reaction group
  """
  totalCount: Int! @internal

  """
  Users who have reacted to the reaction subject with the emotion represented by this reaction group
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReactingUserConnection!
    @deprecated(
      reason: "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC."
    )

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""
Ways in which lists of reactions can be ordered upon return.
"""
input ReactionOrder {
  """
  The direction in which to order reactions by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order reactions by.
  """
  field: ReactionOrderField!
}

"""
A list of fields that reactions can be ordered by.
"""
enum ReactionOrderField {
  """
  Allows ordering a list of reactions by when they were created.
  """
  CREATED_AT
}

"""
Types that can be assigned to reactions.
"""
union Reactor @serviceMapping(to: "github/issues") = Bot | Mannequin | Organization | User

"""
The connection type for Reactor.
"""
type ReactorConnection @serviceMapping(to: "github/issues") {
  """
  A list of edges.
  """
  edges: [ReactorEdge]

  """
  A list of nodes.
  """
  nodes: [Reactor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents an author of a reaction.
"""
type ReactorEdge @serviceMapping(to: "github/issues") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The author of the reaction.
  """
  node: Reactor!

  """
  The moment when the user made the reaction.
  """
  reactedAt: DateTime!
}

"""
Represents a 'ready_for_review' event on a given pull request.
"""
type ReadyForReviewEvent implements Node & PerformableViaApp & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  The HTTP path for this ready for review event.
  """
  resourcePath: URI!

  """
  PullRequestReviewPoint associated with this event.
  """
  reviewPoint: PullRequestReviewPoint @underDevelopment(since: "2021-01-30")

  """
  The HTTP URL for this ready for review event.
  """
  url: URI!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A record that a user has recently interacted with.
"""
type RecentInteraction {
  """
  Id of the comment if the interaction is on a comment.
  """
  commentId: Int

  """
  User who left a comment if the interaction is as comment.
  """
  commenter: User

  """
  The record with which the user interacted.
  """
  interactable: IssueOrPullRequest!

  """
  A description of how the user interacted with the record.
  """
  interaction: InteractionType!

  """
  When the interaction occurred.
  """
  occurredAt: DateTime!
}

"""
Autogenerated input type of RecordMarketplaceRetargetingNotifications
"""
input RecordMarketplaceRetargetingNotificationsInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The timestamp the notification was sent
  """
  sentAt: DateTime!

  """
  The database id of user who was notified
  """
  userId: Int!
}

"""
Autogenerated return type of RecordMarketplaceRetargetingNotifications
"""
type RecordMarketplaceRetargetingNotificationsPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The number of order previews updated
  """
  recordsProcessed: Int
}

"""
Origin of approved recovery providers.
"""
enum RecoveryProvider @internal @serviceMapping(to: "github/account_login") {
  """
  The local, test recovery provider origin
  """
  EXAMPLE_PROVIDER

  """
  The Facebook recovery provider origin
  """
  FACEBOOK

  """
  The local, development recovery provider origin
  """
  GITHUB_DEV

  """
  The local, development recovery provider origin
  """
  LOCAL_DEV
}

"""
Possible token states.
"""
enum RecoveryTokenValidationResult @internal {
  """
  The token could not be decoded for some unknown reason
  """
  BAD_LEGACY_DECODE

  """
  Earthsmoke has been deliberately disabled for this user
  """
  EARTHSMOKE_DISABLED

  """
  The secret value does not match what is in our database
  """
  EARTHSMOKE_SECRET_USER_ID_MISMATCH

  """
  The token secret could not be decoded because of an earthsmoke error
  """
  EARTHSMOKE_SERVER_ERROR

  """
  The token appears to be valid
  """
  LEGACY_SUCCESS

  """
  No matching token ID could be found
  """
  NO_CONFIRMED_TOKENS_MATCHED

  """
  The secret value does not match what is in our database
  """
  SECRET_USER_ID_MISMATCH

  """
  The token signatures is valid but the inner token might not be
  """
  SIGNATURE_ONLY_SUCCESS

  """
  The token appears to be valid
  """
  SUCCESS

  """
  The token signatures or format appear to be invalid
  """
  UNVERIFIABLE_TOKEN
}

"""
Autogenerated input type of RedraftMarketplaceListing
"""
input RedraftMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Select the listing that matches this slug. It's the short name of the listing used in its URL.
  """
  slug: String!
}

"""
Autogenerated return type of RedraftMarketplaceListing
"""
type RedraftMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Represents a Git reference.
"""
type Ref implements Node @serviceMapping(to: "github/ref") {
  """
  A list of pull requests with this ref as the head ref.
  """
  associatedPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Branch protection rules for this ref
  """
  branchProtectionRule: BranchProtectionRule

  """
  Look up directory under the commit tree
  """
  directory(
    """
    The file path
    """
    path: String
  ): CommittishDirectory

  """
  Look up file under the commit tree.
  """
  file(
    """
    The file path.
    """
    path: String!
  ): CommittishFile

  """
  Look up a list of files under the commit tree.
  """
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    An array of paths in the repository like "README.md", "test.rb", ...
    """
    paths: [String!]!
  ): CommittishFileConnection!
  id: ID!

  """
  The ref name.
  """
  name: String!

  """
  The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  """
  prefix: String!

  """
  Branch protection rules that are viewable by non-admins
  """
  refUpdateRule: RefUpdateRule

  """
  The repository the ref belongs to.
  """
  repository: Repository!

  """
  The object the ref points to. Returns null when object does not exist.
  """
  target: GitObject
}

"""
The connection type for Ref.
"""
type RefConnection @serviceMapping(to: "github/ref") {
  """
  A list of edges.
  """
  edges: [RefEdge]

  """
  A list of nodes.
  """
  nodes: [Ref]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RefEdge @serviceMapping(to: "github/ref") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Ref
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  """
  The direction in which to order refs by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order refs by.
  """
  field: RefOrderField!
}

"""
Properties by which ref connections can be ordered.
"""
enum RefOrderField {
  """
  Order refs by their alphanumeric name
  """
  ALPHABETICAL

  """
  Order refs by underlying commit date if the ref prefix is refs/tags/
  """
  TAG_COMMIT_DATE
}

"""
A ref update
"""
input RefUpdate @serviceMapping(to: "github/repo_info") {
  """
  The value this ref should be updated to.
  """
  afterOid: GitObjectID!

  """
  The value this ref needs to point to before the update.
  """
  beforeOid: GitObjectID

  """
  Force a non fast-forward update.
  """
  force: Boolean = false

  """
  The fully qualified name of the ref to be update. For example `refs/heads/branch-name`
  """
  name: GitRefname!
}

"""
A ref update rules for a viewer.
"""
type RefUpdateRule @serviceMapping(to: "github/repo_info") {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean!

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean!

  """
  Identifies the protection rule pattern.
  """
  pattern: String!

  """
  Number of approving reviews recommended to update matching branches.
  """
  recommendedApprovingReviewCount: Int

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean!

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean!

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean!

  """
  Are commits required to be signed.
  """
  requiresSignatures: Boolean!

  """
  Is the viewer allowed to dismiss reviews.
  """
  viewerAllowedToDismissReviews: Boolean!

  """
  Can the viewer push to the branch
  """
  viewerCanPush: Boolean!
}

"""
Represents a 'referenced' event on a given `ReferencedSubject`.
"""
type ReferencedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the commit associated with the 'referenced' event.
  """
  commit: Commit

  """
  Identifies the repository associated with the 'referenced' event.
  """
  commitRepository: Repository!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  Checks if the subject was closed by this commit reference.
  """
  hasClosedSubject: Boolean! @internal
  id: ID!

  """
  Checks if the pusher either committed or authored the commit.
  """
  isAuthoredByPusher: Boolean! @internal

  """
  Reference originated in a different repository.
  """
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!

  """
  Object referenced by event.
  """
  subject: ReferencedSubject!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Checks if the subject will be closed when the referencing commit is merged into the default branch.
  """
  willCloseSubject: Boolean! @internal
}

"""
Any referencable object
"""
union ReferencedSubject = Issue | PullRequest

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
input RegenerateEnterpriseIdentityProviderRecoveryCodesInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

"""
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of RegenerateVerifiableDomainToken
"""
input RegenerateVerifiableDomainTokenInput @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to regenerate the verification token of.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of RegenerateVerifiableDomainToken
"""
type RegenerateVerifiableDomainTokenPayload @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verification token that was generated.
  """
  verificationToken: String
}

"""
Represents a single registry metadatum
"""
input RegistryPackageMetadatum @serviceMapping(to: "github/package_registry") {
  """
  Name of the metadatum.
  """
  name: String!

  """
  True, if the metadatum can be updated if it already exists
  """
  update: Boolean

  """
  Value of the metadatum.
  """
  value: String!
}

"""
Autogenerated input type of RejectDeployments
"""
input RejectDeploymentsInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional comment for rejecting deployments
  """
  comment: String = ""

  """
  The ids of environments to reject deployments
  """
  environmentIds: [ID!]!

  """
  The node ID of the workflow run containing the pending deployments.
  """
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

"""
Autogenerated return type of RejectDeployments
"""
type RejectDeploymentsPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The affected deployments.
  """
  deployments: [Deployment!]

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-01-04")
}

"""
Autogenerated input type of RejectMarketplaceListing
"""
input RejectMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Marketplace listing to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListing"])

  """
  A custom message for the integrator.
  """
  message: String

  """
  The state the listing should be returned to.
  """
  state: MarketplaceListingState!
}

"""
Autogenerated return type of RejectMarketplaceListing
"""
type RejectMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
A release contains the content for a release.
"""
type Release implements Node & Reactable & Trigger & UniformResourceLocatable
  @serviceMapping(to: "github/release")
  @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  The author of the release
  """
  author: User

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description of the release.
  """
  description: String

  """
  The description of this release rendered to HTML.
  """
  descriptionHTML: HTML

  """
  The linked discussion for this release
  """
  discussion: Discussion
  id: ID!

  """
  Whether or not the release is a draft
  """
  isDraft: Boolean!

  """
  Whether or not the release is the latest releast
  """
  isLatest: Boolean!

  """
  Whether or not the release is a prerelease
  """
  isPrerelease: Boolean!

  """
  Whether or not the release is for a GitHub Action published on the Marketplace.
  """
  isPublishedOnMarketplace: Boolean! @internal

  """
  A list of users mentioned in the release description
  """
  mentions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection

  """
  The title of the release.
  """
  name: String

  """
  List of packages associated with this release.
  """
  packageVersions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageVersionConnection! @internal

  """
  Identifies the date and time when the release was created.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  List of releases assets which are dependent on this release.
  """
  releaseAssets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of names to filter the assets by.
    """
    name: String
  ): ReleaseAssetConnection!

  """
  The repository that the release belongs to.
  """
  repository: Repository!

  """
  The GitHub Action for this release.
  """
  repositoryAction: RepositoryAction @internal

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  A description of the release, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML

  """
  The Git tag the release points to
  """
  tag: Ref

  """
  The tag commit for this release.
  """
  tagCommit: Commit

  """
  The name of the release's Git tag
  """
  tagName: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue
  """
  url: URI!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!
}

"""
A release asset contains the content for a release asset.
"""
type ReleaseAsset implements Node @serviceMapping(to: "github/release") @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  The asset's content-type
  """
  contentType: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The number of times this asset was downloaded
  """
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!
  id: ID!

  """
  Identifies the title of the release asset.
  """
  name: String!

  """
  Release that the asset is associated with
  """
  release: Release

  """
  The size (in bytes) of the asset
  """
  size: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user that performed the upload
  """
  uploadedBy: User!

  """
  Identifies the URL of the release asset.
  """
  url: URI!
}

"""
The connection type for ReleaseAsset.
"""
type ReleaseAssetConnection @serviceMapping(to: "github/release") {
  """
  A list of edges.
  """
  edges: [ReleaseAssetEdge]

  """
  A list of nodes.
  """
  nodes: [ReleaseAsset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReleaseAssetEdge @serviceMapping(to: "github/release") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReleaseAsset
}

"""
The connection type for Release.
"""
type ReleaseConnection @serviceMapping(to: "github/release") {
  """
  A list of edges.
  """
  edges: [ReleaseEdge]

  """
  A list of nodes.
  """
  nodes: [Release]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReleaseEdge @serviceMapping(to: "github/release") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Release
}

"""
Ways in which lists of releases can be ordered upon return.
"""
input ReleaseOrder {
  """
  The direction in which to order releases by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order releases by.
  """
  field: ReleaseOrderField!
}

"""
Properties by which release connections can be ordered.
"""
enum ReleaseOrderField {
  """
  Order releases by creation time
  """
  CREATED_AT

  """
  Order releases alphabetically by name
  """
  NAME
}

"""
Autogenerated input type of RemoveAssigneesFromAssignable
"""
input RemoveAssigneesFromAssignableInput {
  """
  The id of the assignable object to remove assignees from.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The id of users to remove as assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveAssigneesFromAssignable
"""
type RemoveAssigneesFromAssignablePayload {
  """
  The item that was unassigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of RemoveEnterpriseAdmin
"""
input RemoveEnterpriseAdminInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Enterprise ID from which to remove the administrator.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of the user to remove as an administrator.
  """
  login: String!
}

"""
Autogenerated return type of RemoveEnterpriseAdmin
"""
type RemoveEnterpriseAdminPayload @serviceMapping(to: "github/admin_experience") {
  """
  The user who was removed as an administrator.
  """
  admin: User

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  A message confirming the result of removing an administrator.
  """
  message: String

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseIdentityProvider
"""
input RemoveEnterpriseIdentityProviderInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which to remove the identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

"""
Autogenerated return type of RemoveEnterpriseIdentityProvider
"""
type RemoveEnterpriseIdentityProviderPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider that was removed from the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput
  @underDevelopment(since: "2019-09-09")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the user should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the user to remove from the enterprise.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload
  @underDevelopment(since: "2019-09-09")
  @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The user that was removed from the enterprise.
  """
  user: User

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise from which the organization should be removed.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The ID of the organization to remove from the enterprise.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RemoveEnterpriseOrganization
"""
type RemoveEnterpriseOrganizationPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise

  """
  The organization that was removed from the enterprise.
  """
  organization: Organization

  """
  The viewer performing the mutation.
  """
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseSupportEntitlement
"""
input RemoveEnterpriseSupportEntitlementInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a member who will lose the support entitlement.
  """
  login: String!
}

"""
Autogenerated return type of RemoveEnterpriseSupportEntitlement
"""
type RemoveEnterpriseSupportEntitlementPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of removing the support entitlement.
  """
  message: String
}

"""
Autogenerated input type of RemoveLabelsFromLabelable
"""
input RemoveLabelsFromLabelableInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ids of labels to remove.
  """
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])

  """
  The id of the Labelable to remove labels from.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")
}

"""
Autogenerated return type of RemoveLabelsFromLabelable
"""
type RemoveLabelsFromLabelablePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-28")

  """
  The Labelable the labels were removed from.
  """
  labelable: Labelable
}

"""
Autogenerated input type of RemoveOutsideCollaborator
"""
input RemoveOutsideCollaboratorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to remove the outside collaborator from.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The ID of the outside collaborator to remove.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveOutsideCollaborator
"""
type RemoveOutsideCollaboratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that was removed as an outside collaborator.
  """
  removedUser: User
}

"""
Autogenerated input type of RemoveProjectCollaborator
"""
input RemoveProjectCollaboratorInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to remove the collaborator from.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the user collaborator to remove from the project.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveProjectCollaborator
"""
type RemoveProjectCollaboratorPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project that the collaborator was removed from.
  """
  project: Project

  """
  The user collaborator that was removed from the project.
  """
  user: User
}

"""
Autogenerated input type of RemovePullRequestFromMergeQueue
"""
input RemovePullRequestFromMergeQueueInput @internal @serviceMapping(to: "github/pull_requests") {
  """
  Which branch's merge queue we want to remove this pull request from (uses default branch if omitted)
  """
  branch: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request to remove.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of RemovePullRequestFromMergeQueue
"""
type RemovePullRequestFromMergeQueuePayload @internal @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated merge queue
  """
  mergeQueue: MergeQueue
}

"""
Autogenerated input type of RemoveReaction
"""
input RemoveReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the emoji reaction to remove.
  """
  content: ReactionContent!

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
        "Release"
        "RepositoryAdvisory"
        "RepositoryAdvisoryComment"
        "TeamDiscussion"
        "TeamDiscussionComment"
      ]
      abstractType: "Reactable"
    )
}

"""
Autogenerated return type of RemoveReaction
"""
type RemoveReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reaction object.
  """
  reaction: Reaction

  """
  The reactable subject.
  """
  subject: Reactable
}

"""
Autogenerated input type of RemoveReleaseFromRepository
"""
input RemoveReleaseFromRepositoryInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Release ID to delete.
  """
  releaseId: ID! @possibleTypes(concreteTypes: ["Release"])

  """
  The ID of the repository containing the release
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of RemoveReleaseFromRepository
"""
type RemoveReleaseFromRepositoryPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new release object.
  """
  release: Release
}

"""
Autogenerated input type of RemoveStar
"""
input RemoveStarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The context in which the object was unstarred, e.g., the page the button was on.
  """
  starrableContext: String @internal

  """
  The Starrable ID to unstar.
  """
  starrableId: ID! @possibleTypes(concreteTypes: ["Gist", "Repository", "Topic"], abstractType: "Starrable")
}

"""
Autogenerated return type of RemoveStar
"""
type RemoveStarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The starrable.
  """
  starrable: Starrable
}

"""
Autogenerated input type of RemoveTeamMember
"""
input RemoveTeamMemberInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the team to remove the team member from.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the team member to remove.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RemoveTeamMember
"""
type RemoveTeamMemberPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team that the member was removed from.
  """
  team: Team

  """
  The user that was removed as a team member.
  """
  user: User
}

"""
Autogenerated input type of RemoveTeamProject
"""
input RemoveTeamProjectInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the project to remove.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the team to remove the project from.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of RemoveTeamProject
"""
type RemoveTeamProjectPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project that was removed.
  """
  project: Project

  """
  The team that the project was removed from.
  """
  team: Team
}

"""
Autogenerated input type of RemoveUpvote
"""
input RemoveUpvoteInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion or comment to remove upvote.
  """
  subjectId: ID! @possibleTypes(concreteTypes: ["Discussion", "DiscussionComment"], abstractType: "Votable")
}

"""
Autogenerated return type of RemoveUpvote
"""
type RemoveUpvotePayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-02-12")

  """
  The votable subject.
  """
  subject: Votable
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node & PerformableViaApp & TimelineEvent
  @internal
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The user who removed this Pull Request from the merge queue
  """
  enqueuer: User
  id: ID!

  """
  The merge queue where this pull request was removed from.
  """
  mergeQueue: MergeQueue

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest

  """
  The reason this pull request was removed from the queue.
  """
  reason: String

  """
  The HTTP path for this event.
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this event.
  """
  url: URI! @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node & PerformableViaApp & ProjectEvent & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Project referenced by event.
  """
  project: Project

  """
  Column name referenced by this project event.
  """
  projectColumnName: String!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal

  """
  Did this event result from workflow automation?
  """
  wasAutomated: Boolean! @internal
}

"""
Represents a 'renamed' event on a given issue or pull request
"""
type RenamedTitleEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the current title of the issue or pull request.
  """
  currentTitle: String!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the previous title of the issue or pull request.
  """
  previousTitle: String!

  """
  Subject that was renamed.
  """
  subject: RenamedTitleSubject!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
The Render display type.
"""
enum RenderDisplayType @internal {
  """
  A comparison between two blobs.
  """
  DIFF

  """
  An edit blob view.
  """
  EDIT

  """
  A readonly blob preview.
  """
  PREVIEW

  """
  A readonly blob view.
  """
  VIEW
}

"""
The detected Render file type.
"""
enum RenderFileType @internal {
  """
  A GeoJSON file.
  """
  GEOJSON

  """
  An image file.
  """
  IMG

  """
  A IPython Notebook file.
  """
  IPYNB

  """
  A PDF file.
  """
  PDF

  """
  A PSD file.
  """
  PSD

  """
  A `.stl` file.
  """
  SOLID

  """
  A SVG file.
  """
  SVG

  """
  A TopoJSON file.
  """
  TOPOJSON
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue to be opened.
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of ReopenIssue
"""
type ReopenIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue that was opened.
  """
  issue: Issue
}

"""
Autogenerated input type of ReopenPullRequest
"""
input ReopenPullRequestInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pull request to be reopened.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of ReopenPullRequest
"""
type ReopenPullRequestPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that was reopened.
  """
  pullRequest: PullRequest
}

"""
Represents a 'reopened' event on any `Closable`.
"""
type ReopenedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Object that was reopened.
  """
  closable: Closable!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of ReorderDashboardPins
"""
input ReorderDashboardPinsInput @underDevelopment(since: "2019-05-13") @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the pinned items in the order you want them to appear on your user dashboard.
  """
  pinnedItemIds: [ID!]!
    @possibleTypes(
      concreteTypes: ["Gist", "Issue", "Organization", "Project", "PullRequest", "Repository", "Team", "User"]
      abstractType: "DashboardPinnableItem"
    )

  """
  ID of the owner of the dashboard to modify.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of ReorderDashboardPins
"""
type ReorderDashboardPinsPayload @underDevelopment(since: "2019-05-13") @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the dashboard that was updated.
  """
  user: User
}

"""
Autogenerated input type of ReorderProfilePins
"""
input ReorderProfilePinsInput @underDevelopment(since: "2019-01-15") @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the pinned items in the order you want them to appear on your profile.
  """
  pinnedItemIds: [ID!]! @possibleTypes(concreteTypes: ["Gist", "Repository"], abstractType: "PinnableItem")

  """
  ID of the owner of the profile to modify.
  """
  profileOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "ProfileOwner")
}

"""
Autogenerated return type of ReorderProfilePins
"""
type ReorderProfilePinsPayload @underDevelopment(since: "2019-01-15") @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the profile that was updated.
  """
  profileOwner: ProfileOwner
}

"""
Autogenerated input type of ReplaceAssigneesForAssignable
"""
input ReplaceAssigneesForAssignableInput @internal @serviceMapping(to: "github/issues") {
  """
  The id of the assignable object to replace the assignees for.
  """
  assignableId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "Assignable")

  """
  The ids of the users to replace the existing assignees.
  """
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ReplaceAssigneesForAssignable
"""
type ReplaceAssigneesForAssignablePayload @internal @serviceMapping(to: "github/issues") {
  """
  The item that was assigned.
  """
  assignable: Assignable

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-03-26")
}

"""
Autogenerated input type of ReplaceLabelsForLabelable
"""
input ReplaceLabelsForLabelableInput @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the labelable object to replace the labels for.
  """
  labelableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Labelable")

  """
  The label attributes to replace the existing labels.
  """
  labels: [AddOrCreateLabelsLabelInput!]!
}

"""
Autogenerated return type of ReplaceLabelsForLabelable
"""
type ReplaceLabelsForLabelablePayload @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-06-28")

  """
  The item that was labeled.
  """
  labelableRecord: Labelable
}

"""
Audit log entry for a repo.access event.
"""
type RepoAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoAccessAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoAccessAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.add_member event.
"""
type RepoAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoAddMemberAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoAddMemberAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.add_topic event.
"""
type RepoAddTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The name of the topic added to the repository
  """
  topic: Topic

  """
  The database ID of the added topic
  """
  topicDatabaseId: Int @internal

  """
  The name of the topic added to the repository
  """
  topicName: String

  """
  The HTTP path for this topic.
  """
  topicResourcePath: URI @internal

  """
  The HTTP URL for this topic.
  """
  topicUrl: URI @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.archived event.
"""
type RepoArchivedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoArchivedAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoArchivedAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.change_merge_setting event.
"""
type RepoChangeMergeSettingAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the change was to enable (true) or disable (false) the merge type
  """
  isEnabled: Boolean

  """
  The merge method affected by the change
  """
  mergeType: RepoChangeMergeSettingAuditEntryMergeType

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The merge options available for pull requests to this repository.
"""
enum RepoChangeMergeSettingAuditEntryMergeType @serviceMapping(to: "github/audit_logs") {
  """
  The pull request is added to the base branch in a merge commit.
  """
  MERGE

  """
  Commits from the pull request are added onto the base branch individually without a merge commit.
  """
  REBASE

  """
  The pull request's commits are squashed into a single commit before they are merged to the base branch.
  """
  SQUASH
}

"""
Audit log entry for a repo.config.disable_anonymous_git_access event.
"""
type RepoConfigDisableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_collaborators_only event.
"""
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_anonymous_git_access event.
"""
type RepoConfigEnableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_collaborators_only event.
"""
type RepoConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_contributors_only event.
"""
type RepoConfigEnableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
"""
type RepoConfigEnableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.lock_anonymous_git_access event.
"""
type RepoConfigLockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.config.unlock_anonymous_git_access event.
"""
type RepoConfigUnlockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.create event.
"""
type RepoCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The database ID of the parent repository for this forked repository.
  """
  forkParentDatabaseId: Int @internal

  """
  The name of the parent repository for this forked repository.
  """
  forkParentName: String

  """
  The database ID of the root repository for this network.
  """
  forkSourceDatabaseId: Int @internal

  """
  The name of the root repository for this network.
  """
  forkSourceName: String

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoCreateAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoCreateAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.destroy event.
"""
type RepoDestroyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoDestroyAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoDestroyAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.disable event.
"""
type RepoDisableAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @internal
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The reason the repository was disabled
  """
  reason: String @internal

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.enable event.
"""
type RepoEnableAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @internal
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepositoryPrivacy
}

"""
Audit log entry for a repo.pages_cname event.
"""
type RepoPagesCnameAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The CNAME set for GitHub Pages
  """
  cname: String

  """
  The former CNAME set for GitHub Pages
  """
  cnameWas: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_create event.
"""
type RepoPagesCreateAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The CNAME set for GitHub Pages
  """
  cname: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The publishing source set for GitHub Pages
  """
  source: String

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_destroy event.
"""
type RepoPagesDestroyAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The CNAME set for GitHub Pages
  """
  cname: String

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The publishing source set for GitHub Pages
  """
  source: String

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_https_redirect_disabled event.
"""
type RepoPagesHttpsRedirectDisabledAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_https_redirect_enabled event.
"""
type RepoPagesHttpsRedirectEnabledAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_private event.
"""
type RepoPagesPrivateAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2020-04-09")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_public event.
"""
type RepoPagesPublicAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2020-04-09")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.pages_source event.
"""
type RepoPagesSourceAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The publishing source set for GitHub Pages
  """
  source: String

  """
  The former publishing source set for GitHub Pages
  """
  sourceWas: String

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.remove_member event.
"""
type RepoRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepoRemoveMemberAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoRemoveMemberAuditEntryVisibility @serviceMapping(to: "github/audit_logs") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repo.remove_topic event.
"""
type RepoRemoveTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The name of the topic added to the repository
  """
  topic: Topic

  """
  The database ID of the added topic
  """
  topicDatabaseId: Int @internal

  """
  The name of the topic added to the repository
  """
  topicName: String

  """
  The HTTP path for this topic.
  """
  topicResourcePath: URI @internal

  """
  The HTTP URL for this topic.
  """
  topicUrl: URI @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.rename event.
"""
type RepoRenameAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The former name of the repository
  """
  repositoryNameWas: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.transfer event.
"""
type RepoTransferAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The database ID of the owner of the repository
  """
  ownerDatabaseId: Int @internal

  """
  The database ID of the former owner of the repository
  """
  ownerDatabaseIdWas: Int @internal

  """
  The owner of the repository is a organization
  """
  ownerIsOrg: Boolean

  """
  The name of the owner of the repository
  """
  ownerName: String

  """
  The name of the former owner of the repository
  """
  ownerNameWas: String

  """
  The former owner of the repository was a organization
  """
  ownerWasOrg: Boolean

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The former name of the repository
  """
  repositoryNameWas: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.transfer_start event.
"""
type RepoTransferStartAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  The database ID of the user or organization that requested the transfer.
  """
  requesterDatabaseId: Int @internal

  """
  The name of the user or organization that requested the transfer.
  """
  requesterName: String

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The database ID of the user or organization that will receive the transfer request.
  """
  targetDatabaseId: Int @internal

  """
  The name of the user or organization that will receive the transfer request.
  """
  targetName: String

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repo.unarchived event.
"""
type RepoUnarchivedAuditEntry implements AuditEntry & Node & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI

  """
  The visibility of the repository
  """
  visibility: RepositoryPrivacy
}

"""
Audit log entry for a repo.update_member event.
"""
type RepoUpdateMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The permission level the user has on the repository
  """
  permission: RepoUpdateMemberAuditEntryPermission

  """
  The former permission level the user had on the repository
  """
  permissionWas: RepoUpdateMemberAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The HTTP path for the user's repository permission.
  """
  repositoryMemberPermissionResourcePath: URI

  """
  The HTTP URL for the user's repository permission.
  """
  repositoryMemberPermissionUrl: URI

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The access level to a repository
"""
enum RepoUpdateMemberAuditEntryPermission
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators
  """
  ADMIN

  """
  Can read and clone
  """
  READ

  """
  Can read, clone and push
  """
  WRITE
}

"""
Autogenerated input type of ReportBrowserError
"""
input ReportBrowserErrorInput @internal @serviceMapping(to: "github/frontend_systems") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The serialized JavaScript error to report.
  """
  error: JavascriptError!

  """
  The document readyState when the error was thrown.
  """
  readyState: String

  """
  The document's previous URL.
  """
  referrer: String

  """
  The sanitized document URL the error originated from.
  """
  sanitizedUrl: String

  """
  The number of seconds since the page loaded and the error was thrown.
  """
  timeSinceLoad: Int

  """
  The document URL the error originated from.
  """
  url: String

  """
  The current user login.
  """
  user: String
}

"""
Autogenerated return type of ReportBrowserError
"""
type ReportBrowserErrorPayload @internal @serviceMapping(to: "github/frontend_systems") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ReportBrowserMetrics
"""
input ReportBrowserMetricsInput @internal @serviceMapping(to: "github/frontend_systems") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A collection of browser stats.
  """
  stats: [BrowserStat!]!
}

"""
Autogenerated return type of ReportBrowserMetrics
"""
type ReportBrowserMetricsPayload @internal @serviceMapping(to: "github/frontend_systems") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ReportContent
"""
input ReportContentInput @underDevelopment(since: "2019-08-21") @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The reason this content is being reported.
  """
  reason: AbuseReportReason

  """
  The AbuseReportable ID to report.
  """
  reportedContentId: ID!
    @possibleTypes(
      concreteTypes: [
        "CommitComment"
        "Discussion"
        "DiscussionComment"
        "Gist"
        "Issue"
        "IssueComment"
        "PullRequest"
        "PullRequestReview"
        "PullRequestReviewComment"
      ]
      abstractType: "AbuseReportable"
    )
}

"""
Autogenerated return type of ReportContent
"""
type ReportContentPayload @underDevelopment(since: "2019-08-21") @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-08-21")

  """
  The reported content.
  """
  reportedContent: AbuseReportable
}

"""
Entities that can be reported.
"""
interface Reportable @internal {
  """
  The HTTP path for this object
  """
  resourcePath: URI! @internal

  """
  The HTTP URL for this object
  """
  url: URI! @internal

  """
  Can the viewer report this object
  """
  viewerCanReport: Boolean! @internal

  """
  Can the viewer report this object to the maintainer
  """
  viewerCanReportToMaintainer: Boolean! @internal

  """
  Indicates the relationship the viewer has with this repository.
  """
  viewerRelationship: CommentAuthorAssociation! @internal
}

"""
The reasons a piece of content can be reported or minimized.
"""
enum ReportedContentClassifiers {
  """
  An abusive or harassing piece of content
  """
  ABUSE

  """
  A duplicated piece of content
  """
  DUPLICATE

  """
  An irrelevant piece of content
  """
  OFF_TOPIC

  """
  An outdated piece of content
  """
  OUTDATED

  """
  The content has been resolved
  """
  RESOLVED

  """
  A spammy piece of content
  """
  SPAM
}

"""
A collection of repositories by the same owner that use a particular dependency.
"""
type RepositoriesUsingDependency @underDevelopment(since: "2020-11-30") @serviceMapping(to: "github/dependency_graph") {
  """
  The repository that the other repositories depend on. Not necessarily owned by the owner of the other repositories.
  """
  dependency: Repository!

  """
  The user or organization who owns these repositories.
  """
  owner: RepositoryOwner!

  """
  The repositories, all owned by the same user or organization, that rely on the dependency.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!
}

"""
A repository contains the content for a project.
"""
type Repository implements DefaultWorkflowPermissions & FeatureFlaggable & ForkPrWorkflowsPolicy & Node & PackageOwner & PackageSearch & ProjectOwner & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable
  @serviceMapping(to: "github/repo_info") {
  """
  The abuse reports made to the maintainers of this repository.
  """
  abuseReportedToMaintainer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter abuse reports by whether they've been marked as resolved.
    """
    filter: AbuseReportFilter = ALL

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for abuse reports returned from the connection.
    """
    orderBy: AbuseReportOrder = {field: CREATED_AT, direction: DESC}
  ): AbuseReportConnection!

  """
  Returns whether or not Actions are allowed to be invoked based on the repo's reputation score or staff tools setting
  """
  actionInvocationBlocked: Boolean! @internal

  """
  Diff required for actions path filtering
  """
  actionsFilterDiff(
    """
    The base sha for the comparison
    """
    baseSha: GitObjectID!

    """
    The head sha for the comparison
    """
    headSha: GitObjectID!

    """
    The PR related to the compare
    """
    pullRequest: ID

    """
    The full ref of the head, e.g refs/heads/topic-branch
    """
    ref: String
  ): ActionsFilterDiff @internal

  """
  Returns the entity used by Actions Runtime for limiting build concurrency.
  """
  actionsPlanOwner: ActionsPlanOwner @internal

  """
  Returns the retention limit in days for the actions artifacts and logs in the repository
  """
  actionsRetentionLimit: Int! @internal

  """
  Fields that are only visible to repo administrators.
  """
  adminInfo: RepositoryAdminInfo

  """
  Returns whether or not this repository allows all Actions to be used in a workflow.
  """
  allowsAllActions: Boolean! @internal

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Filters users with query on user name and login
    """
    query: String
  ): UserConnection!

  """
  Whether or not Auto-merge can be enabled on pull requests in this repository.
  """
  autoMergeAllowed: Boolean!

  """
  A list of suggested topic names matching the given query for this repository.
  """
  autocompletedTopicNames(
    """
    String to match topic suggestions.
    """
    query: String
  ): [String]! @internal

  """
  A list of branch protection rules for this repository.
  """
  branchProtectionRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConnection!

  """
  Return the list of branches in the repository including the default one (first).
  """
  branchesIncludingDefaultFirst: [String!]! @internal

  """
  If Projects can be enabled for this repository
  """
  canEnableProjects: Boolean! @underDevelopment(since: "2019-05-08")

  """
  Returns whether this repository can use environment features
  """
  canUseEnvironments: Boolean! @internal

  """
  The HTTP path to batch load Commit checks statuses rollups
  """
  checksStatusesRollupsResourcePath: URI! @internal

  """
  The HTTP URL to batch load Commit checks statuses rollups
  """
  checksStatusesRollupsUrl: URI! @internal

  """
  The path to clone this repository
  """
  cloneResourcePath: URI! @internal

  """
  The URL to clone this repository
  """
  cloneUrl: URI! @internal

  """
  The cname error for the associated page build
  """
  cnameError: String @internal

  """
  Returns the code of conduct for this repository
  """
  codeOfConduct: CodeOfConduct

  """
  A list of collaborators associated with the repository.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  Returns whether or not a repository is restricted to collaborators only
  """
  collaboratorsOnly: Boolean! @internal

  """
  A list of commit comments associated with the repository.
  """
  commitComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit comments returned from the connection.
    """
    orderBy: CommitCommentOrder @internal
  ): CommitCommentConnection!

  """
  Whether the commit is reachable in this repository.
  """
  commitIsInBranchOrTag(
    """
    The commit's Git object ID
    """
    oid: GitObjectID!
  ): Boolean @internal

  """
  Find commit by extended SHA-1 syntax.

  Returns nothing if revision syntax is invalid.
  """
  commitRevision(
    """
    The name that can be resolved to a commit.

    See CommitRevision.name for examples.
    """
    name: String!
  ): CommitRevision @internal

  """
  The HTTP URL pointing to this repository's commits listing.
  """
  commitsResourcePath(
    """
    The login of a user by which to filter the repository's commits.
    """
    author: String
  ): URI! @internal

  """
  A list of users who have contributed to this repository through dependences
  """
  communityContributorsCollection: CommunityContributorsCollection! @internal

  """
  Information about the repository's community engagement.
  """
  communityProfile: CommunityProfile @internal

  """
  Returns a list of contact links associated to the repository
  """
  contactLinks: [RepositoryContactLink!]

  """
  A list of users who have contributed to this repository
  """
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryContributorConnection! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The repository's default branch.
  """
  defaultBranch: String! @internal

  """
  The Ref associated with the repository's default branch.
  """
  defaultBranchRef: Ref

  """
  The merge queue for this repository
  """
  defaultMergeQueue: MergeQueue @internal

  """
  Indicates default workflow permissions level
  """
  defaultWorkflowPermissions: DefaultWorkflowPermissionsValue

  """
  Whether or not branches are automatically deleted when merged in this repository.
  """
  deleteBranchOnMerge: Boolean!

  """
  Returns a single deleted issue from the current repository by number.
  """
  deletedIssue(
    """
    The number for the issue to be returned.
    """
    number: Int!
  ): DeletedIssue @internal

  """
  A list of dependency manifests contained in the repository
  """
  dependencyGraphManifests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Cursor to paginate dependencies
    """
    dependenciesAfter: String

    """
    Number of dependencies to fetch
    """
    dependenciesFirst: Int

    """
    Dependencies to return first
    """
    dependenciesPrefers: [String] @internal

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Flag to indicate that dependencies should be eagerly loaded
    """
    includeDependencies: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Package manager to scope to
    """
    packageManager: String @internal

    """
    Package name to scope to
    """
    packageName: String @internal

    """
    Flag to scope to only manifests with dependencies
    """
    withDependencies: Boolean
  ): DependencyGraphManifestConnection

  """
  A list of packages contained in the repository
  """
  dependencyGraphPackages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Debug packages data
    """
    debug: Boolean

    """
    The type of dependent to query
    """
    dependentType: DependencyGraphDependentType

    """
    Cursor to paginate dependents
    """
    dependentsAfter: String

    """
    Cursor to paginate dependents
    """
    dependentsBefore: String

    """
    Number of dependents to fetch
    """
    dependentsFirst: Int

    """
    Number of dependents to fetch
    """
    dependentsLast: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Flag to indicate that dependent count should be loaded
    """
    includeDependentCounts: Boolean

    """
    Flag to indicate that dependents should be eagerly loaded
    """
    includeDependents: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The internal dependency graph package ID
    """
    packageId: String
  ): DependencyGraphPackageConnection @internal

  """
  A list of deploy keys that are on this repository.
  """
  deployKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeployKeyConnection!

  """
  Deployments associated with the repository
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = {field: CREATED_AT, direction: ASC}
  ): DeploymentConnection!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns a single discussion from the current repository by number.
  """
  discussion(
    """
    The number for the discussion to be returned.
    """
    number: Int!
  ): Discussion

  """
  A list of discussion categories that are available in the repository.
  """
  discussionCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCategoryConnection!

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: UPDATED_AT, direction: DESC}
  ): DiscussionConnection!

  """
  Count of the Discussions within this repository.
  """
  discussionsCount: Int!

  """
  The number of kilobytes this repository occupies on disk.
  """
  diskUsage: Int

  """
  Returns a single active environment from the current repository by name.
  """
  environment(
    """
    The name of the environment to be returned.
    """
    name: String!
  ): Environment

  """
  A list of environments that are in this repository.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  The URL to where this repository has been exported to or null if the repository is not locked for migration.
  """
  exportedToUrl: URI @internal

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates the fork PR workflow policy for this object
  """
  forkPrWorkflowsPolicy: ForkPrWorkflowsPolicyValue!

  """
  A list of direct forked repositories.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection!

  """
  The funding links for this repository
  """
  fundingLinks: [FundingLink!]!

  """
  The build status for the last page deployment
  """
  ghPagesError: Boolean @internal

  """
  The error message for the last page build
  """
  ghPagesErrorMessage: String @internal

  """
  the gh pages URL for this repo
  """
  ghPagesUrl: URI @internal

  """
  The Git URL to clone this repository
  """
  gitUrl: URI! @underDevelopment(since: "2018-06-25")

  """
  Returns the label this repository uses to denote good issues for new users.
  """
  goodFirstIssueLabel: Label @internal

  """
  Returns whether or not the repository has an action YAML file in its root.
  """
  hasActionAtRoot: Boolean! @internal

  """
  Indicates if the repository has anonymous Git read access feature enabled.
  """
  hasAnonymousAccessEnabled: Boolean! @internal

  """
  Indicates if the repository has downloads.
  """
  hasDownloads: Boolean! @internal

  """
  Returns a boolean indicating if the repository has branches or not.
  """
  hasHeads: Boolean! @internal

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Returns whether or not the repository has an Action that is listable on the Marketplace.
  """
  hasListableAction: Boolean! @internal

  """
  does this repo have a page
  """
  hasPage: Boolean! @internal

  """
  Indicates if the repository has Pages configured.
  """
  hasPages: Boolean! @internal

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository has the report to maintainer feature enabled.
  """
  hasReportToMaintainerEnabled: Boolean! @underDevelopment(since: "2019-09-16")

  """
  Indicates if a repository has wiki editing restricted to pushers only.
  """
  hasRestrictedWikiEditing: Boolean! @underDevelopment(since: "2019-05-09")

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  Returns the label this repository uses to denote issues that need help.
  """
  helpWantedLabel: Label @internal

  """
  The repository's URL.
  """
  homepageUrl: URI
  id: ID!

  """
  Returns the import associated with this repository
  """
  import: Import

  """
  A list of GitHub App Installations
  """
  installedAppInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InstalledAppInstallationsConnection! @internal

  """
  A list of installed GitHub Apps
  """
  installedApps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InstalledAppConnection! @internal

  """
  The interaction ability settings for this repository.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Returns whether or not Actions have been disabled by the repositories settings.
  """
  isActionsDisabledAtAnyLevel: Boolean! @internal

  """
  Repo's eligibility to use Actions
  """
  isActionsEligible: Boolean! @internal

  """
  Indicates if anonymous git access is available for the repository
  """
  isAnonymousAccessAvailable: Boolean! @internal

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Returns true if blank issue creation is allowed
  """
  isBlankIssuesEnabled: Boolean!

  """
  Returns whether or not this repository disabled.
  """
  isDisabled: Boolean!

  """
  Are discussions available on this repository?
  """
  isDiscussionsEnabled: Boolean!

  """
  Returns whether or not this repository is empty.
  """
  isEmpty: Boolean!

  """
  Is the project owner (organization, user, or a repo) managed by an Identity Provider
  """
  isEnterpriseManaged: Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Returns whether or not a repository has been hidden from discovery pages
  """
  isHiddenFromDiscovery: Boolean! @internal

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Returns whether this repository is pinned to the profile of the specified repository owner.
  """
  isPinned(
    """
    The ID of the owner of the profile you want to check.
    """
    profileOwnerId: ID!
  ): Boolean! @underDevelopment(since: "2019-01-15")

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Returns true if this repository has a security policy
  """
  isSecurityPolicyEnabled: Boolean

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  Indicates if the repositories plan owner is trade controls restricted, which makes this repo behave as archived
  """
  isTradeControlsReadOnly: Boolean! @internal

  """
  Is this repository a user configuration repository?
  """
  isUserConfigurationRepository: Boolean!

  """
  is this a user pages repository
  """
  isUserPagesRepo: Boolean! @internal

  """
  Is this repository added to the viewers favorites.
  """
  isViewersFavorite: Boolean!

  """
  Returns a single issue from the current repository by number.
  """
  issue(
    """
    The number for the issue to be returned.
    """
    number: Int!
  ): Issue

  """
  Returns a list of issue form links associated to the repository
  """
  issueFormLinks: [RepositoryContactLink!]

  """
  Returns a single issue-like object from the current repository by number.
  """
  issueOrPullRequest(
    """
    The number for the issue to be returned.
    """
    number: Int!
  ): IssueOrPullRequest

  """
  Returns a list of issue templates associated to the repository
  """
  issueTemplates: [IssueTemplate!]

  """
  A list of issues that have been opened in the repository.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection! @serviceMapping(to: "github/issues")

  """
  Returns a single label by name
  """
  label(
    """
    Label name
    """
    name: String!
  ): Label

  """
  A list of labels associated with the repository.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = {field: CREATED_AT, direction: ASC}

    """
    If provided, searches labels by name and description.
    """
    query: String
  ): LabelConnection @serviceMapping(to: "github/issues")

  """
  A list containing a breakdown of the language composition of the repository.
  """
  languages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: LanguageOrder
  ): LanguageConnection

  """
  The latest commit for the given path on the given ref.
  """
  latestCommit(
    """
    The path to search for the latest commit. Defaults to the root.
    """
    path: String

    """
    The ref to search for the latest commit. Defaults to the default branch for the repository.
    """
    refName: String
  ): Commit @internal

  """
  Get the latest release for the repository if one exists.
  """
  latestRelease: Release

  """
  Contents of the license file in the repository
  """
  licenseContents: String

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  If one exists, the Action listed on the Marketplace for the repository.
  """
  listedAction: RepositoryAction @internal

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  Returns whether or not this repository meets 2fa requirements.
  """
  meetsActionsTwoFactorRequirements: Boolean! @internal

  """
  A list of Users that can be mentioned in the context of the repository.
  """
  mentionableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login
    """
    query: String
  ): UserConnection!

  """
  Whether or not PRs are merged with a merge commit on this repository.
  """
  mergeCommitAllowed: Boolean!

  """
  Returns a single milestone from the current repository by number.
  """
  milestone(
    """
    The number for the milestone to be returned.
    """
    number: Int!
  ): Milestone

  """
  A list of milestones associated with the repository.
  """
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for milestones.
    """
    orderBy: MilestoneOrder

    """
    Filters milestones with a query on the title
    """
    query: String

    """
    Filter by the state of the milestones.
    """
    states: [MilestoneState!]
  ): MilestoneConnection

  """
  The repository's original mirror URL.
  """
  mirrorUrl: URI

  """
  The name of the repository.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!

  """
  The repository network.
  """
  network: RepositoryNetwork @internal

  """
  Returns how many repositories there are in this network.
  """
  networkCount: Int! @internal

  """
  Whether or not this repository's network is present on disk.
  """
  networkPresent: Boolean! @internal

  """
  The HTTP path listing the repository's network
  """
  networkResourcePath: URI! @underDevelopment(since: "2018-10-02")

  """
  The HTTP URL listing the repository's network
  """
  networkUrl: URI! @underDevelopment(since: "2018-10-02")

  """
  The HTTP path to create new projects
  """
  newProjectResourcePath: URI! @internal

  """
  The HTTP URL to create new projects
  """
  newProjectUrl: URI! @internal

  """
  Returns whether or not a repository has been de-indexed by Google
  """
  noIndex: Boolean! @internal

  """
  A Git object in the repository
  """
  object(
    """
    A Git revision expression suitable for rev-parse
    """
    expression: String

    """
    The Git object ID
    """
    oid: GitObjectID
  ): GitObject

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImage: RepositoryImage @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImageUrl: URI!

  """
  if repo is owned by org, does it allow members to create pages
  """
  orgMembersCanCreatePages: Boolean! @internal

  """
  The organization this repository belongs to.
  """
  organization: Organization @underDevelopment(since: "2018-07-18")

  """
  The database id of the organization this repository belongs to.
  """
  organizationDatabaseId: Int @internal

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  A single package belonging to the owner.
  """
  package(
    """
    The global ID of the package.
    """
    id: ID!
  ): Package @internal

  """
  A single package version belonging to the owner.
  """
  packageVersion(
    """
    The global ID of the package version.
    """
    id: ID!
  ): PackageVersion @internal

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter registry package by whether it has been deleted
    """
    includeDeleted: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find a package by name.
    """
    name: String @internal

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Filter packages by whether it is publicly visible
    """
    publicOnly: Boolean = false @internal

    """
    Filter registry package by type (string).
    """
    registryPackageType: String @internal

    """
    Find packages in a repository by the repository's database ID.
    """
    repositoryDatabaseId: Int @internal

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID

    """
    Find packages in a repository by the repository's nameWithOwner.
    """
    repositoryNameWithOwner: String @internal
  ): PackageConnection!

  """
  A list of packages for a particular search query.
  """
  packagesForQuery(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter packages by type.
    """
    packageType: PackageType

    """
    Find packages by search query.
    """
    query: String
  ): PackageConnection! @internal

  """
  The GitHub Pages sites associated with this repository.
  """
  pageDeployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PageDeploymentConnection! @internal

  """
  source for a Repository's page
  """
  pageSource: String @internal

  """
  source directory for a Repository's page
  """
  pageSourceDirectory: String @internal

  """
  The repository parent, if this is a fork.
  """
  parent: Repository

  """
  The HTTP path to get a participation graph
  """
  participationGraphResourcePath: URI! @internal

  """
  The HTTP URL to get a participation graph
  """
  participationGraphUrl: URI! @internal

  """
  The permalink for this repository
  """
  permalink(
    """
    Whether or not to include the hostname or only the path information
    """
    includeHost: Boolean
  ): URI! @internal

  """
  A list of discussions that have been pinned in this repository.
  """
  pinnedDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PinnedDiscussionConnection!

  """
  A list of pinned issues for this repository.
  """
  pinnedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PinnedIssueConnection

  """
  Returns the limit for the repository's billing plan.
  """
  planLimit(
    """
    The limit for the plan feature
    """
    feature: PlanFeatureLimit!
  ): Int!

  """
  Returns whether or not a repository's plan supports a feature.
  """
  planSupports(
    """
    The plan feature to check
    """
    feature: PlanFeature!
  ): Boolean!

  """
  The primary language of the repository's code.
  """
  primaryLanguage: Language

  """
  The GitHub Pages site associated with the primary Pages source branch.
  """
  primaryPageDeployment: PageDeployment @internal

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to only include public projects.
    """
    includePrivate: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  Returns a single pull request from the current repository by number.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  Returns a list of pull request templates associated to the repository
  """
  pullRequestTemplates: [PullRequestTemplate!]

  """
  A list of pull requests that have been opened in the repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for pull requests returned by the connection. Specifying
    this argument will nullify the effects of the other filtering arguments on
    this connection.
    """
    filterBy: PullRequestFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  The repository readme.
  """
  readme(
    """
    The ref name used to return the associated readme.
    """
    refName: String
  ): RepositoryReadme

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  Fetch a given ref from the repository
  """
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Ref

  """
  Fetch a list of refs from the repository
  """
  refs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    DEPRECATED: use orderBy. The ordering direction.
    """
    direction: OrderDirection

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for refs returned from the connection.
    """
    orderBy: RefOrder

    """
    Filters refs with query on name
    """
    query: String

    """
    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    """
    refPrefix: String!
  ): RefConnection @serviceMapping(to: "github/ref")

  """
  Lookup a single release given various criteria.
  """
  release(
    """
    The name of the Tag the Release was created from
    """
    tagName: String!
  ): Release

  """
  List of releases which are dependent on this repository.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """
  The HTTP path listing releases for this repository
  """
  releasesResourcePath: URI! @underDevelopment(since: "2018-11-28")

  """
  The HTTP URL listing releases for this repository
  """
  releasesUrl: URI! @underDevelopment(since: "2018-11-28")

  """
  The name of the octicon to use for this repository
  """
  repoTypeIcon: String! @internal

  """
  A list of applied repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): RepositoryTopicConnection!

  """
  Returns whether or not a repository requires a login to view content
  """
  requireLogin: Boolean! @internal

  """
  Returns whether or not a repository requires an opt-in to view content
  """
  requireOptIn: Boolean! @internal

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not this repository has continuous integration setup and should upsell ci.
  """
  shouldUpsellCi: Boolean!

  """
  Whether this repository should use the enhanced open graph image URL
  """
  showEnhancedOgImage: Boolean! @internal

  """
  A list of issues similar to a given query in the context of the repository.
  """
  similarIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The query to find similar issues.
    """
    query: String!
  ): IssueConnection! @underDevelopment(since: "2019-04-18")

  """
  The keyword used to create a sparkle
  """
  sparkleKeyword: String! @internal

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  Fields that are only visible to site admins.
  """
  stafftoolsInfo: RepositoryStafftoolsInfo

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  The HTTP path listing users who have starred the repository
  """
  stargazersResourcePath: URI! @underDevelopment(since: "2018-10-02")

  """
  The HTTP URL listing users who have starred the repository
  """
  stargazersUrl: URI! @underDevelopment(since: "2018-10-02")

  """
  Returns a list of all submodules in this repository parsed from the
  .gitmodules file as of the default branch's HEAD commit.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  A list of machine learning-suggested topic names for this repository.
  """
  suggestedTopicNames(
    """
    Returns the first _n_ names from the topic suggestions.
    """
    first: Int
  ): [String]! @internal

  """
  The SVN path to clone this repository
  """
  svnResourcePath: URI! @internal

  """
  The SVN URL to clone this repository
  """
  svnUrl: URI! @internal

  """
  Temporary authentication token for cloning this repository.
  """
  tempCloneToken: String

  """
  The repository from which this repository was generated, if any.
  """
  templateRepository: Repository

  """
  Users who have made the most commits to this repository
  """
  topContributors(
    """
    How many contributors to return.
    """
    limit: Int = 5
  ): [User!]! @underDevelopment(since: "2018-10-11")

  """
  Returns a Boolean indicating whether machine learning-suggested topics are supported for this repository.
  """
  topicSuggestionsEnabled: Boolean! @internal

  """
  2FA requirement met by viewing user
  """
  twoFactorRequirementMetBy: Boolean! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this repository
  """
  url: URI!

  """
  Is the Used By button displayed on the repository
  """
  usedByEnabled: Boolean @internal

  """
  Dependency Graph Package ID specified by user for display in Used By button
  """
  usedByPackageId: String @internal

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!

  """
  Indicates whether the current user has been blocked by the repository owner.
  """
  viewerBlockedByOwner: Boolean! @internal

  """
  Indicates whether the viewer has admin permissions on this repository.
  """
  viewerCanAdminister: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Indicates whether the current user can interact according to repository interaction limits.
  """
  viewerCanInteract: Boolean! @underDevelopment(since: "2018-10-02")

  """
  If the viewer has permissions to manage deploy keys for this repository
  """
  viewerCanManageDeployKeys: Boolean! @underDevelopment(since: "2020-04-13")

  """
  If the viewer has permissions to manage webhooks on this repository
  """
  viewerCanManageWebhooks: Boolean! @underDevelopment(since: "2020-04-02")

  """
  Indicates whether the current user has push permissions on this repository.
  """
  viewerCanPush: Boolean! @underDevelopment(since: "2018-10-02")

  """
  Can the viewer see comment author's full name
  """
  viewerCanSeeCommenterFullName: Boolean! @underDevelopment(since: "2019-04-23")

  """
  If the viewer has permissions to set interaction limits on this repository
  """
  viewerCanSetInteractionLimits: Boolean! @underDevelopment(since: "2019-06-17")

  """
  If the viewer has permissions to set the Social preview
  """
  viewerCanSetSocialPreview: Boolean! @internal

  """
  Returns a boolean indicating whether the viewing user has the ability to star this starrable.
  """
  viewerCanStar: Boolean! @underDevelopment(since: "2020-05-18")

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  If the viewer has permissions to toggle the merge settings
  """
  viewerCanToggleMergeTypes: Boolean! @internal

  """
  If the viewer has permissions to toggle the page settings
  """
  viewerCanTogglePageSettings: Boolean! @internal

  """
  If the viewer has permissions to toggle the Projects feature on this repository
  """
  viewerCanToggleProjects: Boolean! @underDevelopment(since: "2019-05-08")

  """
  If the viewer has permissions to toggle the wiki
  """
  viewerCanToggleWiki: Boolean! @underDevelopment(since: "2019-05-08")

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Indicates whether the viewer can update the topics of this repository.
  """
  viewerCanUpdateTopics: Boolean!

  """
  The last commit email for the viewer.
  """
  viewerDefaultCommitEmail: String

  """
  The last used merge method by the viewer or the default for the repository.
  """
  viewerDefaultMergeMethod: PullRequestMergeMethod!

  """
  Has the viewer blocked any contributors in this repository?
  """
  viewerHasBlockedContributors: Boolean!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!

  """
  Returns whether or not the current viewer is the repository's billing plan owner.
  """
  viewerIsPlanOwner: Boolean! @internal

  """
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  """
  viewerPermission: RepositoryPermission

  """
  A list of emails this viewer can commit with.
  """
  viewerPossibleCommitEmails: [String!]

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  If custom subscription this is the types of subscriptions subscribed
  """
  viewerSubscriptionTypes: [CustomSubscriptionType!]

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility! @underDevelopment(since: "2019-04-18")

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryVulnerabilityAlertConnection

  """
  A list of users watching the repository.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
A action defined on a repository.
"""
type RepositoryAction implements Node @internal @serviceMapping(to: "github/actions") {
  """
  All runs of this action.
  """
  actionRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryActionRunConnection @internal

  """
  The directory containing the action.
  """
  basePath: String!

  """
  A collection of all Marketplace categories that describe this action.
  """
  categories: [MarketplaceCategory!]! @internal

  """
  The color to display with the action.
  """
  color: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The description of the action.
  """
  description: String

  """
  Is the action featured on the marketplace?
  """
  featured: Boolean!

  """
  A collection of filter-type Marketplace categories that describe this action.
  """
  filterCategories: [MarketplaceCategory!]! @internal

  """
  Is the owner of this Action verified?
  """
  hasVerifiedOwner: Boolean!

  """
  The color to display the action's icon.
  """
  iconColor: String

  """
  The name of the icon to display.
  """
  iconName: String
  id: ID!

  """
  Is the action listed on the Marketplace?
  """
  isListed: Boolean!

  """
  The latest published release of this action.
  """
  latestRelease(
    """
    Whether or not the latest release should be a published one.
    """
    published: Boolean = false
  ): Release

  """
  The name of the action.
  """
  name: String!

  """
  The path to where the action lives.
  """
  path: String!

  """
  Ranking of the Action. Higher places this Action higher on Marketplace and Workflow editor.
  """
  rankMultiplier: Float!

  """
  The HTML rendering of action repo's README.
  """
  readme(
    """
    The tag name of version of the README to get.
    """
    tagName: String = ""
  ): HTML

  """
  A collection of non-filter Marketplace categories that describe this action.
  """
  regularCategories: [MarketplaceCategory!]! @internal

  """
  Look up a release based on given criteria
  """
  release(
    """
    The tag name of the release
    """
    tagName: String!
  ): Release

  """
  List of releases for this action.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder

    """
    Whether or not the releases should be published ones
    """
    published: Boolean = false
  ): ReleaseConnection!

  """
  The repository that owns the action.
  """
  repository: Repository!

  """
  The HTTP path for the Marketplace listing.
  """
  resourcePath: URI!

  """
  Internal GitHub use only. Email contact for getting in touch with the Action's owner.
  """
  securityEmail: String @internal

  """
  The slug of the action. Only available if it's listed on the Marketplace.
  """
  slug: String

  """
  The HTTP URL for the Marketplace listing.
  """
  url: URI!

  """
  The path prefix for the 'uses' value to use the action.
  """
  usesPathPrefix: String!
}

"""
The connection type for RepositoryAction.
"""
type RepositoryActionConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [RepositoryActionEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryAction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryActionEdge @internal @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryAction
}

"""
The possible featured states of a repository action
"""
enum RepositoryActionFeaturedState @internal @serviceMapping(to: "github/actions") {
  """
  A featured repository action.
  """
  FEATURED

  """
  An unfeatured repository action.
  """
  UNFEATURED
}

"""
Filtering options for repository action connections.
"""
input RepositoryActionFilters @internal @serviceMapping(to: "github/actions") {
  """
  The slug of the Marketplace category to match.
  """
  category: String

  """
  Select actions based on whether they are featured or not.
  """
  featured: RepositoryActionFeaturedState

  """
  The name of the repository action to match.
  """
  name: String

  """
  Select repository actions based on the name of their owner.
  """
  owner: String

  """
  Select actions based on their state.
  """
  state: RepositoryActionState
}

"""
Ordering options for repository action connections.
"""
input RepositoryActionOrder @internal @serviceMapping(to: "github/actions") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order topics by.
  """
  field: RepositoryActionOrderField!
}

"""
Properties by which repository action connections can be ordered.
"""
enum RepositoryActionOrderField @internal @serviceMapping(to: "github/actions") {
  """
  Order actions by creation time
  """
  CREATED_AT

  """
  Order actions by name
  """
  NAME

  """
  Order actions by rank
  """
  RANK

  """
  Order actions by update time
  """
  UPDATED_AT
}

"""
A RepositoryAction run.
"""
type RepositoryActionRun @internal @serviceMapping(to: "github/actions") {
  """
  The action that was executed.
  """
  action: RepositoryAction @internal

  """
  Identifies the date and time when the action run was completed.
  """
  completedAt: DateTime

  """
  The conclusion of the action run.
  """
  conclusion: CheckConclusionState

  """
  The URL from which to find full details of the action run on the integrator's site.
  """
  detailsUrl: URI

  """
  The time it took to run the action (in seconds).
  """
  duration: Int! @internal

  """
  The name of the check for this action run.
  """
  name: String!

  """
  The permalink to the action run summary.
  """
  permalink: URI!

  """
  The repository associated with this action run.
  """
  repository: Repository!

  """
  Identifies the date and time when the action run was started.
  """
  startedAt: DateTime

  """
  The current status of the action run.
  """
  status: CheckStatusState!

  """
  A string representing the action run's summary
  """
  summary: String

  """
  A string representing the action run's text
  """
  text: String

  """
  A string representing the action run
  """
  title: String
}

"""
The connection type for RepositoryActionRun.
"""
type RepositoryActionRunConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [RepositoryActionRunEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryActionRun]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryActionRunEdge @internal @serviceMapping(to: "github/actions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryActionRun
}

"""
The possible states of a repository action
"""
enum RepositoryActionState @internal @serviceMapping(to: "github/actions") {
  """
  An action that was delisted from the Marketplace.
  """
  DELISTED

  """
  An action listed in the Marketplace.
  """
  LISTED

  """
  An action that has not been listed in the Marketplace.
  """
  UNLISTED
}

"""
The connection type for RepositoryAction.
"""
type RepositoryActionsConnection @internal @serviceMapping(to: "github/actions") {
  """
  A list of edges.
  """
  edges: [RepositoryActionEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryAction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Repository information only visible to members
"""
type RepositoryAdminInfo @internal {
  """
  A list of collaborators affiliated with the repository.
  """
  collaborators(
    """
    Filtering option for collaborators by affiliation.
    """
    affiliations: [RepositoryCollaboratorAffiliation!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
A maintainer advisory for dependents of a repository
"""
type RepositoryAdvisory implements Comment & MayBeInternal & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/repo_advisories") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  The advisory discussion comments
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryAdvisoryCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A plaintext description of the advisory
  """
  description: String!

  """
  The actor who edited the comment.
  """
  editor: Actor

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Check if this comment is internal.
  """
  isInternal: Boolean! @internal

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2019-05-14")

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The path for this advisory
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2019-05-14")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The current state of the advisory
  """
  state: RepositoryAdvisoryState! @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  The plaintext title of the advisory
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL for this advisory
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
A comment on a repository security advisory
"""
type RepositoryAdvisoryComment implements Comment & Deletable & MayBeInternal & Node & Reactable & RepositoryNode & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/repo_advisories")
  @useNextGlobalIdFormat(after: "2021-03-18") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the subject of the comment.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The comment body hash.
  """
  bodyVersion: String! @internal

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Check if this comment is internal.
  """
  isInternal: Boolean! @internal

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2019-04-12")

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2019-04-12")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The URL to this resource.
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for RepositoryAdvisoryComment.
"""
type RepositoryAdvisoryCommentConnection @serviceMapping(to: "github/repo_advisories") {
  """
  A list of edges.
  """
  edges: [RepositoryAdvisoryCommentEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryAdvisoryComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryAdvisoryCommentEdge @serviceMapping(to: "github/repo_advisories") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryAdvisoryComment
}

"""
The possible states of a maintainer advisory.
"""
enum RepositoryAdvisoryState @internal @serviceMapping(to: "github/repo_advisories") {
  """
  A maintainer advisory that has been closed.
  """
  CLOSED

  """
  A maintainer advisory that is still open.
  """
  OPEN

  """
  A maintainer advisory that has been published.
  """
  PUBLISHED
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  """
  Repositories that the user has been added to as a collaborator.
  """
  COLLABORATOR

  """
  Repositories that the user has access to through being a member of an
  organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER

  """
  Repositories that are owned by the authenticated user.
  """
  OWNER
}

"""
Metadata for an audit entry with action repo.*
"""
interface RepositoryAuditEntryData @serviceMapping(to: "github/audit_logs") {
  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI
}

"""
The affiliation type between collaborator and repository.
"""
enum RepositoryCollaboratorAffiliation {
  """
  All collaborators of the repository.
  """
  ALL

  """
  All outside collaborators of an organization-owned repository.
  """
  OUTSIDE
}

"""
The connection type for User.
"""
type RepositoryCollaboratorConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [RepositoryCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user who is a collaborator of a repository.
"""
type RepositoryCollaboratorEdge @serviceMapping(to: "github/shared") {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  The permission the user has on the repository.
  """
  permission: RepositoryPermission!

  """
  A list of sources for the user's access to the repository.
  """
  permissionSources: [PermissionSource!]
}

"""
A list of repositories owned by the subject.
"""
type RepositoryConnection @serviceMapping(to: "github/repo_info") {
  """
  A list of edges.
  """
  edges: [RepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in kilobytes of all repositories in the connection.
  """
  totalDiskUsage: Int!
}

"""
A repository contact link.
"""
type RepositoryContactLink @serviceMapping(to: "github/issues") {
  """
  The contact link purpose.
  """
  about: String!

  """
  The contact link name.
  """
  name: String!

  """
  The contact link URL.
  """
  url: URI!
}

"""
A repository with a count of all contributions made to it
"""
type RepositoryContributionCount @underDevelopment(since: "2018-11-29") @serviceMapping(to: "github/profiles") {
  """
  The count of the contributions to the repository
  """
  contributionCount: Int!

  """
  The associated repository.
  """
  repository: Repository!
}

"""
The connection type for RepositoryContributionCount.
"""
type RepositoryContributionCountConnection
  @underDevelopment(since: "2018-11-29")
  @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [RepositoryContributionCountEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryContributionCount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryContributionCountEdge @underDevelopment(since: "2018-11-29") @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryContributionCount
}

"""
The reason a repository is listed as 'contributed'.
"""
enum RepositoryContributionType {
  """
  Created a commit
  """
  COMMIT

  """
  Created an issue
  """
  ISSUE

  """
  Created a pull request
  """
  PULL_REQUEST

  """
  Reviewed a pull request
  """
  PULL_REQUEST_REVIEW

  """
  Created the repository
  """
  REPOSITORY
}

"""
The connection type for User.
"""
type RepositoryContributorConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [RepositoryContributorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of contributors to this repository.
  """
  totalCount: Int!
}

"""
A user who has contributed to a repository.
"""
type RepositoryContributorEdge @internal @serviceMapping(to: "github/profiles") {
  """
  The number of contributions the user has made in the repository.
  """
  contributionsCount: Int!

  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
A wrapper on Repository used for Dependabot Alerts notifications.
"""
type RepositoryDependabotAlertsThread implements Node & RepositoryNode @serviceMapping(to: "github/security_alerts") {
  id: ID!

  """
  The URL pointing to the repository's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
Represents an author of discussions in repositories.
"""
interface RepositoryDiscussionAuthor @serviceMapping(to: "github/discussions") {
  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionConnection!
}

"""
Represents an author of discussion comments in repositories.
"""
interface RepositoryDiscussionCommentAuthor @serviceMapping(to: "github/discussions") {
  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionCommentOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge @serviceMapping(to: "github/repo_info") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
An image for a repository.
"""
type RepositoryImage implements Node @underDevelopment(since: "2019-03-06") @serviceMapping(to: "github/repo_info") {
  """
  The content type of the image.
  """
  contentType: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The original file name that was uploaded.
  """
  name: String! @internal

  """
  The size of the image in bytes.
  """
  size: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who uploaded the image.
  """
  uploader: User! @internal

  """
  The URL to the image.
  """
  url: URI!
}

"""
A subset of repository info.
"""
interface RepositoryInfo @serviceMapping(to: "github/repo_info") {
  """
  Returns whether or not a repository is restricted to collaborators only
  """
  collaboratorsOnly: Boolean! @internal

  """
  The HTTP URL pointing to this repository's commits listing.
  """
  commitsResourcePath(
    """
    The login of a user by which to filter the repository's commits.
    """
    author: String
  ): URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The repository's default branch.
  """
  defaultBranch: String! @internal

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has anonymous Git read access feature enabled.
  """
  hasAnonymousAccessEnabled: Boolean! @internal

  """
  Indicates if the repository has downloads.
  """
  hasDownloads: Boolean! @internal

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has Pages configured.
  """
  hasPages: Boolean! @internal

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository has the report to maintainer feature enabled.
  """
  hasReportToMaintainerEnabled: Boolean! @underDevelopment(since: "2019-09-16")

  """
  Indicates if a repository has wiki editing restricted to pushers only.
  """
  hasRestrictedWikiEditing: Boolean! @underDevelopment(since: "2019-05-09")

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI

  """
  Indicates if anonymous git access is available for the repository
  """
  isAnonymousAccessAvailable: Boolean! @internal

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Returns whether or not a repository has been hidden from discovery pages
  """
  isHiddenFromDiscovery: Boolean! @internal

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  Indicates if the repositories plan owner is trade controls restricted, which makes this repo behave as archived
  """
  isTradeControlsReadOnly: Boolean! @internal

  """
  Contents of the license file in the repository
  """
  licenseContents: String

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  The repository's original mirror URL.
  """
  mirrorUrl: URI

  """
  The name of the repository.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!

  """
  Returns how many repositories there are in this network.
  """
  networkCount: Int! @internal

  """
  Returns whether or not a repository has been de-indexed by Google
  """
  noIndex: Boolean! @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImage: RepositoryImage @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImageUrl: URI!

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  The permalink for this repository
  """
  permalink(
    """
    Whether or not to include the hostname or only the path information
    """
    includeHost: Boolean
  ): URI! @internal

  """
  Identifies when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Returns whether or not a repository requires a login to view content
  """
  requireLogin: Boolean! @internal

  """
  Returns whether or not a repository requires an opt-in to view content
  """
  requireOptIn: Boolean! @internal

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether this repository should use the enhanced open graph image URL
  """
  showEnhancedOgImage: Boolean! @internal

  """
  2FA requirement met by viewing user
  """
  twoFactorRequirementMetBy: Boolean! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this repository
  """
  url: URI!

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility! @underDevelopment(since: "2019-04-18")
}

"""
Repository interaction limit that applies to this object.
"""
type RepositoryInteractionAbility @serviceMapping(to: "github/community_and_safety") {
  """
  The time the currently active limit expires.
  """
  expiresAt: DateTime

  """
  The current limit that is enabled on this object.
  """
  limit: RepositoryInteractionLimit!

  """
  The origin of the currently active interaction limit.
  """
  origin: RepositoryInteractionLimitOrigin!
}

"""
A repository interaction limit.
"""
enum RepositoryInteractionLimit @serviceMapping(to: "github/community_and_safety") {
  """
  Users that are not collaborators will not be able to interact with the repository.
  """
  COLLABORATORS_ONLY

  """
  Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
  """
  CONTRIBUTORS_ONLY

  """
  Users that have recently created their account will be unable to interact with the repository.
  """
  EXISTING_USERS

  """
  No interaction limits are enabled.
  """
  NO_LIMIT
}

"""
The length for a repository interaction limit to be enabled for.
"""
enum RepositoryInteractionLimitExpiry @serviceMapping(to: "github/community_and_safety") {
  """
  The interaction limit will expire after 1 day.
  """
  ONE_DAY

  """
  The interaction limit will expire after 1 month.
  """
  ONE_MONTH

  """
  The interaction limit will expire after 1 week.
  """
  ONE_WEEK

  """
  The interaction limit will expire after 6 months.
  """
  SIX_MONTHS

  """
  The interaction limit will expire after 3 days.
  """
  THREE_DAYS
}

"""
Indicates where an interaction limit is configured.
"""
enum RepositoryInteractionLimitOrigin @serviceMapping(to: "github/community_and_safety") {
  """
  A limit that is configured at the organization level.
  """
  ORGANIZATION

  """
  A limit that is configured at the repository level.
  """
  REPOSITORY

  """
  A limit that is configured at the user-wide level.
  """
  USER
}

"""
An invitation for a user to be added to a repository.
"""
type RepositoryInvitation implements Node
  @serviceMapping(to: "github/repo_invites")
  @useNextGlobalIdFormat(after: "2021-07-01") {
  """
  The email address that received the invitation.
  """
  email: String
  id: ID!

  """
  The user who received the invitation.
  """
  invitee: User

  """
  The user who created the invitation.
  """
  inviter: User!

  """
  The permalink for this repository invitation.
  """
  permalink: URI!

  """
  The permission granted on this repository by this invitation.
  """
  permission: RepositoryPermission!

  """
  The Repository the user is invited to.
  """
  repository: RepositoryInfo
}

"""
The connection type for RepositoryInvitation.
"""
type RepositoryInvitationConnection @serviceMapping(to: "github/repo_invites") {
  """
  A list of edges.
  """
  edges: [RepositoryInvitationEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryInvitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryInvitationEdge @serviceMapping(to: "github/repo_invites") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryInvitation
}

"""
Ordering options for repository invitation connections.
"""
input RepositoryInvitationOrder @serviceMapping(to: "github/repo_invites") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repository invitations by.
  """
  field: RepositoryInvitationOrderField!
}

"""
Properties by which repository invitation connections can be ordered.
"""
enum RepositoryInvitationOrderField @serviceMapping(to: "github/repo_invites") {
  """
  Order repository invitations by creation time
  """
  CREATED_AT

  """
  Order repository invitations by invitee login
  """
  INVITEE_LOGIN
    @deprecated(
      reason: "`INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC."
    )
}

"""
The possible reasons a given repository could be in a locked state.
"""
enum RepositoryLockReason {
  """
  The repository is locked due to a billing related reason.
  """
  BILLING

  """
  The repository is locked due to a migration.
  """
  MIGRATING

  """
  The repository is locked due to a move.
  """
  MOVING

  """
  The repository is locked due to a rename.
  """
  RENAME
}

"""
An Octoshift repository migration.
"""
type RepositoryMigration implements Migration & Node @serviceMapping(to: "github/octoshift") {
  """
  The Octoshift migration flag to continue on error.
  """
  continueOnError: Boolean!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The reason the migration failed.
  """
  failureReason: String
  id: ID!

  """
  The Octoshift migration source.
  """
  migrationSource: MigrationSource!

  """
  The Octoshift migration source URL.
  """
  sourceUrl: URI!

  """
  The Octoshift migration state.
  """
  state: MigrationState!
}

"""
The connection type for RepositoryMigration.
"""
type RepositoryMigrationConnection @serviceMapping(to: "github/octoshift") {
  """
  A list of edges.
  """
  edges: [RepositoryMigrationEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryMigration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a repository migration.
"""
type RepositoryMigrationEdge @serviceMapping(to: "github/octoshift") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryMigration
}

"""
Ordering options for repository migrations.
"""
input RepositoryMigrationOrder @serviceMapping(to: "github/octoshift") {
  """
  The ordering direction.
  """
  direction: RepositoryMigrationOrderDirection!

  """
  The field to order repository migrations by.
  """
  field: RepositoryMigrationOrderField!
}

"""
Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
"""
enum RepositoryMigrationOrderDirection @serviceMapping(to: "github/octoshift") {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC

  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
Properties by which repository migrations can be ordered.
"""
enum RepositoryMigrationOrderField @serviceMapping(to: "github/octoshift") {
  """
  Order mannequins why when they were created.
  """
  CREATED_AT
}

"""
A repository network.
"""
type RepositoryNetwork @internal {
  """
  A list of repositories in the network.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection! @serviceMapping(to: "github/repo_info")

  """
  The root repository of the network.
  """
  root: Repository
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  """
  The repository associated with this node.
  """
  repository: Repository!
}

"""
Ordering options for repository connections
"""
input RepositoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repositories by.
  """
  field: RepositoryOrderField!
}

"""
Properties by which repository connections can be ordered.
"""
enum RepositoryOrderField {
  """
  Order repositories by creation time
  """
  CREATED_AT

  """
  Order repositories by name
  """
  NAME

  """
  Order repositories by push time
  """
  PUSHED_AT

  """
  Order repositories by number of stargazers
  """
  STARGAZERS

  """
  Order repositories by update time
  """
  UPDATED_AT
}

"""
Represents an owner of a Repository.
"""
interface RepositoryOwner {
  """
  The image used to represent this repository in Open Graph data.
  """
  actionsStatus: ActionsStatus @internal

  """
  A URL pointing to the owner's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  For repositories owned by this user/organization, finds the repositories they depend on.
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Whether only this user/organization's public repositories should be considered when looking for dependencies.
    """
    onlyOwnedPublicRepos: Boolean = false

    """
    Whether only dependencies that are public repositories should be returned.
    """
    onlyPublicDependencies: Boolean = false

    """
    Filter dependencies by the package manager they use.
    """
    packageManager: SecurityAdvisoryEcosystem

    """
    How to order the dependencies.
    """
    sortBy: RepositoryOwnerDependenciesOrderField = PACKAGE_NAME

    """
    Whether only repositories whose owner has a GitHub Sponsors listing should be returned.
    """
    sponsorableOnly: Boolean = false
  ): RepositoryConnection! @underDevelopment(since: "2020-11-18")
  id: ID!

  """
  Owner's eligibility to use Actions
  """
  isActionsEligible: Boolean! @internal

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Whether or not the user is spammy.
  """
  isSpammy: Boolean! @internal

  """
  Returns whether or not the given amount of bytes would go over storage limits
  """
  isStorageAllowed(
    """
    Is storage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  Returns whether or not an action can be run at this time
  """
  isUsageAllowed(
    """
    Is usage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  The username used to login.
  """
  login: String!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection! @serviceMapping(to: "github/repo_info")

  """
  Get a list of this user or organization's repositories that use any of the specified dependencies.
  """
  repositoriesUsingDependencies(
    """
    Repository IDs for dependencies to look up.
    """
    dependencyIds: [ID!]!
  ): [RepositoriesUsingDependency!]! @underDevelopment(since: "2020-11-30")

  """
  Find Repository.
  """
  repository(
    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  The HTTP URL for the owner.
  """
  resourcePath: URI!

  """
  A list of retired namespaces for this owner
  """
  retiredNamespaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RetiredNamespaceConnection! @internal

  """
  A list of template repositories relevant to this user or organization.
  """
  templateRepositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2019-05-03")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2019-05-03")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2019-05-03")
  ): RepositoryConnection! @underDevelopment(since: "2019-05-03")

  """
  The HTTP URL for the owner.
  """
  url: URI!

  """
  Owner of repo is adminable by the viewer.
  """
  viewerCanAdminister: Boolean! @internal
}

"""
Properties by which the dependencies for a particular repository owner can be ordered.
"""
enum RepositoryOwnerDependenciesOrderField
  @underDevelopment(since: "2020-11-23")
  @serviceMapping(to: "github/repo_info") {
  """
  Sort by the dependency publish date, ascending.
  """
  LEAST_RECENTLY_PUBLISHED

  """
  Order the dependencies such that the most recently updated is last.
  """
  LEAST_RECENTLY_UPDATED

  """
  Sort by the dependency least used in the repository owner's repositories.
  """
  LEAST_USED

  """
  Sort by the dependency most used in the repository owner's repositories.
  """
  MOST_USED

  """
  Sort by the package manager (ecosystem) name, ascending.
  """
  PACKAGE_MANAGER

  """
  Sort by the dependency name, ascending.
  """
  PACKAGE_NAME

  """
  Sort by the dependency publish date, descending.
  """
  RECENTLY_PUBLISHED

  """
  Order the dependencies such that the most recently updated is first.
  """
  RECENTLY_UPDATED
}

"""
Ways in which lists of repository package releases can be ordered upon return.
"""
input RepositoryPackageReleaseOrder @internal {
  """
  The direction in which to order repository package releases by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order repository package releases by.
  """
  field: RepositoryPackageReleaseOrderField!
}

"""
Properties by which repository package releases can be ordered.
"""
enum RepositoryPackageReleaseOrderField @internal {
  """
  Order package releases by number of repositories that depend on it
  """
  DEPENDENTS

  """
  Order package releases by publish time
  """
  PUBLISHED_ON

  """
  Order package releases by recently updated
  """
  UPDATED_AT

  """
  Order package releases by number of vulnerabilities
  """
  VULNERABILITIES
}

"""
The access level to a repository
"""
enum RepositoryPermission {
  """
  Can read, clone, and push to this repository. Can also manage issues, pull
  requests, and repository settings, including adding collaborators
  """
  ADMIN

  """
  Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
  """
  MAINTAIN

  """
  Can read and clone this repository. Can also open and comment on issues and pull requests
  """
  READ

  """
  Can read and clone this repository. Can also manage issues and pull requests
  """
  TRIAGE

  """
  Can read, clone, and push to this repository. Can also manage issues and pull requests
  """
  WRITE
}

"""
The privacy of a repository
"""
enum RepositoryPrivacy {
  """
  Private
  """
  PRIVATE

  """
  Public
  """
  PUBLIC
}

"""
A readme in a repository.
"""
type RepositoryReadme @serviceMapping(to: "github/repo_info") {
  """
  The html content of the readme.
  """
  contentHTML(
    """
    Whether or not to append the root path to local paths
    """
    relativePaths: Boolean = false
  ): HTML

  """
  The raw content of the readme.
  """
  contentRaw: String

  """
  The TreeEntry file type object
  """
  fileType: File

  """
  The full path of the file.
  """
  path: String

  """
  The Repository the readme belongs to
  """
  repository: Repository!
}

"""
A recommendation for a repository that GitHub thinks will be interesting for a
particular user.
"""
type RepositoryRecommendation {
  """
  The recommendation ML model version
  """
  algorithmVersion: String

  """
  The date and time at which this recommendation was generated.
  """
  generatedAt: DateTime

  """
  The reason this repository was recommended.
  """
  reason: RepositoryRecommendationReason!

  """
  The recommended repository.
  """
  repository: Repository!

  """
  A value between [0, 1] that indicates the relevancy of the repository to the user for whom
  it was recommended.
  """
  score: Float!
}

"""
The connection type for RepositoryRecommendation.
"""
type RepositoryRecommendationConnection {
  """
  A list of edges.
  """
  edges: [RepositoryRecommendationEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryRecommendation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RepositoryRecommendationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryRecommendation
}

"""
The reason a particular repository was recommended to a user.
"""
enum RepositoryRecommendationReason {
  """
  The repository is similar to repositories the user has contributed to.
  """
  CONTRIBUTED

  """
  Someone the user follows starred the repository.
  """
  FOLLOWED

  """
  The repository was recommended for some other reason.
  """
  OTHER

  """
  The repository is popular on GitHub.
  """
  POPULAR

  """
  The repository is like other repositories the user has starred.
  """
  STARRED

  """
  The repository is part of a topic that the user is interested in.
  """
  TOPICS

  """
  The repository is currently trending on GitHub.
  """
  TRENDING

  """
  The repository is similar to other repositories the user has viewed.
  """
  VIEWED
}

"""
Repository information only visible to site admins
"""
type RepositoryStafftoolsInfo @internal @serviceMapping(to: "github/repo_info") {
  """
  Access to this repository has been disabled. ex. tos violation
  """
  accessDisabled: Boolean! @internal

  """
  Returns true if this repository is currently allowed to be recommended to users.
  """
  canBeRecommended: Boolean!

  """
  Does this repo have any workflows.
  """
  hasWorkflows: Boolean! @internal

  """
  The interaction ability settings for this repository.
  """
  interactionAbility: RepositoryInteractionAbility!

  """
  Returns true if the owner of this repository is hidden.
  """
  isOwnerHidden: Boolean!

  """
  The amount in bytes of LFS storage used by this repository's network.
  """
  networkLfsDiskUsage: Int!

  """
  The git tree object ID corresponding to the currently deployed pages branch.
  """
  pagesBranchTreeOid: GitObjectID

  """
  A list of all (applied and declined) repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  A complete list of machine learning-suggested topics (including flagged topics) for this repository.
  """
  suggestedTopics: [Topic]!
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable
  @serviceMapping(to: "github/topics")
  @useNextGlobalIdFormat(after: "2021-07-02") {
  id: ID!

  """
  The HTTP path for this repository-topic.
  """
  resourcePath: URI!

  """
  Fields that are only visible to site admins.
  """
  stafftoolsInfo: RepositoryTopicStafftoolsInfo

  """
  The topic.
  """
  topic: Topic!

  """
  The HTTP URL for this repository-topic.
  """
  url: URI!
}

"""
The connection type for RepositoryTopic.
"""
type RepositoryTopicConnection @serviceMapping(to: "github/topics") {
  """
  A list of edges.
  """
  edges: [RepositoryTopicEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryTopic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryTopicEdge @serviceMapping(to: "github/topics") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryTopic
}

"""
Repository topic information only visible to site admins
"""
type RepositoryTopicStafftoolsInfo @internal @serviceMapping(to: "github/topics") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Indicates whether the topic has been applied to the repository.
  """
  isApplied: Boolean!

  """
  Type of the association between the topic and the repository.
  """
  state: RepositoryTopicState! @internal
}

"""
Possible association types that can exist between a repository and a topic.
"""
enum RepositoryTopicState @internal @serviceMapping(to: "github/topics") {
  """
  A topic that was manually added by a user to a repository.
  """
  CREATED

  """
  A topic that was suggested via the Munger service and declined by the user as not being relevant to the repository.
  """
  DECLINED_NOT_RELEVANT

  """
  A topic that was suggested via the Munger service and declined by the user due to personal preference.
  """
  DECLINED_PERSONAL_PREFERENCE

  """
  A topic that was suggested via the Munger service and declined by the user due to it being too general.
  """
  DECLINED_TOO_GENERAL

  """
  A topic that was suggested via the Munger service and declined by the user due
  to it being too specific (e.g. #ruby-on-rails-version-4-2-1).
  """
  DECLINED_TOO_SPECIFIC

  """
  A topic that was suggested via the Munger service and accepted and applied by a user to a repository.
  """
  SUGGESTED
}

"""
The different types of repositories that exist.
"""
enum RepositoryType @underDevelopment(since: "2018-08-30") @serviceMapping(to: "github/repo_info") {
  """
  Repositories that are no longer actively maintained.
  """
  ARCHIVED

  """
  Repositories that are have been forked from other repositories.
  """
  FORK

  """
  Repositories that are copied onto GitHub from other sites.
  """
  MIRROR

  """
  Repositories that are restricted to only certain users.
  """
  PRIVATE

  """
  Repositories that are visible to everyone.
  """
  PUBLIC

  """
  Repositories that are neither forks nor mirrors.
  """
  SOURCE
}

"""
The repository's visibility level.
"""
enum RepositoryVisibility @serviceMapping(to: "github/repo_info") {
  """
  The repository is visible only to users in the same business.
  """
  INTERNAL

  """
  The repository is visible only to those with explicit access.
  """
  PRIVATE

  """
  The repository is visible to everyone.
  """
  PUBLIC
}

"""
Audit log entry for a repository_visibility_change.clear event.
"""
type RepositoryVisibilityChangeClearAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repository_visibility_change.disable event.
"""
type RepositoryVisibilityChangeDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a repository_visibility_change.enable event.
"""
type RepositoryVisibilityChangeEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The enterprise associated with the action.
  """
  enterprise: Enterprise @underDevelopment(since: "2019-07-16")

  """
  The database ID of the enterprise (Business model).
  """
  enterpriseDatabaseId: Int @internal

  """
  The name of the enterprise.
  """
  enterpriseName: String @internal

  """
  The HTTP path for this enterprise.
  """
  enterpriseResourcePath: URI

  """
  The slug of the enterprise.
  """
  enterpriseSlug: String

  """
  The HTTP URL for this enterprise.
  """
  enterpriseUrl: URI

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
A Dependabot alert for a repository with a dependency affected by a security vulnerability.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode
  @serviceMapping(to: "github/security_alerts")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  When was the alert created?
  """
  createdAt: DateTime!

  """
  The reason the alert was dismissed
  """
  dismissReason: String

  """
  When was the alert dismissed?
  """
  dismissedAt: DateTime

  """
  The user who dismissed the alert
  """
  dismisser: User
  id: ID!

  """
  When was the alert detected?
  """
  lastDetectedAt: DateTime @internal

  """
  The permalink for this alert.
  """
  permalink: URI!

  """
  The associated repository
  """
  repository: Repository!

  """
  The associated security advisory
  """
  securityAdvisory: SecurityAdvisory

  """
  The associated security vulnerability
  """
  securityVulnerability: SecurityVulnerability

  """
  Whether the alert is visible or not
  """
  showAlert: Boolean! @internal

  """
  The associated vulnerability
  """
  vulnerability: Vulnerability! @internal

  """
  The vulnerable manifest filename
  """
  vulnerableManifestFilename: String!

  """
  The vulnerable manifest path
  """
  vulnerableManifestPath: String!

  """
  The vulnerable requirements
  """
  vulnerableRequirements: String

  """
  The associated vulnerable version range
  """
  vulnerableVersionRange: VulnerableVersionRange! @internal
}

"""
The connection type for RepositoryVulnerabilityAlert.
"""
type RepositoryVulnerabilityAlertConnection @serviceMapping(to: "github/security_alerts") {
  """
  A list of edges.
  """
  edges: [RepositoryVulnerabilityAlertEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryVulnerabilityAlert]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryVulnerabilityAlertEdge @serviceMapping(to: "github/security_alerts") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryVulnerabilityAlert
}

"""
Autogenerated input type of RequestMarketplaceListingApproval
"""
input RequestMarketplaceListingApprovalInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Select the listing that matches this slug. It's the short name of the listing used in
  its URL.
  """
  slug: String!
}

"""
Autogenerated return type of RequestMarketplaceListingApproval
"""
type RequestMarketplaceListingApprovalPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of RequestReviews
"""
input RequestReviewsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request to modify.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  Whether or not the request is a re-request
  """
  reRequest: Boolean = false @internal

  """
  The Node IDs of the team to request.
  """
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])

  """
  Add users to the set rather than replace.
  """
  union: Boolean

  """
  The Node IDs of the user to request.
  """
  userIds: [ID!] @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of RequestReviews
"""
type RequestReviewsPayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pull request that is getting requests.
  """
  pullRequest: PullRequest

  """
  The edge from the pull request to the requested reviewers.
  """
  requestedReviewersEdge: UserEdge
}

"""
Autogenerated input type of RequestUnverifiedMarketplaceListingApproval
"""
input RequestUnverifiedMarketplaceListingApprovalInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Select the listing that matches this slug. It's the short name of the listing used in
  its URL.
  """
  slug: String!
}

"""
Autogenerated return type of RequestUnverifiedMarketplaceListingApproval
"""
type RequestUnverifiedMarketplaceListingApprovalPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of RequestVerifiedMarketplaceListingApproval
"""
input RequestVerifiedMarketplaceListingApprovalInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Select the listing that matches this slug. It's the short name of the listing used in
  its URL.
  """
  slug: String!
}

"""
Autogenerated return type of RequestVerifiedMarketplaceListingApproval
"""
type RequestVerifiedMarketplaceListingApprovalPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
The possible states that can be requested when creating a check run.
"""
enum RequestableCheckStatusState {
  """
  The check suite or run has been completed.
  """
  COMPLETED

  """
  The check suite or run is in progress.
  """
  IN_PROGRESS

  """
  The check suite or run is in pending state.
  """
  PENDING

  """
  The check suite or run has been queued.
  """
  QUEUED

  """
  The check suite or run is in waiting state.
  """
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Mannequin | Team | User

"""
An object who can execute GraphQL queries
"""
union Requester @serviceMapping(to: "github/graphql_api") = RequestingUser

"""
The currently authenticated user making the request.
"""
type RequestingUser @underDevelopment(since: "2018-06-25") @serviceMapping(to: "github/graphql_api") {
  """
  A list of GitHub Apps managed by this user.
  """
  adminableApps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters apps to exclude those that have a Marketplace listing. If omitted,
    integrations that are in the Marketplace will be included.
    """
    excludeMarketplaceListings: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters apps so only public apps are returned. If omitted or false, both
    public and internal apps will be returned.
    """
    publicOnly: Boolean
  ): AppConnection! @internal

  """
  The autocomplete results the users filter options
  """
  notificationFilterAutocompleteResults(
    """
    Max number of author suggestions to fetch.
    """
    authorSuggestionsLength: Int = 100

    """
    Max number of owner suggestions to fetch.
    """
    ownerSuggestionsLength: Int = 100
  ): NotificationFilterAutocompleteResult! @internal

  """
  A list of subscription lists.
  """
  notificationThreadSubscriptionLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List type to scope to
    """
    listType: NotificationThreadSubscriptionListType = REPOSITORY
  ): NotificationsListConnection! @underDevelopment(since: "2019-02-14")

  """
  A list of subscriptions to a thread (e.g. an Issue) that allow the user to receive notifications.
  """
  notificationThreadSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List id to filter notification subscriptions to
    """
    listId: ID

    """
    List type to scope to
    """
    listType: NotificationThreadSubscriptionListType = REPOSITORY

    """
    Ordering options for notification subscriptions.
    """
    orderBy: NotificationSubscriptionOrder = {field: ID, direction: DESC}

    """
    Reason for notification subscriptions.
    """
    reason: NotificationReason
  ): NotificationThreadSubscriptionConnection! @underDevelopment(since: "2019-02-05")

  """
  A list of unwatch suggestions
  """
  notificationUnwatchSuggestions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NotificationUnwatchSuggestionConnection! @internal @serviceMapping(to: "github/notifications")

  """
  Get the vulnerabilities for a package release
  """
  packageReleaseVulnerabilities(
    """
    Package version to scope to
    """
    containsVersion: String!

    """
    Package manager to scope to
    """
    packageManager: String!

    """
    Package name to scope to
    """
    packageName: String!
  ): [SecurityVulnerability] @underDevelopment(since: "2019-04-29")

  """
  The current user's billing plan.
  """
  plan: Plan

  """
  Get the license stats for all repository package release
  """
  repositoryPackageReleaseLicenses(
    """
    Match package name precisely
    """
    exactMatch: Boolean = false

    """
    Only include packages with active vulnerabilities
    """
    onlyVulnerablePackages: Boolean = false

    """
    Array of organization ids to filter package releases by
    """
    ownerIds: [Int!]!

    """
    Package manager to scope to
    """
    packageManager: String

    """
    Package name to scope to
    """
    packageName: String

    """
    Package version to scope to
    """
    packageVersion: String

    """
    Only include packages with vulnerabilities with this severity
    """
    severity: String
  ): [DependencyGraphRepositoryPackageReleaseLicense!] @underDevelopment(since: "2019-03-20")

  """
  Get the vulnerability stats for all repository package release
  """
  repositoryPackageReleaseVulnerabilities(
    """
    Match package name precisely
    """
    exactMatch: Boolean = false

    """
    Only include packages with these licenses
    """
    licenses: [String!]

    """
    Array of organization ids to filter package releases by
    """
    ownerIds: [Int!]!

    """
    Package manager to scope to
    """
    packageManager: String

    """
    Package name to scope to
    """
    packageName: String

    """
    Package version to scope to
    """
    packageVersion: String
  ): [DependencyGraphRepositoryPackageReleaseVulnerability!] @underDevelopment(since: "2019-03-20")

  """
  A list of packages utilized by an organization and count of how many repositories depend on those packages
  """
  repositoryPackageReleases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    String search to filter dependents by
    """
    dependentName: String

    """
    Returns the dependents that come after the specified cursor.
    """
    dependentsAfter: String

    """
    Returns the dependents that come before the specified cursor.
    """
    dependentsBefore: String

    """
    Returns the first _n_ dependents.
    """
    dependentsFirst: Int

    """
    Returns the last _n_ dependents.
    """
    dependentsLast: Int

    """
    Match package name precisely
    """
    exactMatch: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include the lower/upper version counts
    """
    includeDependentVersionCounts: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only include packages with these licenses
    """
    licenses: [String!]

    """
    Only include packages with active vulnerabilities
    """
    onlyVulnerablePackages: Boolean = false

    """
    Array of owner ids to find package releases by
    """
    ownerIds: [Int!]!

    """
    Package manager to scope to
    """
    packageManager: String

    """
    Package name to scope to
    """
    packageName: String

    """
    Package version to scope to
    """
    packageVersion: String

    """
    Only include packages with vulnerabilities with this severity
    """
    severity: String

    """
    How to sort returned packages
    """
    sortBy: RepositoryPackageReleaseOrder = {field: DEPENDENTS, direction: DESC}
  ): DependencyGraphPackageReleaseDependentConnection! @underDevelopment(since: "2019-03-01")

  """
  A list of the teams the current viewer belongs to across organizations.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from the connection
    """
    orderBy: TeamOrder
  ): TeamConnection! @internal

  """
  The underlying user object.
  """
  user: User
}

"""
Represents a type that can be required by a pull request for merging.
"""
interface RequirableByPullRequest @serviceMapping(to: "github/checks_api") {
  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!
}

"""
Represents an individual required status check for a protected branch.
"""
type RequiredStatusCheck implements Node @serviceMapping(to: "github/checks_api") {
  """
  The name of this status.
  """
  context: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The description for this status.
  """
  description: String
  id: ID!

  """
  The state of this status.
  """
  state: StatusState!
}

"""
The connection type for RequiredStatusCheck.
"""
type RequiredStatusCheckConnection @serviceMapping(to: "github/checks_api") {
  """
  A list of edges.
  """
  edges: [RequiredStatusCheckEdge]

  """
  A list of nodes.
  """
  nodes: [RequiredStatusCheck]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RequiredStatusCheckEdge @serviceMapping(to: "github/checks_api") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RequiredStatusCheck
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput @serviceMapping(to: "github/checks_api") {
  """
  The Node ID of the check suite.
  """
  checkSuiteId: ID! @possibleTypes(concreteTypes: ["CheckSuite"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of RerequestCheckSuite
"""
type RerequestCheckSuitePayload @serviceMapping(to: "github/checks_api") {
  """
  The requested check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ResequenceMarketplaceListingScreenshot
"""
input ResequenceMarketplaceListingScreenshotInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing screenshot ID to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingScreenshot"])

  """
  The ID of the screenshot that this screenshot should follow in sequence.
  """
  previousScreenshotId: ID!
}

"""
Autogenerated return type of ResequenceMarketplaceListingScreenshot
"""
type ResequenceMarketplaceListingScreenshotPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace listing screenshot.
  """
  marketplaceListingScreenshot: MarketplaceListingScreenshot
}

"""
Autogenerated input type of ResetPasswords
"""
input ResetPasswordsInput @internal @serviceMapping(to: "github/security_incident_response") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Notification email reply to address.
  """
  from: String!

  """
  Should a notification be sent for each password reset.
  """
  sendNotification: Boolean!

  """
  Optional staffnote text
  """
  staffnote: String

  """
  Notification email subject.
  """
  subject: String!

  """
  Mustache template for notification
  """
  template: String!

  """
  The user ids and optional notification data.
  """
  users: [SecurityIncidentUser!]!
}

"""
Autogenerated return type of ResetPasswords
"""
type ResetPasswordsPayload @internal @serviceMapping(to: "github/security_incident_response") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users that had their password reset.
  """
  users: [User!]
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to resolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of ResolveSecurityIncident
"""
input ResolveSecurityIncidentInput @internal @serviceMapping(to: "github/security_incident_response") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Optional ID to keep track of this response. If not specified one is generated.
  """
  incidentResponseId: String

  """
  The responses to take for this incident.
  """
  incidentResponses: [SecurityIncidentResponse!]!
}

"""
Autogenerated return type of ResolveSecurityIncident
"""
type ResolveSecurityIncidentPayload @internal @serviceMapping(to: "github/security_incident_response") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The unique ID that will tie this response to its log data.
  """
  incidentResponseId: ID
}

"""
Autogenerated input type of RestoreRepositoryRecommendation
"""
input RestoreRepositoryRecommendationInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of RestoreRepositoryRecommendation
"""
type RestoreRepositoryRecommendationPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The restored repository.
  """
  repository: Repository
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution @serviceMapping(to: "github/profiles") {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  """
  isRestricted: Boolean!

  """
  When this contribution was made.
  """
  occurredAt: DateTime!

  """
  The HTTP path for this contribution.
  """
  resourcePath: URI!

  """
  The HTTP URL for this contribution.
  """
  url: URI!

  """
  The user who made this contribution.
  """
  user: User!
}

"""
Autogenerated input type of RetireMarketplaceListingPlan
"""
input RetireMarketplaceListingPlanInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing plan ID to retire.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])
}

"""
Autogenerated return type of RetireMarketplaceListingPlan
"""
type RetireMarketplaceListingPlanPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The retired Marketplace listing plan.
  """
  marketplaceListingPlan: MarketplaceListingPlan
}

"""
Autogenerated input type of RetireNamespace
"""
input RetireNamespaceInput @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The retired repository name
  """
  name: String!

  """
  The owning user or organization's login
  """
  ownerLogin: String!
}

"""
Autogenerated return type of RetireNamespace
"""
type RetireNamespacePayload @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The retired namespace.
  """
  retiredNamespace: RetiredNamespace
}

"""
A namespace that is no longer available to new repositories
"""
type RetiredNamespace implements Node @internal @serviceMapping(to: "github/community_and_safety") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  The retired repository name
  """
  name: String!

  """
  The repository name with owner
  """
  nameWithOwner: String!

  """
  The owning user or organization. May be null if the account was removed.
  """
  owner: RepositoryOwner

  """
  The owning user or organization's login
  """
  ownerLogin: String!
}

"""
The connection type for RetiredNamespace.
"""
type RetiredNamespaceConnection @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A list of edges.
  """
  edges: [RetiredNamespaceEdge]

  """
  A list of nodes.
  """
  nodes: [RetiredNamespace]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RetiredNamespaceEdge @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RetiredNamespace
}

"""
A team or user who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """
  The actor that can dismiss.
  """
  actor: ReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user or team.
  """
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  """
  A list of edges.
  """
  edges: [ReviewDismissalAllowanceEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewDismissalAllowance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & PerformableViaApp & TimelineEvent & UniformResourceLocatable
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the commit which caused the review to become stale.
  """
  pullRequestCommit: PullRequestCommit

  """
  The HTTP path for this review dismissed event.
  """
  resourcePath: URI!

  """
  Identifies the review associated with the 'review_dismissed' event.
  """
  review: PullRequestReview

  """
  The HTTP URL for this review dismissed event.
  """
  url: URI!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node
  @serviceMapping(to: "github/pull_request_reviews")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Whether this request was created for a code owner
  """
  asCodeOwner: Boolean!

  """
  The original review request that assigned this review request, if present.
  """
  assignedFromReviewRequest: ReviewRequest @underDevelopment(since: "2021-03-18")

  """
  Identifies the code owner file causing the review request
  """
  codeOwnersFile: CommittishFile @internal

  """
  The HTTP URL to the codeowner file and line location.
  """
  codeOwnersResourcePath: URI @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  Identifies the pull request associated with this review request.
  """
  pullRequest: PullRequest!

  """
  The user who triggered this request for review.
  """
  requestedBy: User

  """
  The reviewer that is requested.
  """
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection @serviceMapping(to: "github/pull_request_reviews") {
  """
  A list of edges.
  """
  edges: [ReviewRequestEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge @serviceMapping(to: "github/pull_request_reviews") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_request_reviews")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the name of the team whose review was requested.
  """
  requestedReviewTeamName: String @internal

  """
  Identifies the reviewer whose review request was removed.
  """
  requestedReviewer: RequestedReviewer

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_request_reviews")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  PullRequest referenced by event.
  """
  pullRequest: PullRequest!

  """
  Identifies the name of the team whose review was requested before being assigned to a user.
  """
  requestedReviewAssignedFromTeamName: String @internal

  """
  Identifies the name of the team whose review was requested.
  """
  requestedReviewTeamName: String @internal

  """
  Identifies the reviewer whose review was requested.
  """
  requestedReviewer: RequestedReviewer

  """
  Identifies the review request associated to this event.
  """
  reviewRequest: ReviewRequest @internal

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext @serviceMapping(to: "github/hovercards") {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  The current status of the pull request with respect to code review.
  """
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput @serviceMapping(to: "github/octoshift") {
  """
  The user login or Team slug to revoke the migrator role from.
  """
  actor: String!

  """
  Specifies the type of the actor, can be either USER or TEAM.
  """
  actorType: ActorType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization that the user/team belongs to.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload @serviceMapping(to: "github/octoshift") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean
}

"""
Autogenerated input type of RunPendingMarketplaceChange
"""
input RunPendingMarketplaceChangeInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the pending marketplace change you wish to apply.
  """
  id: ID!
}

"""
Autogenerated return type of RunPendingMarketplaceChange
"""
type RunPendingMarketplaceChangePayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending change for the marketplace purchase.
  """
  pendingMarketplaceChange: PendingMarketplaceChange
}

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm @serviceMapping(to: "github/external_auth") {
  """
  SHA1
  """
  SHA1

  """
  SHA256
  """
  SHA256

  """
  SHA384
  """
  SHA384

  """
  SHA512
  """
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm @serviceMapping(to: "github/external_auth") {
  """
  RSA-SHA1
  """
  RSA_SHA1

  """
  RSA-SHA256
  """
  RSA_SHA256

  """
  RSA-SHA384
  """
  RSA_SHA384

  """
  RSA-SHA512
  """
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node @serviceMapping(to: "github/profiles") @useNextGlobalIdFormat(after: "2021-06-24") {
  """
  The body of the saved reply.
  """
  body: String!

  """
  The saved reply body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The title of the saved reply.
  """
  title: String!

  """
  The user that saved this reply.
  """
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder @serviceMapping(to: "github/profiles") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order saved replies by.
  """
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField @serviceMapping(to: "github/profiles") {
  """
  Order saved reply by when they were updated.
  """
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem =
    App
  | Discussion
  | Issue
  | MarketplaceListing
  | Organization
  | PullRequest
  | Repository
  | RepositoryAction
  | User

"""
A list of results that matched against a search query.
"""
type SearchResultItemConnection {
  """
  The number of pieces of code that matched the search query.
  """
  codeCount: Int!

  """
  The number of discussions that matched the search query.
  """
  discussionCount: Int!

  """
  A list of edges.
  """
  edges: [SearchResultItemEdge]

  """
  The number of issues that matched the search query.
  """
  issueCount: Int!

  """
  The programming languages represented in the search results.
  """
  languageAggregates: [LanguageAggregate!]! @internal

  """
  The number of GitHub Marketplace or Works with GitHub listings that matched.
  """
  marketplaceCount: Int! @internal

  """
  A list of nodes.
  """
  nodes: [SearchResultItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The number of repositories that matched the search query.
  """
  repositoryCount: Int!

  """
  The number of users that matched the search query.
  """
  userCount: Int!

  """
  The number of wiki pages that matched the search query.
  """
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SearchResultItem

  """
  Text matches on the result found.
  """
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  """
  Returns matching discussions in repositories.
  """
  DISCUSSION

  """
  Returns results matching issues in repositories.
  """
  ISSUE

  """
  Returns results matching repositories.
  """
  REPOSITORY

  """
  Returns results matching users and organizations on GitHub.
  """
  USER

  """
  Returns results matching users and organizations on GitHub. Faster then a
  normal search but only searches the `name` and `login` field.
  """
  USER_LOGIN @internal
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node @serviceMapping(to: "github/advisory_database") {
  """
  Credits associated with this Advisory
  """
  credits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned credits.
    """
    orderBy: AdvisoryCreditOrder = {field: ID}
  ): AdvisoryCreditConnection! @serviceMapping(to: "github/repo_advisories")

  """
  The CVSS associated with this advisory
  """
  cvss: CVSS!

  """
  CWEs associated with this Advisory
  """
  cwes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CWEConnection!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  This is a long plaintext description of the advisory
  """
  description: String!

  """
  The GitHub Security Advisory ID
  """
  ghsaId: String!
  id: ID!

  """
  A list of identifiers for this advisory
  """
  identifiers: [SecurityAdvisoryIdentifier!]!

  """
  The permalink for the advisory's dependabot alerts page
  """
  notificationsPermalink: URI

  """
  The organization that originated the advisory
  """
  origin: String!

  """
  The permalink for the advisory
  """
  permalink: URI

  """
  When the advisory was published
  """
  publishedAt: DateTime!

  """
  A list of references for this advisory
  """
  references: [SecurityAdvisoryReference!]!

  """
  The severity of the advisory
  """
  severity: SecurityAdvisorySeverity!

  """
  A short plaintext summary of the advisory
  """
  summary: String!

  """
  When the advisory was last updated
  """
  updatedAt: DateTime!

  """
  Vulnerabilities associated with this Advisory
  """
  vulnerabilities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    An ecosystem to filter vulnerabilities by.
    """
    ecosystem: SecurityAdvisoryEcosystem

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned topics.
    """
    orderBy: SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """
    A package name to filter vulnerabilities by.
    """
    package: String

    """
    A list of severities to filter vulnerabilities by.
    """
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!

  """
  When the advisory was withdrawn, if it has been withdrawn
  """
  withdrawnAt: DateTime
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection @serviceMapping(to: "github/advisory_database") {
  """
  A list of edges.
  """
  edges: [SecurityAdvisoryEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityAdvisory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem @serviceMapping(to: "github/advisory_database") {
  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge @serviceMapping(to: "github/advisory_database") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier @serviceMapping(to: "github/advisory_database") {
  """
  The identifier type, e.g. GHSA, CVE
  """
  type: String!

  """
  The identifier
  """
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter @serviceMapping(to: "github/advisory_database") {
  """
  The identifier type.
  """
  type: SecurityAdvisoryIdentifierType!

  """
  The identifier string. Supports exact or partial matching.
  """
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType @serviceMapping(to: "github/advisory_database") {
  """
  Common Vulnerabilities and Exposures Identifier.
  """
  CVE

  """
  GitHub Security Advisory ID.
  """
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder @serviceMapping(to: "github/advisory_database") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security advisories by.
  """
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField @serviceMapping(to: "github/advisory_database") {
  """
  Order advisories by publication time
  """
  PUBLISHED_AT

  """
  Order advisories by update time
  """
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage @serviceMapping(to: "github/advisory_database") {
  """
  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  """
  ecosystem: SecurityAdvisoryEcosystem!

  """
  The package name
  """
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion @serviceMapping(to: "github/advisory_database") {
  """
  The package name or version
  """
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference @serviceMapping(to: "github/advisory_database") {
  """
  A publicly accessible reference
  """
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity @serviceMapping(to: "github/advisory_database") {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
Fields for sending a security incident notification.
"""
input SecurityIncidentNotification @internal @serviceMapping(to: "github/security_incident_response") {
  """
  Notification email reply to address.
  """
  from: String!

  """
  Notification email subject.
  """
  subject: String!

  """
  Mustache template for notification
  """
  template: String!

  """
  Incident notification data key/value pairs for mustache template.
  """
  templateData: [SecurityIncidentNotificationData!]
}

"""
Extra data for security incident notification.
"""
input SecurityIncidentNotificationData @internal @serviceMapping(to: "github/security_incident_response") {
  """
  Data name.
  """
  key: String!

  """
  Data value.
  """
  value: String!
}

"""
Specifies a user and optional extra data for incident remediations. See argument list for possible remediations.
"""
input SecurityIncidentResponse @internal @serviceMapping(to: "github/security_incident_response") {
  """
  Fields for sending a notification. Excluding this means no notifications are sent.
  """
  notify: SecurityIncidentNotification

  """
  A list of Repository database IDs to opt out of being recommended to other users.
  """
  removeRepositoryRecommendations: [Int!]

  """
  A list of Repository database IDs to remove this user's stars from.
  """
  removeRepositoryStars: [Int!]

  """
  Reset this user's password?
  """
  resetPassword: Boolean = false

  """
  A list of OAuth Application database IDs to revoke authorizations for
  """
  revokeOauthAuthorizations: [Int!]

  """
  A list of OAuth Access/Personal Access Token database IDs to revoke
  """
  revokeOauthTokens: [Int!]

  """
  Optional staffnote text
  """
  staffnote: String

  """
  Suspend this user with this argument as the reason.
  """
  suspend: String

  """
  Global Relay ID of a User account.
  """
  userId: ID

  """
  Database ID and notification template data for Users.
  """
  users: [SecurityIncidentUser!]
}

"""
Specifies a user and optional extra data for incident notification.
"""
input SecurityIncidentUser @internal @serviceMapping(to: "github/security_incident_response") {
  """
  Incident notification data key/value pairs for mustache template.
  """
  data: [SecurityIncidentNotificationData!]

  """
  ID of a User account.
  """
  id: ID!
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability @serviceMapping(to: "github/advisory_database") {
  """
  The Advisory associated with this Vulnerability
  """
  advisory: SecurityAdvisory!

  """
  The first version containing a fix for the vulnerability
  """
  firstPatchedVersion: SecurityAdvisoryPackageVersion

  """
  A description of the vulnerable package
  """
  package: SecurityAdvisoryPackage!

  """
  The severity of the vulnerability within this package
  """
  severity: SecurityAdvisorySeverity!

  """
  When the vulnerability was last updated
  """
  updatedAt: DateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  """
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection @serviceMapping(to: "github/advisory_database") {
  """
  A list of edges.
  """
  edges: [SecurityVulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [SecurityVulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge @serviceMapping(to: "github/advisory_database") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder @serviceMapping(to: "github/advisory_database") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order security vulnerabilities by.
  """
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField @serviceMapping(to: "github/advisory_database") {
  """
  Order vulnerability by update time
  """
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: SamlDigestAlgorithm!

  """
  The ID of the enterprise on which to set an identity provider.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The Issuer Entity ID for the SAML identity provider
  """
  issuer: String

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: SamlSignatureAlgorithm!

  """
  The URL endpoint for the identity provider's SAML SSO.
  """
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetEnterpriseUserProvisioningSettings
"""
input SetEnterpriseUserProvisioningSettingsInput
  @underDevelopment(since: "2019-12-13")
  @serviceMapping(to: "github/external_identities") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to update user provisioning settings.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Enable automatic user provisioning for the enterprise?
  """
  provisioningEnabled: Boolean!

  """
  Enable automatic SAML user deprovisioning for the enterprise?
  """
  samlDeprovisioningEnabled: Boolean!
}

"""
Autogenerated return type of SetEnterpriseUserProvisioningSettings
"""
type SetEnterpriseUserProvisioningSettingsPayload
  @underDevelopment(since: "2019-12-13")
  @serviceMapping(to: "github/external_identities") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The identity provider for the enterprise.
  """
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetHasUsedAnonymizingProxy
"""
input SetHasUsedAnonymizingProxyInput @internal @serviceMapping(to: "github/account_classification") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The global relay id of users to update.
  """
  userIds: [ID!]! @possibleTypes(concreteTypes: ["User"])

  """
  The boolean value to set it to, defaults to true.
  """
  value: Boolean = true
}

"""
Autogenerated return type of SetHasUsedAnonymizingProxy
"""
type SetHasUsedAnonymizingProxyPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The users that were updated.
  """
  users: [User!]
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the organization to set a limit for.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The organization that the interaction limit was set for.
  """
  organization: Organization
}

"""
Autogenerated input type of SetProfilePins
"""
input SetProfilePinsInput @underDevelopment(since: "2019-01-22") @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the pinned items in the order you want them to appear on your profile.
  """
  pinnedItemIds: [ID!]! @possibleTypes(concreteTypes: ["Gist", "Repository"], abstractType: "PinnableItem")

  """
  ID of the owner of the profile to modify.
  """
  profileOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "ProfileOwner")
}

"""
Autogenerated return type of SetProfilePins
"""
type SetProfilePinsPayload @underDevelopment(since: "2019-01-22") @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the profile that was updated.
  """
  profileOwner: ProfileOwner
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the repository to set a limit for.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that the interaction limit was set for.
  """
  repository: Repository
}

"""
Autogenerated input type of SetUserDashboardPins
"""
input SetUserDashboardPinsInput @underDevelopment(since: "2019-05-02") @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the pinned items in the order you want them to appear on your user
  dashboard. Will replace all dashboard pins with those specified.
  """
  pinnedItemIds: [ID!]!
    @possibleTypes(
      concreteTypes: ["Gist", "Issue", "Organization", "Project", "PullRequest", "Repository", "Team", "User"]
      abstractType: "DashboardPinnableItem"
    )

  """
  ID of the owner of the dashboard to modify.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserDashboardPins
"""
type SetUserDashboardPinsPayload @underDevelopment(since: "2019-05-02") @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the dashboard that was updated.
  """
  user: User
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When this limit should expire.
  """
  expiry: RepositoryInteractionLimitExpiry

  """
  The limit to set.
  """
  limit: RepositoryInteractionLimit!

  """
  The ID of the user to set a limit for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that the interaction limit was set for.
  """
  user: User
}

"""
Autogenerated input type of SignMarketplaceAgreement
"""
input SignMarketplaceAgreementInput @internal @serviceMapping(to: "github/marketplace") {
  """
  Sign the agreement with the given ID.
  """
  agreementID: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Marketplace listing for which the agreement is being signed.
  """
  listingID: ID!
}

"""
Autogenerated return type of SignMarketplaceAgreement
"""
type SignMarketplaceAgreementPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Information about the issuer of the certificate used for signing.
  """
  issuer: CertificateAttributes

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  Information about the subject of the certificate used for signing.
  """
  subject: CertificateAttributes

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
A common reputation type for Spamurai.
"""
type SpamuraiReputation @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Maximum reputation.
  """
  maximumReputation: Float!

  """
  Minimum reputation.
  """
  minimumReputation: Float!

  """
  Not spammy sample size.
  """
  notSpammySampleSize: Int!

  """
  Plus minus.
  """
  plusMinus: Float!

  """
  Reputation.
  """
  reputation: Float!

  """
  Reputation lower bound.
  """
  reputationLowerBound: Float!

  """
  Sample size.
  """
  sampleSize: Int!

  """
  Spammy sample size.
  """
  spammySampleSize: Int!
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor @serviceMapping(to: "github/github_sponsors") = Organization | User

"""
The connection type for Sponsor.
"""
type SponsorConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsor entities by.
  """
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN

  """
  Order sponsors by their relevance to the viewer.
  """
  RELEVANCE
}

"""
Entities that can be sponsored through GitHub Sponsors
"""
interface Sponsorable @serviceMapping(to: "github/github_sponsors") {
  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Check if the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in a given time range.
    """
    period: SponsorsActivityPeriod = MONTH
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  This object's sponsorship of the viewer.
  """
  sponsorshipForViewerAsMaintainer: Sponsorship @internal

  """
  The viewer's sponsorship of this entity.
  """
  sponsorshipForViewerAsSponsor: Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  This object's sponsorships as the maintainer.
  """
  sponsorshipsAsMaintainer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  This object's sponsorships as the sponsor.
  """
  sponsorshipsAsSponsor(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem @serviceMapping(to: "github/github_sponsors") = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorableItemEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorableItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorableItemEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorable entities by.
  """
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order sponsorable entities by login (username).
  """
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node
  @serviceMapping(to: "github/github_sponsors")
  @useNextGlobalIdFormat(after: "2021-06-01") {
  """
  What action this activity indicates took place.
  """
  action: SponsorsActivityAction!
  id: ID!

  """
  The tier that the sponsorship used to use, for tier change events.
  """
  previousSponsorsTier: SponsorsTier

  """
  The user or organization who triggered this activity and was/is sponsoring the sponsorable.
  """
  sponsor: Sponsor

  """
  The user or organization that is being sponsored, the maintainer.
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier.
  """
  sponsorsTier: SponsorsTier

  """
  The timestamp of this event.
  """
  timestamp: DateTime
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction @serviceMapping(to: "github/github_sponsors") {
  """
  The activity was cancelling a sponsorship.
  """
  CANCELLED_SPONSORSHIP

  """
  The activity was starting a sponsorship.
  """
  NEW_SPONSORSHIP

  """
  The activity was scheduling a downgrade or cancellation.
  """
  PENDING_CHANGE

  """
  The activity was funds being refunded to the sponsor or GitHub.
  """
  REFUND

  """
  The activity was disabling matching for a previously matched sponsorship.
  """
  SPONSOR_MATCH_DISABLED

  """
  The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  """
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorsActivityEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorsActivity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorsActivityEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order activity by.
  """
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order activities by when they happened.
  """
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod @serviceMapping(to: "github/github_sponsors") {
  """
  Don't restrict the activity to any date range, include all activity.
  """
  ALL

  """
  The previous calendar day.
  """
  DAY

  """
  The previous thirty days.
  """
  MONTH

  """
  The previous seven days.
  """
  WEEK
}

"""
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
"""
type SponsorsGoal @serviceMapping(to: "github/github_sponsors") {
  """
  A description of the goal from the maintainer.
  """
  description: String

  """
  What the objective of this goal is.
  """
  kind: SponsorsGoalKind!

  """
  The percentage representing how complete this goal is, between 0-100.
  """
  percentComplete: Int!

  """
  What the goal amount is. Represents a dollar amount for monthly sponsorship
  amount goals. Represents a count of unique sponsors for total sponsors count goals.
  """
  targetValue: Int!

  """
  A brief summary of the kind and target value of this goal.
  """
  title: String!
}

"""
The different kinds of goals a GitHub Sponsors member can have.
"""
enum SponsorsGoalKind @serviceMapping(to: "github/github_sponsors") {
  """
  The goal is about getting a certain dollar amount from sponsorships each month.
  """
  MONTHLY_SPONSORSHIP_AMOUNT

  """
  The goal is about reaching a certain number of sponsors.
  """
  TOTAL_SPONSORS_COUNT
}

"""
A GitHub Sponsors listing.
"""
type SponsorsListing implements Node
  @serviceMapping(to: "github/github_sponsors")
  @useNextGlobalIdFormat(after: "2021-05-26") {
  """
  The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
  """
  activeGoal: SponsorsGoal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The full description of the listing.
  """
  fullDescription: String!

  """
  The full description of the listing rendered to HTML.
  """
  fullDescriptionHTML: HTML!
  id: ID!

  """
  Whether this listing is publicly visible.
  """
  isPublic: Boolean!

  """
  The listing's full name.
  """
  name: String!

  """
  A future date on which this listing is eligible to receive a payout.
  """
  nextPayoutDate: Date

  """
  The short description of the listing.
  """
  shortDescription: String!

  """
  The short name of the listing.
  """
  slug: String!

  """
  The entity this listing represents who can be sponsored on GitHub Sponsors.
  """
  sponsorable: Sponsorable!

  """
  A list of the subscription items associated with this Sponsors listing.
  """
  subscriptionItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubscriptionItemConnection! @internal

  """
  The combined monthly recurring value in cents of active sponsorships for this listing.
  """
  subscriptionValue: Int @underDevelopment(since: "2019-11-06")

  """
  The published tiers for this GitHub Sponsors listing.
  """
  tiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Sponsors tiers returned from the connection.
    """
    orderBy: SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): SponsorsTierConnection
}

"""
A GitHub Sponsors tier associated with a GitHub Sponsors listing.
"""
type SponsorsTier implements Node
  @serviceMapping(to: "github/github_sponsors")
  @useNextGlobalIdFormat(after: "2021-06-04") {
  """
  SponsorsTier information only visible to users that can administer the associated Sponsors listing.
  """
  adminInfo: SponsorsTierAdminInfo

  """
  Get a different tier for this tier's maintainer that is at the same frequency
  as this tier but with an equal or lesser cost. Returns the published tier with
  the monthly price closest to this tier's without going over.
  """
  closestLesserValueTier: SponsorsTier

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The description of the tier.
  """
  description: String!

  """
  The tier description rendered to HTML
  """
  descriptionHTML: HTML!
  id: ID!

  """
  Whether this tier was chosen at checkout time by the sponsor rather than
  defined ahead of time by the maintainer who manages the Sponsors listing.
  """
  isCustomAmount: Boolean!

  """
  Whether this tier is only for use with one-time sponsorships.
  """
  isOneTime: Boolean!

  """
  How much this tier costs per month in cents.
  """
  monthlyPriceInCents: Int!

  """
  How much this tier costs per month in dollars.
  """
  monthlyPriceInDollars: Int!

  """
  The name of the tier.
  """
  name: String!

  """
  The sponsors listing that this tier belongs to.
  """
  sponsorsListing: SponsorsListing!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
type SponsorsTierAdminInfo @serviceMapping(to: "github/github_sponsors") {
  """
  The sponsorships associated with this tier.
  """
  sponsorships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
}

"""
The connection type for SponsorsTier.
"""
type SponsorsTierConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorsTierEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorsTier]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorsTierEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorsTier
}

"""
Ordering options for Sponsors tiers connections.
"""
input SponsorsTierOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order tiers by.
  """
  field: SponsorsTierOrderField!
}

"""
Properties by which Sponsors tiers connections can be ordered.
"""
enum SponsorsTierOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order tiers by creation time.
  """
  CREATED_AT

  """
  Order tiers by their monthly price in cents
  """
  MONTHLY_PRICE_IN_CENTS
}

"""
A sponsorship relationship between a sponsor and a maintainer
"""
type Sponsorship implements Node
  @serviceMapping(to: "github/github_sponsors")
  @useNextGlobalIdFormat(after: "2021-06-02") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  isOneTimePayment: Boolean!

  """
  True if the sponsor has opted in to sponsorship updates.
  """
  isSponsorOptedInToEmail: Boolean! @internal

  """
  The entity that is being sponsored
  """
  maintainer: User!
    @deprecated(
      reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC."
    )

  """
  The privacy level for this sponsorship.
  """
  privacyLevel: SponsorshipPrivacy!

  """
  The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
  """
  sponsor: User
    @deprecated(
      reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC."
    )

  """
  The user or organization that is sponsoring, if you have permission to view them.
  """
  sponsorEntity: Sponsor

  """
  The entity that is being sponsored
  """
  sponsorable: Sponsorable!

  """
  The associated sponsorship tier
  """
  tier: SponsorsTier

  """
  Identifies the date and time when the current tier was chosen for this sponsorship.
  """
  tierSelectedAt: DateTime
}

"""
The connection type for Sponsorship.
"""
type SponsorshipConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorshipEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsorship]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total amount in cents of all recurring sponsorships in the connection
  whose amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInCents: Int!

  """
  The total dollar amount of all recurring sponsorships in the connection whose
  amount you can view. Does not include one-time sponsorships.
  """
  totalRecurringMonthlyPriceInDollars: Int!
}

"""
An edge in a connection.
"""
type SponsorshipEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsorship
}

"""
An update sent to sponsors of a user or organization on GitHub Sponsors.
"""
type SponsorshipNewsletter implements Node
  @serviceMapping(to: "github/github_sponsors")
  @useNextGlobalIdFormat(after: "2021-08-21") {
  """
  The author of the newsletter
  """
  author: User! @underDevelopment(since: "2021-08-03")

  """
  The contents of the newsletter, the message the sponsorable wanted to give.
  """
  body: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  id: ID!

  """
  Indicates if this newsletter is available to all sponsorship tiers
  """
  isForAllTiers: Boolean! @underDevelopment(since: "2021-08-03")

  """
  Indicates if the newsletter has been made available to sponsors.
  """
  isPublished: Boolean!

  """
  The user or organization this newsletter is from.
  """
  sponsorable: Sponsorable!

  """
  The tiers that have been granted direct access to this newsletter
  """
  sponsorsTiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SponsorsTierConnection @underDevelopment(since: "2021-08-03")

  """
  The subject of the newsletter, what it's about.
  """
  subject: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for SponsorshipNewsletter.
"""
type SponsorshipNewsletterConnection @serviceMapping(to: "github/github_sponsors") {
  """
  A list of edges.
  """
  edges: [SponsorshipNewsletterEdge]

  """
  A list of nodes.
  """
  nodes: [SponsorshipNewsletter]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorshipNewsletterEdge @serviceMapping(to: "github/github_sponsors") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SponsorshipNewsletter
}

"""
Ordering options for sponsorship newsletter connections.
"""
input SponsorshipNewsletterOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorship newsletters by.
  """
  field: SponsorshipNewsletterOrderField!
}

"""
Properties by which sponsorship update connections can be ordered.
"""
enum SponsorshipNewsletterOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order sponsorship newsletters by when they were created.
  """
  CREATED_AT
}

"""
Ordering options for sponsorship connections.
"""
input SponsorshipOrder @serviceMapping(to: "github/github_sponsors") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order sponsorship by.
  """
  field: SponsorshipOrderField!
}

"""
Properties by which sponsorship connections can be ordered.
"""
enum SponsorshipOrderField @serviceMapping(to: "github/github_sponsors") {
  """
  Order sponsorship by creation time.
  """
  CREATED_AT
}

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy @serviceMapping(to: "github/github_sponsors") {
  """
  Private
  """
  PRIVATE

  """
  Public
  """
  PUBLIC
}

"""
A serialized Structured Stack Trace object.

See https://github.com/github/failbotg/blob/master/docs/api.md#exception-detail
"""
input Stackframe @internal {
  """
  Column number in the line provided in lineno.
  """
  colno: String

  """
  The file in the source where the exception occurred.
  """
  filename: String!

  """
  Function or method that the exception occurred in.
  """
  function: String!

  """
  Line number in the filename.
  """
  lineno: String!
}

"""
This object may be fetched by GitHub staff, and it
shows data about a repository, even if the repo is private.
`Platform::Interfaces::RepositoryInfo` serves as a whitelist of fields
which are visible to staff users, along with any extra fields added here.
"""
type StaffAccessedRepository implements RepositoryInfo @internal {
  """
  Returns whether or not a repository is restricted to collaborators only
  """
  collaboratorsOnly: Boolean! @internal

  """
  The HTTP URL pointing to this repository's commits listing.
  """
  commitsResourcePath(
    """
    The login of a user by which to filter the repository's commits.
    """
    author: String
  ): URI! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The repository's default branch.
  """
  defaultBranch: String! @internal

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Indicates if the repository has anonymous Git read access feature enabled.
  """
  hasAnonymousAccessEnabled: Boolean! @internal

  """
  Indicates if the repository has downloads.
  """
  hasDownloads: Boolean! @internal

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has Pages configured.
  """
  hasPages: Boolean! @internal

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Indicates if the repository has the report to maintainer feature enabled.
  """
  hasReportToMaintainerEnabled: Boolean! @underDevelopment(since: "2019-09-16")

  """
  Indicates if a repository has wiki editing restricted to pushers only.
  """
  hasRestrictedWikiEditing: Boolean! @underDevelopment(since: "2019-05-09")

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI
  id: ID!

  """
  Indicates if anonymous git access is available for the repository
  """
  isAnonymousAccessAvailable: Boolean! @internal

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Returns whether or not a repository has been hidden from discovery pages
  """
  isHiddenFromDiscovery: Boolean! @internal

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  Indicates if the repositories plan owner is trade controls restricted, which makes this repo behave as archived
  """
  isTradeControlsReadOnly: Boolean! @internal

  """
  Contents of the license file in the repository
  """
  licenseContents: String

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  The repository's original mirror URL.
  """
  mirrorUrl: URI

  """
  The name of the repository.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!

  """
  Returns how many repositories there are in this network.
  """
  networkCount: Int! @internal

  """
  Returns whether or not a repository has been de-indexed by Google
  """
  noIndex: Boolean! @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImage: RepositoryImage @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImageUrl: URI!

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  The permalink for this repository
  """
  permalink(
    """
    Whether or not to include the hostname or only the path information
    """
    includeHost: Boolean
  ): URI! @internal

  """
  Identifies when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Returns whether or not a repository requires a login to view content
  """
  requireLogin: Boolean! @internal

  """
  Returns whether or not a repository requires an opt-in to view content
  """
  requireOptIn: Boolean! @internal

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether this repository should use the enhanced open graph image URL
  """
  showEnhancedOgImage: Boolean! @internal

  """
  Fields that are only visible to site admins.
  """
  stafftoolsInfo: RepositoryStafftoolsInfo

  """
  2FA requirement met by viewing user
  """
  twoFactorRequirementMetBy: Boolean! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this repository
  """
  url: URI!

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility! @underDevelopment(since: "2019-04-18")
}

"""
Staff note from stafftools. For internal use only.
"""
type StaffNote @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Note body.
  """
  body: String

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Note creator.
  """
  creator: Account

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
The connection type for StaffNote.
"""
type StaffNoteConnection @internal @serviceMapping(to: "github/platform_health_data") {
  """
  A list of edges.
  """
  edges: [StaffNoteEdge]

  """
  A list of nodes.
  """
  nodes: [StaffNote]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type StaffNoteEdge @internal @serviceMapping(to: "github/platform_health_data") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: StaffNote
}

"""
Stafftools information for site admins.
"""
type StafftoolsInfo @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Account from database id.
  """
  accountFromDatabaseId(
    """
    Account database id.
    """
    databaseId: Int!
  ): Account

  """
  Lookup user, organization, and bot accounts, oldest to newest.
  """
  accounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccountConnection

  """
  Lookup user accounts by email domain.
  """
  accountsForEmailDomain(
    """
    Email address or domain name.
    """
    address: String!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include accounts with emails added since this date and time.
    """
    emailsAddedSince: DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include spammy accounts.
    """
    includeSpammy: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccountConnection

  """
  Lookup user accounts by email pattern.
  """
  accountsForEmailPattern(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Number of days to look back.
    """
    days: Int = 3

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include spammy accounts.
    """
    includeSpammy: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Email pattern.
    """
    pattern: String!
  ): AccountConnection

  """
  Lookup user for email addresses.
  """
  accountsForEmails(
    """
    User email addresses. Limit 100.
    """
    addresses: [String!]!
  ): [Account!]

  """
  Lookup user, organization, and bot accounts by login.
  """
  accountsForLogins(
    """
    The logins of the users, organizations, or bots. Limit 100.
    """
    logins: [String!]!
  ): [Account!]

  """
  Lookup user, organization, and bot accounts from last IP.
  """
  accountsFromLastIp(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IPv4 network address.
    """
    ip: String!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_32
  ): AccountConnection

  """
  Submitted user requests to join early access programs
  """
  earlyAccessMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    The early access feature to get memberships for.
    """
    feature: EarlyAccessMembershipFeature!

    """
    The condition to filter memberships by.
    """
    filter: EarlyAccessMembershipFilter = ALL

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for memberships returned from the connection.
    """
    orderBy: EarlyAccessMembershipOrder = {field: CREATED_AT, direction: ASC}

    """
    The login of a user to search for a membership for.
    """
    query: String
  ): EarlyAccessMembershipConnection @internal

  """
  Metadata for an email domain.
  """
  emailDomainMetadata(
    """
    Email address or domain name.
    """
    address: String!

    """
    Lookup address type.
    """
    addressType: EmailDomainAddressType = EMAIL_DOMAIN
  ): EmailDomainMetadata! @internal

  """
  Reputation data for an email domain.
  """
  emailDomainReputation(
    """
    Email address or domain name.
    """
    address: String!

    """
    Lookup address type.
    """
    addressType: EmailDomainAddressType = EMAIL_DOMAIN
  ): SpamuraiReputation! @internal

  """
  Fetch all enterprise accounts.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnterpriseConnection! @internal

  """
  The count users for an IP neighborhood.
  """
  ipNeighborsCount(
    """
    IPv4 network address.
    """
    ip: String!

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_32
  ): Int!

  """
  Fetch all pending vulnerabilities
  """
  pendingVulnerabilities(
    """
    Partial package name of the pending vulnerabilities to load
    """
    affects_query: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ecosystem of the pending vulnerabilities to load
    """
    ecosystem: VulnerabilityPlatform

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Partial identifier of the pending vulnerabilities to load
    """
    identifier_query: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned vulnerabilities.
    """
    orderBy: VulnerabilityOrder

    """
    Severities of the pending vulnerabilities to load
    """
    severities: [VulnerabilitySeverity]

    """
    Return only internal-test Pending Vulnerabilities
    """
    simulation: Boolean

    """
    Source of the pending vulnerabilities
    """
    source_query: String

    """
    Status of the pending vulnerabilities to load
    """
    status: PendingVulnerabilityStatus
  ): PendingVulnerabilityConnection! @internal

  """
  Fetch a pending vulnerability by internal database ID
  """
  pendingVulnerability(
    """
    Pending vulnerability database id.
    """
    databaseId: Int!
  ): PendingVulnerability! @internal

  """
  Fetch a pending vulnerable version range by ID
  """
  pendingVulnerableVersionRange(
    """
    Pending Vulnerable version range database id.
    """
    databaseId: Int!
  ): PendingVulnerableVersionRange! @internal

  """
  The count of spammy users for an IP neighborhood.
  """
  spammyIpNeighborsCount(
    """
    IPv4 network address.
    """
    ip: String!

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_32
  ): Int!

  """
  Look up the urls for user assets.
  """
  userAssetUrls(
    """
    User Asset Database IDs. Limit 100.
    """
    ids: [Int!]!
  ): [UserAssetUrl!]

  """
  Fetch all vulnerabilities
  """
  vulnerabilities(
    """
    Partial package name of the vulnerabilities to load
    """
    affects_query: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ecosystem of the vulnerabilities to load
    """
    ecosystem: VulnerabilityPlatform

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Partial identifier of the vulnerabilities to load
    """
    identifier_query: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned vulnerabilities.
    """
    orderBy: VulnerabilityOrder

    """
    Severities of the vulnerabilities to load
    """
    severities: [VulnerabilitySeverity]

    """
    Return only internal-test Vulnerabilities
    """
    simulation: Boolean

    """
    Source of the vulnerabilities
    """
    source_query: String

    """
    Status of the vulnerabilities to load
    """
    status: VulnerabilityStatus
  ): VulnerabilityConnection! @internal

  """
  Fetch a vulnerability by ID
  """
  vulnerability(
    """
    Vulnerability database id.
    """
    databaseId: Int!
  ): Vulnerability! @internal

  """
  Fetch a vulnerable version range by ID
  """
  vulnerableVersionRange(
    """
    Vulnerable version range database id.
    """
    databaseId: Int!
  ): VulnerableVersionRange! @internal
}

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  """
  The direction in which to order nodes.
  """
  direction: OrderDirection!

  """
  The field in which to order nodes by.
  """
  field: StarOrderField!
}

"""
Properties by which star connections can be ordered.
"""
enum StarOrderField {
  """
  Allows ordering a list of stars by recent commits in the repository.
  """
  PUSHED_AT @underDevelopment(since: "2018-08-13")

  """
  Allows ordering a list of stars by when they were created.
  """
  STARRED_AT

  """
  Allows ordering a list of starred repositories by how many stars they have.
  """
  STARS @underDevelopment(since: "2018-08-13")
}

"""
The connection type for User.
"""
type StargazerConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [StargazerEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user that's starred a repository.
"""
type StargazerEdge @serviceMapping(to: "github/shared") {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  Identifies when the item was starred.
  """
  starredAt: DateTime!
}

"""
Things that can be starred.
"""
interface Starrable {
  id: ID!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has the ability to star this starrable.
  """
  viewerCanStar: Boolean! @underDevelopment(since: "2020-05-18")

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""
The connection type for Repository.
"""
type StarredRepositoryConnection @serviceMapping(to: "github/repo_info") {
  """
  A list of edges.
  """
  edges: [StarredRepositoryEdge]

  """
  Is the list of stars for this user truncated? This is true for users that have many stars.
  """
  isOverLimit: Boolean!

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a starred repository.
"""
type StarredRepositoryEdge @serviceMapping(to: "github/repo_info") {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: Repository!

  """
  Identifies when the item was starred.
  """
  starredAt: DateTime!
}

"""
The connection type for Topic.
"""
type StarredTopicConnection @underDevelopment(since: "2018-11-14") @serviceMapping(to: "github/explore") {
  """
  A list of edges.
  """
  edges: [StarredTopicEdge]

  """
  A list of nodes.
  """
  nodes: [Topic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a starred topic.
"""
type StarredTopicEdge @underDevelopment(since: "2019-09-09") @serviceMapping(to: "github/explore") {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: Topic!

  """
  Identifies when the item was starred.
  """
  starredAt: DateTime!
}

"""
Autogenerated input type of StartImport
"""
input StartImportInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the importing organization.
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

"""
Autogenerated return type of StartImport
"""
type StartImportPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending import migration.
  """
  migration: LegacyMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput @serviceMapping(to: "github/octoshift") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to continue the migration on error
  """
  continueOnError: Boolean

  """
  The ID of the organization that will own the imported repository.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The name of the imported repository.
  """
  repositoryName: String!

  """
  The ID of the Octoshift migration source.
  """
  sourceId: ID! @possibleTypes(concreteTypes: ["MigrationSource"])

  """
  The Octoshift migration source repository URL.
  """
  sourceRepositoryUrl: URI!
}

"""
Autogenerated return type of StartRepositoryMigration
"""
type StartRepositoryMigrationPayload @serviceMapping(to: "github/octoshift") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new Octoshift repository migration.
  """
  repositoryMigration: RepositoryMigration
}

"""
Represents a commit status.
"""
type Status implements Node {
  """
  A list of status contexts and check runs for this commit.
  """
  combinedContexts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!

  """
  The commit this status is attached to.
  """
  commit: Commit

  """
  Looks up an individual status context by context name.
  """
  context(
    """
    The context name.
    """
    name: String!
  ): StatusContext

  """
  The individual status contexts for this commit.
  """
  contexts: [StatusContext!]!
  id: ID!

  """
  The combined commit status.
  """
  state: StatusState!
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node
  @serviceMapping(to: "github/checks_api")
  @useNextGlobalIdFormat(after: "2021-09-30") {
  """
  The commit the status and check runs are attached to.
  """
  commit: Commit

  """
  A list of status contexts and check runs for this commit.
  """
  contexts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StatusCheckRollupContextConnection!
  id: ID!

  """
  A short summary of successful and total contexts.
  """
  shortText: String! @internal

  """
  The combined status for the commit.
  """
  state: StatusState!
}

"""
Types that can be inside a StatusCheckRollup context.
"""
union StatusCheckRollupContext = CheckRun | StatusContext

"""
The connection type for StatusCheckRollupContext.
"""
type StatusCheckRollupContextConnection {
  """
  A list of edges.
  """
  edges: [StatusCheckRollupContextEdge]

  """
  A list of nodes.
  """
  nodes: [StatusCheckRollupContext]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type StatusCheckRollupContextEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: StatusCheckRollupContext
}

"""
Represents an individual commit status context
"""
type StatusContext implements Node & RequirableByPullRequest
  @serviceMapping(to: "github/commit")
  @useNextGlobalIdFormat(after: "2021-09-30") {
  """
  The application that created this status context, if any.
  """
  application: OauthApplication

  """
  The avatar of the OAuth application or the user that created the status
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int = 40
  ): URI

  """
  This commit this status context is attached to.
  """
  commit: Commit

  """
  The name of this status context.
  """
  context: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The actor who created this status context.
  """
  creator: Actor

  """
  The description for this status context.
  """
  description: String
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """
    The id of the pull request this is required for
    """
    pullRequestId: ID

    """
    The number of the pull request this is required for
    """
    pullRequestNumber: Int
  ): Boolean!

  """
  The state of this status context.
  """
  state: StatusState!

  """
  The URL for this status context.
  """
  targetUrl: URI
}

"""
The possible commit status states.
"""
enum StatusState {
  """
  Status is errored.
  """
  ERROR

  """
  Status is expected.
  """
  EXPECTED

  """
  Status is failing.
  """
  FAILURE

  """
  Status is pending.
  """
  PENDING

  """
  Status is successful.
  """
  SUCCESS
}

"""
Streaming log information for a check-run
"""
type StreamingLog @internal @serviceMapping(to: "github/checks_api") {
  """
  The URL of the log stream.
  """
  url: URI!
}

"""
Streaming log metadata.
"""
input StreamingLogData @serviceMapping(to: "github/checks_api") {
  """
  The streaming log url.
  """
  url: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
input SubmitPullRequestReviewInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The text field to set on the Pull Request Review.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The event to send to the Pull Request Review.
  """
  event: PullRequestReviewEvent!

  """
  The Pull Request ID to submit any pending reviews.
  """
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The Pull Request Review ID to submit.
  """
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of SubmitPullRequestReview
"""
type SubmitPullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The submitted pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
A pointer to a repository at a specific revision embedded inside another repository.
"""
type Submodule @serviceMapping(to: "github/repo_info") {
  """
  The branch of the upstream submodule for tracking updates
  """
  branch: String

  """
  The git URL of the submodule repository
  """
  gitUrl: URI!

  """
  The name of the submodule in .gitmodules
  """
  name: String!

  """
  The path in the superproject that this submodule is located in
  """
  path: String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  subprojectCommitOid: GitObjectID
}

"""
The connection type for Submodule.
"""
type SubmoduleConnection @serviceMapping(to: "github/repo_info") {
  """
  A list of edges.
  """
  edges: [SubmoduleEdge]

  """
  A list of nodes.
  """
  nodes: [Submodule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SubmoduleEdge @serviceMapping(to: "github/repo_info") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Submodule
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Object referenced by event.
  """
  subscribable: Subscribable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
The billing subscription for an account.
"""
type Subscription @internal @serviceMapping(to: "github/account_management") {
  """
  The balance on the billing subscription.
  """
  balance: Float!

  """
  The discount amount applied for the billing subscription.
  """
  discount: Float!

  """
  The total price after discounts for the billing subscription.
  """
  discountedPrice(
    """
    prorate the discountedPrice for the amount of service remaining.
    """
    prorate: Boolean

    """
    include the billing subscription balance for the price.
    """
    useBalance: Boolean
  ): Float!

  """
  The billing cycle to charge the billing subscription.
  """
  duration: BillingDuration!

  """
  Returns eligibility for free trials for a listing
  """
  eligibleForFreeTrialOnListing(
    """
    Listing slug for listing to check eligibility
    """
    listingSlug: String!
  ): Boolean!

  """
  The date the billing subscription cycle ends.
  """
  endDate: DateTime!

  """
  The date a free trial on this subscription would end.
  """
  freeTrialEndDate: DateTime!

  """
  The date the billing subscription cycle will next bill.
  """
  nextBillingDate: DateTime!

  """
  Returns whether or not the plan subscription is a free trial
  """
  onFreeTrial: Boolean!

  """
  Returns the pending cycle for a given subscription.
  """
  pendingCycle: PendingCycle

  """
  The billing plan for the billing subscription.
  """
  plan: Plan!

  """
  Returns a plan change object for a set of changes.
  """
  planChange(
    """
    The new asset pack count
    """
    assetPacks: Int

    """
    The new billing duration
    """
    billingDuration: BillingDuration

    """
    The new Github plan
    """
    plan: String

    """
    The new seat count
    """
    seats: Int

    """
    The id of a new marketplace plan or sponsors tier
    """
    subscribableId: ID

    """
    The quantity for the new marketplace plan or sponsors tier
    """
    subscribableQuantity: Int
  ): PlanChange

  """
  The next_billing_date after the free trial ends.
  """
  postFreeTrialBillDate: DateTime!

  """
  the prorated amount the user will pay for the remainder of the subscription after the free trial ends
  """
  postTrialProratedTotalPrice(
    """
    the ID of a MarketplaceListingPlan
    """
    id: ID

    """
    number of units of this plan that would be purchased
    """
    quantity: Int
  ): Money!

  """
  The quantity of seats purchased with this billing subscription.
  """
  seats: Int!

  """
  The date the billing subscription cycle starts.
  """
  startDate: DateTime!

  """
  Returns a subscription item for a given Marketplace or Sponsors listing slug.
  """
  subscriptionItem(
    """
    Filter out cancelled subscription items if set to true.
    """
    active: Boolean

    """
    The slug of the Marketplace or Sponsors listing.
    """
    listingSlug: String!
  ): SubscriptionItem

  """
  Additional add ons associated with the billing subscription.
  """
  subscriptionItems(
    """
    Filter out cancelled subscription items.
    """
    active: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter to just the subscription items of the given type.
    """
    subscribableType: SubscriptionItemSubscribableType
  ): SubscriptionItemConnection!

  """
  The total price before discounts for the billing subscription.
  """
  undiscountedPrice: Float!
}

"""
An account's subscription item, representing something they pay for
"""
type SubscriptionItem implements Node @internal {
  """
  The account associated with this subscription item
  """
  account: Account @internal

  """
  Whether an account has been charged for this subscription, during signup or at the end of a free trial
  """
  accountHasBeenCharged: Boolean!

  """
  Has the purchased product been authorized for the account?
  """
  authorizationRequired: Boolean!

  """
  The billing cycle for the plan associated with this item
  """
  billingCycle: String!

  """
  Identifies the date and time when the subscription item was first created.
  """
  createdAt: DateTime

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The total price for this subscription item, prorated to end of the owner's
  current billing cycle, formatted as a money string.
  """
  formattedProratedTotalPrice: String!

  """
  The total price for this subscription item, based on the owner's plan duration, formatted as a money string.
  """
  formattedTotalPrice: String!

  """
  Date the free trial ends
  """
  freeTrialEndsOn: DateTime

  """
  Returns whether the subscription item has a pending plan change
  """
  hasPendingCycleChange: Boolean!
  id: ID!

  """
  Whether the item has been installed. Only relevant for GitHub or OAuth apps purchases.
  """
  isInstalled: Boolean!

  """
  The marketplace listing that this is a purchase of
  """
  marketplaceListing: MarketplaceListing

  """
  Pending change related to this item
  """
  marketplacePendingChange: PendingMarketplaceChange

  """
  The next billing date for the plan associated with this item
  """
  nextBillingDate: DateTime

  """
  Is the subscription item currently on free trial
  """
  onFreeTrial: Boolean!

  """
  Returns true if the subscription item is not free or on free trial
  """
  paid: Boolean!

  """
  Returns the id of a pending plan change
  """
  pendingChangeId: Int

  """
  The next_billing_date after the free trial ends.
  """
  postTrialBillDate: DateTime!

  """
  The price for this item after the free trial ends.
  """
  postTrialProratedPrice: Money

  """
  The total price for the item.
  """
  price(
    """
    The duration for which the price should be computed. Defaults to the current plan duration.
    """
    duration: BillingDuration

    """
    Should the price check for an eligible free trial?
    """
    freeTrial: Boolean = true
  ): Money!

  """
  The total price for this subscription item, prorated to end of the owner's current billing cycle, in cents.
  """
  proratedTotalPriceInCents: Int!

  """
  The number of units for this item.
  """
  quantity: Int!

  """
  The object that this is a subscription to.
  """
  subscribable: BillingSubscribable!

  """
  Pending change related to this item
  """
  subscribablePendingChange: PendingSubscribableChange

  """
  Identifies the date and time when the subscription item was last updated.
  """
  updatedAt: DateTime

  """
  Can the current user cancel or edit this subscription item.
  """
  viewerCanAdmin: Boolean!
}

"""
The connection type for SubscriptionItem.
"""
type SubscriptionItemConnection @internal @serviceMapping(to: "github/account_management") {
  """
  A list of edges.
  """
  edges: [SubscriptionItemEdge]

  """
  A list of nodes.
  """
  nodes: [SubscriptionItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total monthly cost for all subscription items in the connection, in cents.
  """
  totalMonthlyPriceInCents: Int! @underDevelopment(since: "2021-05-24")
}

"""
An edge in a connection.
"""
type SubscriptionItemEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SubscriptionItem
}

"""
Ordering options for subscription item connections.
"""
input SubscriptionItemOrder @internal {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order subscription items by.
  """
  field: SubscriptionItemOrderField!
}

"""
Properties by which subscription item connections can be ordered.
"""
enum SubscriptionItemOrderField @internal {
  """
  Order subscription items by creation time
  """
  CREATED_AT

  """
  Order subscription items by update time
  """
  UPDATED_AT
}

"""
The possible states of a Sponsors tier.
"""
enum SubscriptionItemSubscribableType
  @underDevelopment(since: "2021-01-15")
  @serviceMapping(to: "github/account_management") {
  """
  Subscription is for a Marketplace listing
  """
  MARKETPLACE_LISTING_PLAN

  """
  Subscription is for a Sponsors listing
  """
  SPONSORS_TIER
}

"""
The possible states of a subscription.
"""
enum SubscriptionState {
  """
  The User is notified of a custom subset of notifications.
  """
  CUSTOM

  """
  The User is never notified.
  """
  IGNORED

  """
  The User is notified of new releases, or when participating or @mentioned. Only valid for Repositories.
  """
  RELEASES_ONLY

  """
  The User is notified of all conversations.
  """
  SUBSCRIBED

  """
  The User is only notified when participating or @mentioned.
  """
  UNSUBSCRIBED
}

"""
Describes a suggested change to a file to be applied in a new commit.
"""
input SuggestedChange @underDevelopment(since: "2018-10-31") @serviceMapping(to: "github/pull_requests") {
  """
  ID of the comment with the suggested change.
  """
  commentId: ID!

  """
  The file path relative to the root of the repository.
  """
  path: String!

  """
  The contents of the code suggestion, e.g. ['def new_method']
  """
  suggestion: [String!]
}

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
type SuggestedReviewer @serviceMapping(to: "github/pull_request_reviews") {
  """
  Is this suggestion based on past commits?
  """
  isAuthor: Boolean!

  """
  Is this suggestion based on past review comments?
  """
  isCommenter: Boolean!

  """
  Identifies the user suggested to review the pull request.
  """
  reviewer: User!
}

"""
A support contact.
"""
type SupportContact @serviceMapping(to: "github/mobile_api") {
  """
  The URL or email for the support contact
  """
  link: String!

  """
  The type for the support contact link
  """
  linkType: SupportLinkType!
}

"""
The possible support link types.
"""
enum SupportLinkType @serviceMapping(to: "github/mobile_api") {
  """
  A email support link
  """
  EMAIL

  """
  A url support link
  """
  URL
}

"""
Autogenerated input type of SuspendAccounts
"""
input SuspendAccountsInput @internal @serviceMapping(to: "github/account_classification") {
  """
  The global relay id of accounts to suspend.
  """
  accountIds: [ID!]!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Suspend even if the account is hammy.
  """
  hardFlag: Boolean

  """
  The system that performed this classification.
  """
  origin: String = "origin_unknown"

  """
  Reason for suspending accounts.
  """
  reason: String!
}

"""
Autogenerated return type of SuspendAccounts
"""
type SuspendAccountsPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  The suspended accounts.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Represents a Git tag.
"""
type Tag implements GitObject & Node @useNextGlobalIdFormat(after: "2021-09-07") {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!
  id: ID!

  """
  The Git tag message.
  """
  message: String

  """
  The Git tag name.
  """
  name: String!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!

  """
  Tag signing information, if present.
  """
  signature: GitSignature @internal

  """
  Details about the tag author.
  """
  tagger: GitActor

  """
  The Git object the tag points to.
  """
  target: GitObject!
}

"""
The possible task list item statuses, according to its checkbox.
"""
enum TaskListItemStatus {
  """
  Task list item's checkbox is checked
  """
  COMPLETE

  """
  Task list item's checkbox is unchecked
  """
  INCOMPLETE
}

"""
A summary of a task list of items.
"""
type TaskListSummary @underDevelopment(since: "2018-08-27") @serviceMapping(to: "github/issues") {
  """
  Count of completed items in the task list.
  """
  completeCount: Int!

  """
  Are there any items in the task list?
  """
  hasItems: Boolean!

  """
  Count of items that haven't been completed in the task list.
  """
  incompleteCount: Int!

  """
  Count of items in the task list.
  """
  itemCount: Int!
}

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable
  @serviceMapping(to: "github/teams")
  @useNextGlobalIdFormat(after: "2021-07-09") {
  """
  A list of projects that the viewer could add to this team
  """
  addableProjectsForViewer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to only include public projects.
    """
    includePrivate: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection! @internal @serviceMapping(to: "github/projects")

  """
  A list of teams that are ancestors of this team.
  """
  ancestors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection!

  """
  The HTTP path to approve team membership request
  """
  approveMembershipRequestResourcePath: URI! @internal

  """
  The HTTP URL to approve team membership request
  """
  approveMembershipRequestUrl: URI! @internal

  """
  A URL pointing to the team's avatar.
  """
  avatarUrl(
    """
    The size in pixels of the resulting square image.
    """
    size: Int = 400
  ): URI

  """
  True if this team can be managed by identity provider groups via team sync.
  """
  canBeExternallyManaged: Boolean! @internal

  """
  The HTTP path to cancel team membership request
  """
  cancelMembershipRequestResourcePath: URI! @internal

  """
  The HTTP URL to cancel team membership request
  """
  cancelMembershipRequestUrl: URI! @internal

  """
  The path for fetching potential children for autocomplete
  """
  childSearchResourcePath: URI! @internal

  """
  The URL for fetching potential children for autocomplete
  """
  childSearchUrl: URI! @internal

  """
  List of child teams belonging to this team
  """
  childTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to list immediate child teams or all descendant child teams.
    """
    immediateOnly: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters teams based on members. Can be one of ME or EMPTY.
    """
    membersFilter: TeamMembersFilter

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Order for connection
    """
    orderBy: TeamOrder

    """
    The search string to look for.
    """
    query: String @internal

    """
    User logins to filter by
    """
    userLogins: [String!]
  ): TeamConnection!

  """
  The HTTP path for this team's child teams
  """
  childTeamsResourcePath: URI! @internal

  """
  The HTTP URL for this team's child teams
  """
  childTeamsUrl: URI! @internal

  """
  The slug corresponding to the organization and team.
  """
  combinedSlug: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The HTTP path to deny team membership request
  """
  denyMembershipRequestResourcePath: URI! @internal

  """
  The HTTP URL to deny team membership request
  """
  denyMembershipRequestUrl: URI! @internal

  """
  The description of the team.
  """
  description: String

  """
  The HTTP path to remove a member from a team
  """
  destroyTeamMemberResourcePath: URI! @internal

  """
  The HTTP URL to remove a member from a team
  """
  destroyTeamMemberUrl: URI! @internal

  """
  Find a team discussion by its number.
  """
  discussion(
    """
    The sequence number of the discussion to find.
    """
    number: Int!
  ): TeamDiscussion

  """
  A list of team discussions.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If provided, filters discussions according to whether or not they are pinned.
    """
    isPinned: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Order for connection
    """
    orderBy: TeamDiscussionOrder
  ): TeamDiscussionConnection!

  """
  The HTTP path for team discussions
  """
  discussionsResourcePath: URI!

  """
  The HTTP URL for team discussions
  """
  discussionsUrl: URI!

  """
  The HTTP path for editing this team
  """
  editTeamResourcePath: URI!

  """
  The HTTP URL for editing this team
  """
  editTeamUrl: URI!

  """
  The team has one or more external mappings.
  """
  externallyManaged: Boolean! @internal

  """
  Groups mapped to team for Team Sync
  """
  groupMappings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for the connection.
    """
    orderBy: TeamGroupMappingOrder = {field: ID, direction: ASC}
  ): TeamGroupMappingConnection @internal

  """
  Whether this team has any child teams.
  """
  hasChildTeams: Boolean! @internal

  """
  The team has an LDAP mapping.
  """
  hasLdapMapping: Boolean @internal
  id: ID!

  """
  The path for fetching the summary for changing a teams parent or visibility
  """
  importantChangesSummaryResourcePath: URI! @internal

  """
  The URL for fetching the summary for changing a teams parent or visibility
  """
  importantChangesSummaryUrl: URI! @internal

  """
  A list of pending invitations for users to this team
  """
  invitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationInvitationConnection

  """
  Teams that were created with the admin permission level under the legacy organization permissions structure.
  """
  isLegacyAdminTeam: Boolean! @internal

  """
  Whether this team is a legacy owners teams.
  """
  isLegacyOwnersTeam: Boolean! @internal

  """
  Is team post creation disabled?
  """
  isTeamPostCreationDisabled: Boolean! @internal

  """
  The team's LDAP DN.
  """
  ldapDn: String @internal

  """
  Whether the team's LDAP mapping status is 'gone'.
  """
  ldapMappingIsGone: Boolean! @internal

  """
  The team's LDAP sync status.
  """
  ldapSynced: Boolean! @internal

  """
  The HTTP path to leave the team
  """
  leaveResourcePath: URI! @internal

  """
  The HTTP URL to leave the team
  """
  leaveUrl: URI! @internal

  """
  The team does not have one or more external mappings
  """
  locallyManaged: Boolean! @internal

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for user statuses returned from the connection.
    """
    orderBy: UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): UserStatusConnection!

  """
  The HTTP path for team member suggestions
  """
  memberSuggestionsResourcePath: URI! @internal

  """
  The HTTP URL for team member suggestions
  """
  memberSuggestionsUrl: URI! @internal

  """
  The HTTP path for team member toolbar actions
  """
  memberToolbarActionsResourcePath: URI! @internal

  """
  The HTTP URL for team member toolbar actions
  """
  memberToolbarActionsUrl: URI! @internal

  """
  A list of users who are members of this team.
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The maximum number of team members to retrieve
    """
    maxMembersLimit: Int = 75000 @internal

    """
    Filter by membership type
    """
    membership: TeamMembershipType = ALL

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Order for the connection.
    """
    orderBy: TeamMemberOrder

    """
    The search string to look for.
    """
    query: String

    """
    Filter by team member role
    """
    role: TeamMemberRole
  ): TeamMemberConnection!

  """
  The HTTP path for the team' members
  """
  membersResourcePath: URI!

  """
  The HTTP URL for the team' members
  """
  membersUrl: URI!

  """
  A list of pending membership requests for this team.
  """
  membershipRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamMembershipRequestConnection! @internal

  """
  The HTTP path for migrating legacy admin teams
  """
  migrateLegacyAdminTeamResourcePath: URI! @internal

  """
  The HTTP URL for migrating legacy admin teams
  """
  migrateLegacyAdminTeamUrl: URI! @internal

  """
  The HTTP path for moving a child team under this team
  """
  moveChildTeamResourcePath: URI! @internal

  """
  The HTTP URL for moving a child team under this team
  """
  moveChildTeamUrl: URI! @internal

  """
  The name of the team.
  """
  name: String!

  """
  The HTTP path creating a new team
  """
  newChildTeamResourcePath: URI! @internal

  """
  The HTTP URL creating a new team
  """
  newChildTeamUrl: URI! @internal

  """
  The HTTP path creating a new team
  """
  newTeamResourcePath: URI!

  """
  The HTTP URL creating a new team
  """
  newTeamUrl: URI!

  """
  The organization that owns this team.
  """
  organization: Organization!

  """
  The parent team of the team.
  """
  parentTeam: Team

  """
  A list of pending requests to move teams to another parent team.
  """
  pendingTeamChangeParentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    The direction for the change requests to return
    """
    direction: TeamChangeParentRequestDirection = ALL

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamChangeParentRequestConnection! @internal

  """
  The legacy team permission.
  """
  permission: LegacyTeamPermission
    @deprecated(
      reason: "The permission attr is a legacy value. Use team member roles and team repo permissions instead. Removal on 2018-07-01 UTC."
    )
    @internal

  """
  The level of privacy the team has.
  """
  privacy: TeamPrivacy!

  """
  The HTTP path for team project toolbar actions
  """
  projectToolbarActionsResourcePath: URI! @internal

  """
  The HTTP URL for team project toolbar actions
  """
  projectToolbarActionsUrl: URI! @internal

  """
  A list of projects this team has access to.
  """
  projects(
    """
    Filter by affiliation
    """
    affiliation: TeamProjectType = ALL @internal

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only get the project with this ID
    """
    id: ID @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): TeamProjectConnection! @internal

  """
  The HTTP path for this team's projects
  """
  projectsResourcePath: URI! @internal

  """
  The HTTP URL for this team's projects
  """
  projectsUrl: URI! @internal

  """
  The HTTP path for removing team repositories in bulk
  """
  removeTeamRepositoriesResourcePath: URI! @internal

  """
  The HTTP URL for removing team repositories in bulk
  """
  removeTeamRepositoriesUrl: URI! @internal

  """
  A list of repositories this team has access to.
  """
  repositories(
    """
    Filter by affiliation
    """
    affiliation: TeamRepositoryType = ALL @internal

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Order for the connection.
    """
    orderBy: TeamRepositoryOrder

    """
    The search string to look for.
    """
    query: String
  ): TeamRepositoryConnection!

  """
  The HTTP path for this team's repositories
  """
  repositoriesResourcePath: URI!

  """
  The HTTP URL for this team's repositories
  """
  repositoriesUrl: URI!

  """
  The HTTP path for team repository toolbar actions
  """
  repositoryToolbarActionsResourcePath: URI! @internal

  """
  The HTTP URL for team repository toolbar actions
  """
  repositoryToolbarActionsUrl: URI! @internal

  """
  The HTTP path to request team membership
  """
  requestMembershipResourcePath: URI! @internal

  """
  The HTTP URL to request team membership
  """
  requestMembershipUrl: URI! @internal

  """
  The HTTP path for this team
  """
  resourcePath: URI!

  """
  What algorithm is used for review assignment for this team
  """
  reviewRequestDelegationAlgorithm: TeamReviewAssignmentAlgorithm

  """
  When assigning team members via delegation, count existing member requests against the number of required members.
  """
  reviewRequestDelegationCountMembersAlreadyRequested: Boolean! @underDevelopment(since: "2021-04-03")

  """
  True if review assignment is enabled for this team
  """
  reviewRequestDelegationEnabled: Boolean!

  """
  When assigning team members via delegation, whether any child team members should be included in assignment.
  """
  reviewRequestDelegationIncludeChildTeamMembers: Boolean! @underDevelopment(since: "2021-03-19")

  """
  How many team members are required for review assignment for this team
  """
  reviewRequestDelegationMemberCount: Int

  """
  When assigning team members via delegation, whether the entire team should be notified as well.
  """
  reviewRequestDelegationNotifyTeam: Boolean!

  """
  When assigning team members via delegation, whether the review request to the team should be removed.
  """
  reviewRequestDelegationRemoveTeamRequest: Boolean! @underDevelopment(since: "2021-02-03")

  """
  The slug corresponding to the team.
  """
  slug: String!

  """
  The HTTP path for stafftools for this team
  """
  stafftoolsResourcePath: URI! @internal

  """
  The HTTP URL for stafftools for this team
  """
  stafftoolsUrl: URI! @internal

  """
  The HTTP path for suggesting org projects to add to this team
  """
  teamProjectsSuggestionsResourcePath: URI! @internal

  """
  The HTTP URL for suggesting org projects to add to this team
  """
  teamProjectsSuggestionsUrl: URI! @internal

  """
  The HTTP path for suggesting org repositories to add to this team
  """
  teamRepositoriesSuggestionsResourcePath: URI! @internal

  """
  The HTTP URL for suggesting org repositories to add to this team
  """
  teamRepositoriesSuggestionsUrl: URI! @internal

  """
  The HTTP path for this team's teams
  """
  teamsResourcePath: URI!

  """
  The HTTP path for team toolbar actions
  """
  teamsToolbarActionsResourcePath: URI! @internal

  """
  The HTTP URL for team toolbar actions
  """
  teamsToolbarActionsUrl: URI! @internal

  """
  The HTTP URL for this team's teams
  """
  teamsUrl: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this team
  """
  url: URI!

  """
  Team is adminable by the viewer.
  """
  viewerCanAdminister: Boolean!

  """
  Team post is allowed to created by the viewer.
  """
  viewerCanCreateTeamPost: Boolean! @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Identifies if the viewer can leave, join, or cancel membership to this team
  """
  viewerMembership: TeamMembershipState! @internal

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  The websocket channel ID for team discussion live updates.
  """
  websocket: String! @internal
}

"""
Audit log entry for a team.add_member event.
"""
type TeamAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.add_repository event.
"""
type TeamAddRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Metadata for an audit entry with action team.*
"""
interface TeamAuditEntryData @serviceMapping(to: "github/audit_logs") {
  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI
}

"""
Requests to change the parent team of a team.
"""
type TeamChangeParentRequest implements Node @internal {
  """
  The HTTP path for approving this team change parent request
  """
  approveResourcePath: URI!

  """
  The HTTP URL for approving this team change parent request
  """
  approveUrl: URI!

  """
  Is the request approved?
  """
  approved: Boolean!

  """
  User that approved the request to change the parent team.
  """
  approvedBy: User

  """
  The HTTP path for cancelling this team change parent request
  """
  cancelResourcePath: URI!

  """
  The HTTP URL for cancelling this team change parent request
  """
  cancelUrl: URI!

  """
  The team that will be adopted
  """
  childTeam: Team!
  id: ID!

  """
  The team that will become the parent of the child team
  """
  parentTeam: Team!

  """
  The team that was requested in this parent change
  """
  requestedTeam: Team!

  """
  User requesting to change the parent team.
  """
  requester: User!

  """
  The team that requested this parent change
  """
  requestingTeam: Team!
}

"""
The connection type for TeamChangeParentRequest.
"""
type TeamChangeParentRequestConnection @internal {
  """
  A list of edges.
  """
  edges: [TeamChangeParentRequestEdge]

  """
  A list of nodes.
  """
  nodes: [TeamChangeParentRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Direction of the team change request
"""
enum TeamChangeParentRequestDirection @internal {
  """
  All requests
  """
  ALL

  """
  Child-initiated requests to be approved by a maintainer of this team
  """
  INBOUND_CHILD_INITIATED

  """
  Parent-initiated requests to be approved by a maintainer of this team
  """
  INBOUND_PARENT_INITIATED

  """
  Child-initiated requests originated from this team
  """
  OUTBOUND_CHILD_INITIATED

  """
  Parent-initiated requests originated from this team
  """
  OUTBOUND_PARENT_INITIATED
}

"""
An edge in a connection.
"""
type TeamChangeParentRequestEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamChangeParentRequest
}

"""
Audit log entry for a team.change_parent_team event.
"""
type TeamChangeParentTeamAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The new parent team.
  """
  parentTeam: Team

  """
  The ID of the new parent team
  """
  parentTeamDatabaseId: Int @internal

  """
  The ID of the former parent team
  """
  parentTeamDatabaseIdWas: Int @internal

  """
  The name of the new parent team
  """
  parentTeamName: String

  """
  The name of the former parent team
  """
  parentTeamNameWas: String

  """
  The HTTP path for the parent team
  """
  parentTeamResourcePath: URI

  """
  The HTTP URL for the parent team
  """
  parentTeamUrl: URI

  """
  The former parent team.
  """
  parentTeamWas: Team

  """
  The HTTP path for the previous parent team
  """
  parentTeamWasResourcePath: URI

  """
  The HTTP URL for the previous parent team
  """
  parentTeamWasUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.change_privacy event.
"""
type TeamChangePrivacyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The privacy setting of the team
  """
  privacy: TeamChangePrivacyAuditEntryPrivacy

  """
  The former privacy setting of the team
  """
  privacyWas: TeamChangePrivacyAuditEntryPrivacy

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The possible team privacy values.
"""
enum TeamChangePrivacyAuditEntryPrivacy
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  The team is only visible to its members.
  """
  SECRET

  """
  The team is visible to every member of the organization.
  """
  VISIBLE
}

"""
The connection type for Team.
"""
type TeamConnection @serviceMapping(to: "github/teams") {
  """
  A list of edges.
  """
  edges: [TeamEdge]

  """
  A list of nodes.
  """
  nodes: [Team]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Audit log entry for a team.create event.
"""
type TeamCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.delete event.
"""
type TeamDeleteAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.destroy event.
"""
type TeamDestroyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
A team discussion.
"""
type TeamDiscussion implements Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/team_discussions")
  @useNextGlobalIdFormat(after: "2021-07-11") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the discussion's team.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the discussion body hash.
  """
  bodyVersion: String!

  """
  Type of comment
  """
  commentType: String! @internal

  """
  A list of comments on this discussion.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Order for connection
    """
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection!

  """
  The HTTP path for discussion comments
  """
  commentsResourcePath: URI!

  """
  The HTTP URL for discussion comments
  """
  commentsUrl: URI!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Whether or not the discussion is pinned.
  """
  isPinned: Boolean!

  """
  Whether or not the discussion is only visible to team members and org admins.
  """
  isPrivate: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Identifies the discussion within its team.
  """
  number: Int!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The HTTP path for this discussion
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  The team that defines the context of this discussion.
  """
  team: Team!

  """
  The title of the discussion
  """
  title: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this discussion
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Whether or not the current viewer can pin this discussion.
  """
  viewerCanPin: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the viewer should be able to unsubscribe from this Subscribable.
  """
  viewerCanUnsubscribe: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  The websocket channel ID for discussions live updates.
  """
  websocket: String! @internal
}

"""
A comment on a team discussion.
"""
type TeamDiscussionComment implements Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment
  @serviceMapping(to: "github/team_discussions")
  @useNextGlobalIdFormat(after: "2021-07-11") {
  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Author's association with the comment's team.
  """
  authorAssociation: CommentAuthorAssociation!

  """
  The sponsorship between the comment author and the associated repo owner.
  """
  authorSponsorshipForSubjectOwner: Sponsorship @internal

  """
  Did the comment author also author the comment subject.
  """
  authoredBySubjectAuthor: Boolean! @internal

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML(
    """
    Whether or not to include the HTML for code blobs
    """
    hideCodeBlobs: Boolean = false

    """
    Whether or not to include a suggested changes ID in the HTML
    """
    includeSuggestedChangesId: Boolean = false

    """
    Whether or not to include the HTML for suggested changes
    """
    renderSuggestedChangesAsText: Boolean = false

    """
    Whether or not to turn video tags into links in the HTML
    """
    scrubVideo: Boolean

    """
    Whether or not to turn references into status icon and title in the HTML
    """
    unfurlReferences: Boolean = false
  ): HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  The current version of the body content.
  """
  bodyVersion: String!

  """
  Type of comment
  """
  commentType: String! @internal

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The discussion this comment is about.
  """
  discussion: TeamDiscussion!

  """
  The actor who edited the comment.
  """
  editor: Actor
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  The last edit to this content.
  """
  lastUserContentEdit: UserContentEdit @underDevelopment(since: "2018-09-06")

  """
  Identifies the comment number.
  """
  number: Int!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Admin user that can allow or disallow reactions to this type.
  """
  reactionAdmin: Actor! @internal

  """
  A list of reactions grouped by content left on the subject.
  """
  reactionGroups: [ReactionGroup!]

  """
  Path for building URLs to scope and route reactions appropriately.
  """
  reactionPath: String! @internal

  """
  A list of Reactions left on the Issue.
  """
  reactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Allows filtering Reactions by emoji.
    """
    content: ReactionContent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Allows specifying the order in which reactions are returned.
    """
    orderBy: ReactionOrder
  ): ReactionConnection!

  """
  The HTTP path for this comment
  """
  resourcePath: URI!

  """
  Returns a truncated version of the body, rendered as HTML.
  """
  shortBodyHTML(
    """
    Limit the length of the returned HTML.
    """
    limit: Int = 150
  ): HTML! @underDevelopment(since: "2018-10-05")

  """
  Should the viewer see the edit history onboarding
  """
  showEditHistoryOnboarding: Boolean! @internal

  """
  Should the viewer see the first contribution prompt
  """
  showFirstContributionPrompt: Boolean! @internal

  """
  Check if this comment is spammy.
  """
  spammy: Boolean! @internal

  """
  The URL for the content in stafftools for moderation purposes
  """
  stafftoolsUrl: URI @internal

  """
  The comment's subject id.
  """
  subjectId: ID @internal

  """
  The comment subject type.
  """
  subjectType: String @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this comment
  """
  url: URI!

  """
  A list of edits to this content.
  """
  userContentEdits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserContentEditConnection

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if this comment's edits may be shown to the viewer.
  """
  viewerCanReadUserContentEdits: Boolean! @internal

  """
  Check if the viewer should see the delete button in the UI.
  """
  viewerCanSeeDeleteButton: Boolean! @internal

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for TeamDiscussionComment.
"""
type TeamDiscussionCommentConnection @serviceMapping(to: "github/team_discussions") {
  """
  A list of edges.
  """
  edges: [TeamDiscussionCommentEdge]

  """
  A list of nodes.
  """
  nodes: [TeamDiscussionComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamDiscussionCommentEdge @serviceMapping(to: "github/team_discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamDiscussionComment
}

"""
Ways in which team discussion comment connections can be ordered.
"""
input TeamDiscussionCommentOrder @serviceMapping(to: "github/team_discussions") {
  """
  The direction in which to order nodes.
  """
  direction: OrderDirection!

  """
  The field by which to order nodes.
  """
  field: TeamDiscussionCommentOrderField!
}

"""
Properties by which team discussion comment connections can be ordered.
"""
enum TeamDiscussionCommentOrderField @serviceMapping(to: "github/team_discussions") {
  """
  Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
  """
  NUMBER
}

"""
The connection type for TeamDiscussion.
"""
type TeamDiscussionConnection @serviceMapping(to: "github/team_discussions") {
  """
  A list of edges.
  """
  edges: [TeamDiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [TeamDiscussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamDiscussionEdge @serviceMapping(to: "github/team_discussions") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamDiscussion
}

"""
Ways in which team discussion connections can be ordered.
"""
input TeamDiscussionOrder @serviceMapping(to: "github/team_discussions") {
  """
  The direction in which to order nodes.
  """
  direction: OrderDirection!

  """
  The field by which to order nodes.
  """
  field: TeamDiscussionOrderField!
}

"""
Properties by which team discussion connections can be ordered.
"""
enum TeamDiscussionOrderField @serviceMapping(to: "github/team_discussions") {
  """
  Allows chronological ordering of team discussions.
  """
  CREATED_AT
}

"""
An edge in a connection.
"""
type TeamEdge @serviceMapping(to: "github/teams") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Team
}

"""
Maps a group to a Team, used as part of Team Sync
"""
type TeamGroupMapping @underDevelopment(since: "2019-04-23") @serviceMapping(to: "github/teams") {
  """
  The group description.
  """
  groupDescription: String

  """
  The group identifier.
  """
  groupId: String!

  """
  The group name.
  """
  groupName: String!

  """
  The timestamp of the most recent sync.
  """
  syncedAt: DateTime

  """
  The Team this group is mapped to.
  """
  teamId: Int!
}

"""
The connection type for TeamGroupMapping.
"""
type TeamGroupMappingConnection @underDevelopment(since: "2019-04-23") @serviceMapping(to: "github/teams") {
  """
  A list of edges.
  """
  edges: [TeamGroupMappingEdge]

  """
  A list of nodes.
  """
  nodes: [TeamGroupMapping]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamGroupMappingEdge @underDevelopment(since: "2019-04-23") @serviceMapping(to: "github/teams") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamGroupMapping
}

"""
Ordering options for team group mapping connections
"""
input TeamGroupMappingOrder @underDevelopment(since: "2019-04-23") @serviceMapping(to: "github/teams") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order team group mappings by.
  """
  field: TeamGroupMappingOrderField!
}

"""
Properties by which team group mappings connections can be ordered.
"""
enum TeamGroupMappingOrderField @underDevelopment(since: "2019-04-23") @serviceMapping(to: "github/teams") {
  """
  Order group mappings by creation timestamp
  """
  CREATED_AT

  """
  Order group mappings by group ID
  """
  GROUP_ID

  """
  Order group mappings by group name
  """
  GROUP_NAME

  """
  Order group mappings by ID
  """
  ID

  """
  Order group mappings by sync timestamp
  """
  SYNCED_AT
}

"""
The connection type for User.
"""
type TeamMemberConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [TeamMemberEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user who is a member of a team.
"""
type TeamMemberEdge @serviceMapping(to: "github/shared") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The HTTP path to the organization's member access page.
  """
  memberAccessResourcePath: URI!

  """
  The HTTP URL to the organization's member access page.
  """
  memberAccessUrl: URI!
  node: User!

  """
  The role the member has on the team.
  """
  role: TeamMemberRole!
}

"""
Ordering options for team member connections
"""
input TeamMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order team members by.
  """
  field: TeamMemberOrderField!
}

"""
Properties by which team member connections can be ordered.
"""
enum TeamMemberOrderField {
  """
  Order team members by creation time
  """
  CREATED_AT

  """
  Order team members by login
  """
  LOGIN

  """
  Order team members by relevance to the viewer
  """
  RELEVANCE @underDevelopment(since: "2018-11-06")
}

"""
The possible team member roles; either 'maintainer' or 'member'.
"""
enum TeamMemberRole {
  """
  A team maintainer has permission to add and remove team members.
  """
  MAINTAINER

  """
  A team member has no administrative permissions on the team.
  """
  MEMBER
}

"""
Filters teams based on members. Can be one of ME or EMPTY.
"""
enum TeamMembersFilter @internal {
  """
  Includes teams that have no members.
  """
  EMPTY

  """
  Includes teams that the viewer is a member of.
  """
  ME
}

"""
Membership requests for a team.
"""
type TeamMembershipRequest implements Node @internal {
  id: ID!

  """
  User requesting membership.
  """
  requester: User
}

"""
The connection type for TeamMembershipRequest.
"""
type TeamMembershipRequestConnection @internal {
  """
  A list of edges.
  """
  edges: [TeamMembershipRequestEdge]

  """
  A list of nodes.
  """
  nodes: [TeamMembershipRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamMembershipRequestEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamMembershipRequest
}

"""
The possible team membership state values.
"""
enum TeamMembershipState @internal {
  """
  The user can join the team.
  """
  JOIN

  """
  The user must be added or removed from the mapped LDAP Group
  """
  LDAP_MAPPED

  """
  The user can leave the team.
  """
  LEAVE

  """
  The user can not leave the team.
  """
  LEAVE_DISABLED

  """
  The user can request to join the team.
  """
  REQUEST_MEMBERSHIP

  """
  The user has requested to join the team.
  """
  REQUEST_PENDING
}

"""
Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
"""
enum TeamMembershipType {
  """
  Includes immediate and child team members for the team.
  """
  ALL

  """
  Includes only child team members for the team.
  """
  CHILD_TEAM

  """
  Includes only immediate members of the team.
  """
  IMMEDIATE
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  """
  The direction in which to order nodes.
  """
  direction: OrderDirection!

  """
  The field in which to order nodes by.
  """
  field: TeamOrderField!
}

"""
Properties by which team connections can be ordered.
"""
enum TeamOrderField {
  """
  Allows ordering a list of teams by name.
  """
  NAME
}

"""
The possible team privacy values.
"""
enum TeamPrivacy {
  """
  A secret team can only be seen by its members.
  """
  SECRET

  """
  A visible team can be seen and @mentioned by every member of the organization.
  """
  VISIBLE
}

"""
The connection type for Project.
"""
type TeamProjectConnection @serviceMapping(to: "github/projects") {
  """
  A list of edges.
  """
  edges: [TeamProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a connection between a team (parent) and a project (child).
"""
type TeamProjectEdge @internal @serviceMapping(to: "github/projects") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The inherited permission level the team has on the project
  """
  inheritedPermission: ProjectPermission

  """
  The parent team that grants inherited permission to this project
  """
  inheritedPermissionOrigin: Team

  """
  The item at the end of the edge.
  """
  node: Project

  """
  The permission level the team has on the project
  """
  permission: ProjectPermission!

  """
  The HTTP path for this team's project
  """
  teamProjectResourcePath: URI!

  """
  The HTTP URL for this team's project
  """
  teamProjectUrl: URI!
}

"""
Defines which types of team projects are included in the returned list. Can be one of IMMEDIATE, INHERITED or ALL.
"""
enum TeamProjectType @internal @serviceMapping(to: "github/projects") {
  """
  Includes immediate and inherited projects for the team.
  """
  ALL

  """
  Includes only immediate projects of the team.
  """
  IMMEDIATE

  """
  Includes only inherited projects for the team.
  """
  INHERITED
}

"""
Audit log entry for a team.remove_member event.
"""
type TeamRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.remove_repository event.
"""
type TeamRemoveRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Audit log entry for a team.rename event.
"""
type TeamRenameAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  The former name of the team.
  """
  nameWas: String

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The connection type for Repository.
"""
type TeamRepositoryConnection @serviceMapping(to: "github/repo_info") {
  """
  A list of edges.
  """
  edges: [TeamRepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a team repository.
"""
type TeamRepositoryEdge @serviceMapping(to: "github/repo_info") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The inherited permission level the team has on the repository
  """
  inheritedPermission: RepositoryPermission @internal

  """
  The parent team that grants inherited permission to this repository
  """
  inheritedPermissionOrigin: Team @internal
  node: Repository!

  """
  The permission level the team has on the repository
  """
  permission: RepositoryPermission!

  """
  The HTTP path for this team's repository
  """
  teamRepositoryResourcePath: URI! @internal

  """
  The HTTP URL for this team's repository
  """
  teamRepositoryUrl: URI! @internal
}

"""
Ordering options for team repository connections
"""
input TeamRepositoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order repositories by.
  """
  field: TeamRepositoryOrderField!
}

"""
Properties by which team repository connections can be ordered.
"""
enum TeamRepositoryOrderField {
  """
  Order repositories by creation time
  """
  CREATED_AT

  """
  Order repositories by name
  """
  NAME

  """
  Order repositories by permission
  """
  PERMISSION

  """
  Order repositories by push time
  """
  PUSHED_AT

  """
  Order repositories by number of stargazers
  """
  STARGAZERS

  """
  Order repositories by update time
  """
  UPDATED_AT
}

"""
Defines which types of team repositories are included in the returned list. Can be one of IMMEDIATE, INHERITED or ALL.
"""
enum TeamRepositoryType @internal {
  """
  Includes immediate and inherited repositories for the team.
  """
  ALL

  """
  Includes only immediate repositories of the team.
  """
  IMMEDIATE

  """
  Includes only inherited repositories for the team.
  """
  INHERITED
}

"""
The possible team review assignment algorithms
"""
enum TeamReviewAssignmentAlgorithm @serviceMapping(to: "github/pull_request_reviews") {
  """
  Balance review load across the entire team
  """
  LOAD_BALANCE

  """
  Alternate reviews between each team member
  """
  ROUND_ROBIN
}

"""
The role of a user on a team.
"""
enum TeamRole {
  """
  User has admin rights on the team.
  """
  ADMIN

  """
  User is a member of the team.
  """
  MEMBER
}

"""
Audit log entry for a team.update_permission event.
"""
type TeamUpdatePermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The permission level of the team
  """
  permission: TeamUpdatePermissionAuditEntryPermission

  """
  The former permission level of the team
  """
  permissionWas: TeamUpdatePermissionAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
Permissions available for members of a team.
"""
enum TeamUpdatePermissionAuditEntryPermission
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators to repositories.
  """
  ADMIN

  """
  Can read and clone repositories.
  """
  PULL

  """
  Can read, clone and push to repositories.
  """
  PUSH
}

"""
Audit log entry for a team.update_repository_permission event.
"""
type TeamUpdateRepositoryPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  Whether the team was mapped to an LDAP Group.
  """
  isLdapMapped: Boolean

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  The Organization associated with the Audit Entry.
  """
  organization: Organization

  """
  The database ID of the Organization.
  """
  organizationDatabaseId: Int @internal

  """
  The name of the Organization.
  """
  organizationName: String

  """
  The HTTP path for the organization
  """
  organizationResourcePath: URI

  """
  The HTTP URL for the organization
  """
  organizationUrl: URI

  """
  The permission level team members have on this repository
  """
  permission: TeamUpdateRepositoryPermissionAuditEntryPermission

  """
  The former permission level team members had on this repository
  """
  permissionWas: TeamUpdateRepositoryPermissionAuditEntryPermission

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  The repository associated with the action
  """
  repository: Repository

  """
  The database ID of the repository
  """
  repositoryDatabaseId: Int @internal

  """
  The name of the repository
  """
  repositoryName: String

  """
  The HTTP path for the repository
  """
  repositoryResourcePath: URI

  """
  The HTTP URL for the repository
  """
  repositoryUrl: URI

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The team associated with the action
  """
  team: Team

  """
  The database ID of the team
  """
  teamDatabaseId: Int @internal

  """
  The name of the team
  """
  teamName: String

  """
  The HTTP path for this team
  """
  teamResourcePath: URI

  """
  The HTTP URL for this team
  """
  teamUrl: URI

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
The permissions a team has on a repository.
"""
enum TeamUpdateRepositoryPermissionAuditEntryPermission
  @underDevelopment(since: "2019-04-30")
  @serviceMapping(to: "github/audit_logs") {
  """
  Can read, clone, push, and add collaborators to the repository.
  """
  ADMIN

  """
  Can read and clone the repository.
  """
  PULL

  """
  Can read, clone and push the repository.
  """
  PUSH
}

"""
Entities that return contents of a text tree entry.
"""
interface TextFile @serviceMapping(to: "github/repo_info") {
  """
  The raw content of the markdown.
  """
  contentRaw: String

  """
  The lines for this file.
  """
  fileLines: [FileLine]
}

"""
Represents a text file.
"""
type TextFileType implements TextFile @serviceMapping(to: "github/repo_info") {
  """
  Syntax highlighted html for the tree entry
  """
  contentHTML: HTML

  """
  The raw content of the markdown.
  """
  contentRaw: String

  """
  The lines for this file.
  """
  fileLines: [FileLine]
}

"""
A text match within a search result.
"""
type TextMatch {
  """
  The specific text fragment within the property matched on.
  """
  fragment: String!

  """
  Highlights within the matched fragment.
  """
  highlights: [TextMatchHighlight!]!

  """
  The property matched on.
  """
  property: String!
}

"""
Represents a single highlight in a search result match.
"""
type TextMatchHighlight {
  """
  The indice in the fragment where the matched text begins.
  """
  beginIndice: Int!

  """
  The indice in the fragment where the matched text ends.
  """
  endIndice: Int!

  """
  The text matched.
  """
  text: String!
}

"""
The possible errors that will prevent a user from replying to a thread.
"""
enum ThreadCannotReplyReason @internal {
  """
  Unable to reply to this thread because the repository is archived.
  """
  ARCHIVED

  """
  Unable to reply to this thread because the thread is locked.
  """
  LOCKED

  """
  You must be logged in to reply to this thread.
  """
  LOGIN_REQUIRED

  """
  Unable to reply to this thread because it's missing git objects.
  """
  MISSING_OBJECTS

  """
  Unable to reply to this thread because it's a reference to another thread.
  """
  REPLY

  """
  At least one email address must be verified to reply to this thread.
  """
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents an event on the timeline of an issue or pull request.
"""
interface TimelineEvent @internal @serviceMapping(to: "github/issues") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!
}

"""
A feature that is toggleable by an actor
"""
type ToggleableFeature implements Node
  @underDevelopment(since: "2019-04-03")
  @serviceMapping(to: "github/feature_management") {
  """
  The description for the toggleable feature.
  """
  description: String

  """
  The associated documentation URL.
  """
  documentationUrl: URI @internal

  """
  When true, all users who have access to the feature (via Flipper gates, or if
  no FlipperFeature is associated) are enrolled by default and must opt out to turn off.
  """
  enrolledByDefault: Boolean! @internal

  """
  A URL pointing to the feedback link for the toggleable feature.
  """
  feedbackUrl: URI
  id: ID!

  """
  The associated image URL.
  """
  imageUrl: URI @internal

  """
  The public name for the toggleable feature.
  """
  publicName: String!

  """
  The slug for the toggleable feature.
  """
  slug: String! @internal

  """
  Whether the viewer is enrolled in the feature.
  """
  viewerIsEnrolled: Boolean!

  """
  Whether the viewer has explicitly opted out of the feature.
  """
  viewerOptedOut: Boolean!
}

"""
The connection type for ToggleableFeature.
"""
type ToggleableFeatureConnection
  @underDevelopment(since: "2019-04-03")
  @serviceMapping(to: "github/feature_management") {
  """
  A list of edges.
  """
  edges: [ToggleableFeatureEdge]

  """
  A list of nodes.
  """
  nodes: [ToggleableFeature]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ToggleableFeatureEdge @underDevelopment(since: "2019-04-03") @serviceMapping(to: "github/feature_management") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ToggleableFeature
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable
  @serviceMapping(to: "github/topics")
  @useNextGlobalIdFormat(after: "2021-09-21") {
  """
  The topic that has this topic as an alias, if any.
  """
  aliasSourceTopic: Topic @internal

  """
  When the topic record was created on GitHub.
  """
  createdAt: DateTime @underDevelopment(since: "2018-10-08")

  """
  The person, people, or group that created the subject this topic is about.
  """
  createdBy: String @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  Returns a description of this topic.
  """
  description: String @internal

  """
  The description of the topic rendered to HTML.
  """
  descriptionHTML: HTML! @internal

  """
  Returns the properly capitalized display name of this topic if one is known, otherwise
  returns the topic's name.
  """
  displayName: String! @internal

  """
  A link to a website about this topic.
  """
  externalUrl: URI @internal

  """
  Returns a string describing the amount of time that has elapsed since the relevant
  repository's latest release.
  """
  formattedDaysSinceLatestRelease: String @internal

  """
  A link to a GitHub repository or organization for this topic.
  """
  githubUrl: URI @internal
  id: ID!

  """
  Whether this topic has additional curated content, such as a short description.
  """
  isCurated: Boolean! @internal

  """
  Whether this topic is featured on GitHub.
  """
  isFeatured: Boolean! @internal

  """
  Whether the topic has been flagged as objectionable.
  """
  isFlagged: Boolean! @internal

  """
  Returns true if the GitHub URL is to a repository.
  """
  isGithubUrlARepository: Boolean @internal

  """
  Returns the latest release for this topic.
  """
  latestRelease: Release @internal

  """
  Returns the URL for an image representing this topic.
  """
  logoUrl: URI @internal

  """
  The topic's name.
  """
  name: String!

  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first. Returns up to 10 Topics.
  """
  relatedTopics(
    """
    How many topics to return.
    """
    first: Int = 3
  ): [Topic!]!

  """
  When the subject of this topic was first released or created.
  """
  released: String @internal

  """
  A list of repositories.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-12-06")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-12-06")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-12-06")
  ): RepositoryConnection! @underDevelopment(since: "2018-12-06") @serviceMapping(to: "github/repo_info")

  """
  The HTTP path for this topic.
  """
  resourcePath: URI! @internal

  """
  Returns a short description of this topic.
  """
  shortDescription: String @internal

  """
  Fields that are only visible to site admins.
  """
  stafftoolsInfo: TopicStafftoolsInfo

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  The HTTP URL for this topic.
  """
  url: URI! @internal

  """
  Returns a boolean indicating whether the viewing user has the ability to star this starrable.
  """
  viewerCanStar: Boolean! @underDevelopment(since: "2020-05-18")

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!

  """
  A link to a Wikipedia page about this topic.
  """
  wikipediaUrl: URI @internal
}

"""
Metadata for an audit entry with a topic.
"""
interface TopicAuditEntryData @serviceMapping(to: "github/audit_logs") {
  """
  The name of the topic added to the repository
  """
  topic: Topic

  """
  The database ID of the added topic
  """
  topicDatabaseId: Int @internal

  """
  The name of the topic added to the repository
  """
  topicName: String

  """
  The HTTP path for this topic.
  """
  topicResourcePath: URI @internal

  """
  The HTTP URL for this topic.
  """
  topicUrl: URI @internal
}

"""
The connection type for Topic.
"""
type TopicConnection @serviceMapping(to: "github/topics") {
  """
  A list of edges.
  """
  edges: [TopicEdge]

  """
  A list of nodes.
  """
  nodes: [Topic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TopicEdge @serviceMapping(to: "github/topics") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Topic
}

"""
Ordering options for topic connections.
"""
input TopicOrder @internal @serviceMapping(to: "github/topics") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order topics by.
  """
  field: TopicOrderField!
}

"""
Properties by which topic connections can be ordered.
"""
enum TopicOrderField @internal @serviceMapping(to: "github/topics") {
  """
  Order topics by creation time
  """
  CREATED_AT

  """
  Order topics by name
  """
  NAME

  """
  Order topics by update time
  """
  UPDATED_AT
}

"""
Topic information only visible to site admins
"""
type TopicStafftoolsInfo @internal @serviceMapping(to: "github/topics") {
  """
  Indicates whether the topic is flagged.
  """
  isFlagged: Boolean!
}

"""
Reason that the suggested topic is declined.
"""
enum TopicSuggestionDeclineReason @serviceMapping(to: "github/topics") {
  """
  The suggested topic is not relevant to the repository.
  """
  NOT_RELEVANT

  """
  The viewer does not like the suggested topic.
  """
  PERSONAL_PREFERENCE

  """
  The suggested topic is too general for the repository.
  """
  TOO_GENERAL

  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC
}

"""
The possible states of a tracked issue.
"""
enum TrackedIssueStates @serviceMapping(to: "github/issues") {
  """
  The tracked issue is closed
  """
  CLOSED

  """
  The tracked issue is open
  """
  OPEN
}

"""
Autogenerated input type of TransferIssue
"""
input TransferIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the issue to be transferred
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  The Node ID of the repository the issue should be transferred to
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of TransferIssue
"""
type TransferIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-10-01")

  """
  The issue that was transferred
  """
  issue: Issue
}

"""
Autogenerated input type of TransferRepository
"""
input TransferRepositoryInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the new owner for the repository
  """
  newOwnerId: ID! @possibleTypes(concreteTypes: ["Organization", "User"], abstractType: "RepositoryOwner")

  """
  The ID of the repository to transfer
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The IDs of the teams for the repository
  """
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of TransferRepository
"""
type TransferRepositoryPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was transferred
  """
  repository: Repository
}

"""
Represents a 'transferred' event on a given issue or pull request.
"""
type TransferredEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The repository this came from
  """
  fromRepository: Repository
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Represents a Git tree.
"""
type Tree implements GitObject & Node {
  """
  An abbreviated version of the Git object ID
  """
  abbreviatedOid: String!

  """
  The HTTP path for this Git object
  """
  commitResourcePath: URI!

  """
  The HTTP URL for this Git object
  """
  commitUrl: URI!

  """
  A list of tree entries.
  """
  entries: [TreeEntry!]
  id: ID!

  """
  The Git object ID
  """
  oid: GitObjectID!

  """
  The Repository the Git object belongs to
  """
  repository: Repository!
}

"""
Represents a Git tree entry.
"""
type TreeEntry {
  """
  Syntax highlighted html for the tree entry
  """
  contentHTML: HTML

  """
  The extension of the file
  """
  extension: String

  """
  The lines for this file.
  """
  fileLines: [FileLine]

  """
  The TreeEntry file type object
  """
  fileType: File

  """
  Whether or not this tree entry is generated
  """
  isGenerated: Boolean!

  """
  Entry file mode.
  """
  mode: Int!

  """
  Entry file name.
  """
  name: String!

  """
  Entry file object.
  """
  object: GitObject

  """
  Entry file Git object ID.
  """
  oid: GitObjectID!

  """
  The full path of the file.
  """
  path: String

  """
  The Repository the tree entry belongs to
  """
  repository: Repository!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  submodule: Submodule

  """
  Entry file type.
  """
  type: String!

  """
  Workflow that represents this workflow file
  """
  workflow: Workflow @internal
}

"""
Entities that can trigger a workflow run.
"""
interface Trigger @internal @serviceMapping(to: "github/actions") {
  id: ID!
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
Autogenerated input type of UnarchiveProjectCard
"""
input UnarchiveProjectCardInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ProjectCard ID to unarchive.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UnarchiveProjectCard
"""
type UnarchiveProjectCardPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The unarchived ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the repository to unarchive.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnarchiveRepository
"""
type UnarchiveRepositoryPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was unarchived.
  """
  repository: Repository
}

"""
Represents an 'unassigned' event on any assignable object.
"""
type UnassignedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the assignable associated with the event.
  """
  assignable: Assignable!

  """
  Identifies the user or mannequin that was unassigned.
  """
  assignee: Assignee

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the subject (user) who was unassigned.
  """
  user: User
    @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnblockAccountsActionInvocation
"""
input UnblockAccountsActionInvocationInput @internal @serviceMapping(to: "github/actions") {
  """
  The global relay IDs of the accounts to unblock action invocation for.
  """
  accountIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnblockAccountsActionInvocation
"""
type UnblockAccountsActionInvocationPayload @internal @serviceMapping(to: "github/actions") {
  """
  The accounts for which action invocation was unblocked.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UnblockUserFromOrganization
"""
input UnblockUserFromOrganizationInput @serviceMapping(to: "github/orgs") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to unblock from
  """
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])

  """
  The ID of the user to unblock from the organization
  """
  unblockedUserId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of UnblockUserFromOrganization
"""
type UnblockUserFromOrganizationPayload @serviceMapping(to: "github/orgs") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-07-29")

  """
  The user who is being unblocked from the organization
  """
  unblockedUser: User

  """
  The user who is acting for the organization
  """
  viewer: User
}

"""
Autogenerated input type of UnblockUser
"""
input UnblockUserInput @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global relay ID of the account to unblock
  """
  userId: ID!
}

"""
Autogenerated return type of UnblockUser
"""
type UnblockUserPayload @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-07-15")

  """
  The user who is being unblocked
  """
  unblockedUser: User

  """
  The user who is doing the unblocking
  """
  viewer: User
}

"""
Autogenerated input type of UnenrollInToggleableFeature
"""
input UnenrollInToggleableFeatureInput
  @underDevelopment(since: "2019-04-10")
  @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the enrollee to enroll in the toggleable feature.
  """
  enrolleeId: ID! @possibleTypes(concreteTypes: ["User"])

  """
  The Node ID of the toggleable feature to be enrolled in.
  """
  toggleableFeatureId: ID! @possibleTypes(concreteTypes: ["ToggleableFeature"])
}

"""
Autogenerated return type of UnenrollInToggleableFeature
"""
type UnenrollInToggleableFeaturePayload
  @underDevelopment(since: "2019-04-10")
  @serviceMapping(to: "github/feature_management") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user toggling the feature
  """
  enrollee: User

  """
  The toggleable feature
  """
  toggleableFeature: ToggleableFeature
}

"""
Autogenerated input type of UnfollowUser
"""
input UnfollowUserInput @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to unfollow.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of UnfollowUser
"""
type UnfollowUserPayload @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user that was unfollowed.
  """
  user: User
}

"""
Represents a type that can be retrieved by a URL.
"""
interface UniformResourceLocatable {
  """
  The HTML path to this resource.
  """
  resourcePath: URI!

  """
  The URL to this resource.
  """
  url: URI!
}

"""
Represents an unknown signature on a Commit or Tag.
"""
type UnknownSignature implements GitSignature {
  """
  Email used to sign this object.
  """
  email: String!

  """
  True if the signature is valid and verified by GitHub.
  """
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """
  ASCII-armored signature header from object.
  """
  signature: String!

  """
  GitHub user corresponding to the email signing this commit.
  """
  signer: User

  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!

  """
  True if the signature was made with GitHub's signing key.
  """
  wasSignedByGitHub: Boolean!
}

"""
Represents an 'unlabeled' event on a given issue or pull request.
"""
type UnlabeledEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the label associated with the 'unlabeled' event.
  """
  label: Label!

  """
  Identifies the `Labelable` associated with the event.
  """
  labelable: Labelable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Project linked to the Repository.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the Repository linked to the Project.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UnlinkRepositoryFromProject
"""
type UnlinkRepositoryFromProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The linked Project.
  """
  project: Project

  """
  The linked Repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UnlockImportedRepositories
"""
input UnlockImportedRepositoriesInput @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the importing organization.
  """
  migrationId: ID! @possibleTypes(concreteTypes: ["LegacyMigration"])
}

"""
Autogenerated return type of UnlockImportedRepositories
"""
type UnlockImportedRepositoriesPayload @serviceMapping(to: "github/import_export") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The import migration.
  """
  migration: LegacyMigration

  """
  The repositories that were unlocked.
  """
  unlockedRepositories: [Repository!]
}

"""
Autogenerated input type of UnlockLockable
"""
input UnlockLockableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the item to be unlocked.
  """
  lockableId: ID! @possibleTypes(concreteTypes: ["Discussion", "Issue", "PullRequest"], abstractType: "Lockable")
}

"""
Autogenerated return type of UnlockLockable
"""
type UnlockLockablePayload {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that was unlocked.
  """
  unlockedRecord: Lockable
}

"""
Represents an 'unlocked' event on a given issue or pull request.
"""
type UnlockedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Object that was unlocked.
  """
  lockable: Lockable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnmarkDiscussionCommentAsAnswer
"""
input UnmarkDiscussionCommentAsAnswerInput @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion comment to unmark as an answer.
  """
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of UnmarkDiscussionCommentAsAnswer
"""
type UnmarkDiscussionCommentAsAnswerPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The discussion that includes the comment.
  """
  discussion: Discussion
}

"""
Autogenerated input type of UnmarkFileAsViewed
"""
input UnmarkFileAsViewedInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The path of the file to mark as unviewed
  """
  path: String!

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of UnmarkFileAsViewed
"""
type UnmarkFileAsViewedPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of UnmarkIssueAsDuplicate
"""
input UnmarkIssueAsDuplicateInput @serviceMapping(to: "github/issues") {
  """
  ID of the issue or pull request currently considered canonical/authoritative/original.
  """
  canonicalId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the issue or pull request currently marked as a duplicate.
  """
  duplicateId: ID! @possibleTypes(concreteTypes: ["Issue", "PullRequest"], abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of UnmarkIssueAsDuplicate
"""
type UnmarkIssueAsDuplicatePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The issue or pull request that was marked as a duplicate.
  """
  duplicate: IssueOrPullRequest
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: IssueOrPullRequest

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: IssueOrPullRequest
  id: ID!

  """
  Canonical and duplicate belong to different repositories.
  """
  isCrossRepository: Boolean!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnminimizeComment
"""
input UnminimizeCommentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the comment was minimized through stafftools.
  """
  isStaffActor: Boolean = false @internal

  """
  The reason the comment was unminimized
  """
  reason: String @internal

  """
  The Node ID of the subject to modify.
  """
  subjectId: ID!
    @possibleTypes(
      concreteTypes: ["CommitComment", "DiscussionComment", "GistComment", "IssueComment", "PullRequestReviewComment"]
      abstractType: "Minimizable"
    )
}

"""
Autogenerated return type of UnminimizeComment
"""
type UnminimizeCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The comment that was unminimized.
  """
  unminimizedComment: Minimizable
}

"""
Autogenerated input type of UnpinIssue
"""
input UnpinIssueInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the issue to be unpinned
  """
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

"""
Autogenerated return type of UnpinIssue
"""
type UnpinIssuePayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-12-04")

  """
  The issue that was unpinned
  """
  issue: Issue
}

"""
Represents an 'unpinned' event on a given issue or pull request.
"""
type UnpinnedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/issues")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Identifies the issue associated with the event.
  """
  issue: Issue!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnresolveReviewThread
"""
input UnresolveReviewThreadInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the thread to unresolve
  """
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

"""
Autogenerated return type of UnresolveReviewThread
"""
type UnresolveReviewThreadPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The thread to resolve.
  """
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of UnretireNamespace
"""
input UnretireNamespaceInput @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The retired repository name
  """
  name: String!

  """
  The owning user or organization's login
  """
  ownerLogin: String!
}

"""
Autogenerated return type of UnretireNamespace
"""
type UnretireNamespacePayload @internal @serviceMapping(to: "github/community_and_safety") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if unretiring the namespace succeeded
  """
  success: Boolean
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  Object referenced by event.
  """
  subscribable: Subscribable!

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
Autogenerated input type of UnsuspendAccounts
"""
input UnsuspendAccountsInput @internal @serviceMapping(to: "github/account_classification") {
  """
  The global relay id of accounts to unsuspend.
  """
  accountIds: [ID!]!
    @possibleTypes(concreteTypes: ["Bot", "Enterprise", "Mannequin", "Organization", "User"], abstractType: "Account")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The system that performed this classification.
  """
  origin: String = "origin_unknown"

  """
  Reason for unsuspending accounts.
  """
  reason: String!
}

"""
Autogenerated return type of UnsuspendAccounts
"""
type UnsuspendAccountsPayload @internal @serviceMapping(to: "github/account_classification") {
  """
  The unsuspended accounts.
  """
  accounts: [Account!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Entities that can be updated.
"""
interface Updatable {
  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!
}

"""
Comments that can be updated.
"""
interface UpdatableComment {
  """
  Reasons why the current viewer can not update this comment.
  """
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

"""
Autogenerated input type of UpdateBranchProtectionRule
"""
input UpdateBranchProtectionRuleInput @serviceMapping(to: "github/branch_protection_rule") {
  """
  Can this branch be deleted.
  """
  allowsDeletions: Boolean

  """
  Are force pushes allowed on this branch.
  """
  allowsForcePushes: Boolean

  """
  The global relay id of the branch protection rule to be updated.
  """
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: ["BranchProtectionRule"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """
  Whether approvals from users that have contributed to a pull request by pushing to its branch should be ignored.
  """
  ignoreApprovalsFromContributors: Boolean @internal

  """
  Can admins overwrite branch protection.
  """
  isAdminEnforced: Boolean

  """
  Limit of alternate path attempts for merge groups.
  """
  mergeQueueAlternatePaths: Int @internal

  """
  Limit of retries for failed check runs on queued entries.
  """
  mergeQueueCheckRunRetries: Int @internal

  """
  Maximum number of entries per merge group.
  """
  mergeQueueMaxGroupSize: Int @internal

  """
  Merge groups require manual approval
  """
  mergeQueueRequiresManualApproval: Boolean @internal

  """
  The glob-like pattern used to determine matching branches.
  """
  pattern: String

  """
  A list of User, Team or App IDs allowed to push to matching branches.
  """
  pushActorIds: [ID!]

  """
  Number of approving reviews required to update matching branches.
  """
  requiredApprovingReviewCount: Int

  """
  The list of required deployment environments
  """
  requiredDeploymentEnvironments: [String!] @internal

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """
  Are approving reviews required to update matching branches.
  """
  requiresApprovingReviews: Boolean

  """
  Are reviews from code owners required to update matching branches.
  """
  requiresCodeOwnerReviews: Boolean

  """
  Are commits required to be signed.
  """
  requiresCommitSignatures: Boolean

  """
  Are conversations required to be resolved before merging.
  """
  requiresConversationResolution: Boolean

  """
  Are successful deployments required before merging.
  """
  requiresDeployments: Boolean @internal

  """
  Are merge commits prohibited from being pushed to this branch.
  """
  requiresLinearHistory: Boolean

  """
  Are merges to this branch managed through a merge queue.
  """
  requiresMergeQueue: Boolean @internal

  """
  Are status checks required to update matching branches.
  """
  requiresStatusChecks: Boolean

  """
  Are branches required to be up to date before merging.
  """
  requiresStrictStatusChecks: Boolean

  """
  Is pushing to matching branches restricted.
  """
  restrictsPushes: Boolean

  """
  Is dismissal of pull request reviews restricted.
  """
  restrictsReviewDismissals: Boolean

  """
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of UpdateBranchProtectionRule
"""
type UpdateBranchProtectionRulePayload @serviceMapping(to: "github/branch_protection_rule") {
  """
  The newly created BranchProtectionRule.
  """
  branchProtectionRule: BranchProtectionRule

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCheckRun
"""
input UpdateCheckRunInput @serviceMapping(to: "github/checks_api") {
  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [CheckRunAction!]

  """
  The node of the check.
  """
  checkRunId: ID! @possibleTypes(concreteTypes: ["CheckRun"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The time that the check run finished.
  """
  completedAt: DateTime

  """
  The completed log information
  """
  completedLog: CompletedLogData @internal

  """
  The final conclusion of the check.
  """
  conclusion: CheckConclusionState

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: URI

  """
  Optional name that, if defined, will be used in the UI instead of the name.
  """
  displayName: String @internal

  """
  Deployment environment for Actions CD
  """
  environment: String @internal

  """
  Deployment URL for Actions CD
  """
  environmentUrl: String @internal

  """
  A reference for the run on the integrator's system.
  """
  externalId: String

  """
  The job key.
  """
  jobKey: String @internal

  """
  labels to be applied to this job as a json array
  """
  labels: [String!] @internal

  """
  The name of the check.
  """
  name: String

  """
  The topological order of the check run within the check suite.
  """
  number: Int @internal

  """
  Descriptive details about the run.
  """
  output: CheckRunOutput

  """
  The ID of the parent job.
  """
  parentJobId: String @internal

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The time that the check run began.
  """
  startedAt: DateTime

  """
  The current status.
  """
  status: RequestableCheckStatusState

  """
  Steps information to be updated
  """
  steps: [CheckStepData!] @internal

  """
  Streaming log information
  """
  streamingLog: StreamingLogData @internal
}

"""
Autogenerated return type of UpdateCheckRun
"""
type UpdateCheckRunPayload @serviceMapping(to: "github/checks_api") {
  """
  The updated check run.
  """
  checkRun: CheckRun

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-07-11")
}

"""
Autogenerated input type of UpdateCheckSuite
"""
input UpdateCheckSuiteInput @internal @serviceMapping(to: "github/checks_api") {
  """
  The annotations that are made as part of the check suite.
  """
  annotations: [CheckAnnotationData!] = [] @internal

  """
  Details about collections of files produced by the run.
  """
  artifacts: [ArtifactData!] @internal

  """
  The node ID of the check suite.
  """
  checkSuiteId: ID! @possibleTypes(concreteTypes: ["CheckSuite"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The URL to the completed logs.
  """
  completedLogUrl: String @internal

  """
  Set the conclusion of this explicitly completed check suite
  """
  conclusion: String @internal

  """
  The concurency information about the check suite
  """
  concurrency: Concurrency @internal

  """
  Used by integrators with which can create >1 check suite per sha to create suites idempotently
  """
  externalId: String @internal

  """
  The node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UpdateCheckSuite
"""
type UpdateCheckSuitePayload @internal @serviceMapping(to: "github/checks_api") {
  """
  The updated check suite.
  """
  checkSuite: CheckSuite

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2019-06-07")
}

"""
Autogenerated input type of UpdateCheckSuitePreferences
"""
input UpdateCheckSuitePreferencesInput @serviceMapping(to: "github/checks_api") {
  """
  The check suite preferences to modify.
  """
  autoTriggerPreferences: [CheckSuiteAutoTriggerPreference!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UpdateCheckSuitePreferences
"""
type UpdateCheckSuitePreferencesPayload @serviceMapping(to: "github/checks_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateCustomInbox
"""
input UpdateCustomInboxInput @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the custom inbox to update.
  """
  customInboxId: ID! @possibleTypes(concreteTypes: ["NotificationFilter"])

  """
  The name of the new inbox.
  """
  name: String

  """
  The search query used to filter the inbox.
  """
  queryString: String
}

"""
Autogenerated return type of UpdateCustomInbox
"""
type UpdateCustomInboxPayload @underDevelopment(since: "2019-08-29") @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated custom inbox.
  """
  customInbox: NotificationFilter
}

"""
Autogenerated input type of UpdateDiscussionComment
"""
input UpdateDiscussionCommentInput @serviceMapping(to: "github/discussions") {
  """
  The new contents of the comment body.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion comment to update.
  """
  commentId: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

"""
Autogenerated return type of UpdateDiscussionComment
"""
type UpdateDiscussionCommentPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The modified discussion comment.
  """
  comment: DiscussionComment

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-11-03")
}

"""
Autogenerated input type of UpdateDiscussion
"""
input UpdateDiscussionInput @serviceMapping(to: "github/discussions") {
  """
  The new contents of the discussion body.
  """
  body: String

  """
  The Node ID of a discussion category within the same repository to change this discussion to.
  """
  categoryId: ID @possibleTypes(concreteTypes: ["DiscussionCategory"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to update.
  """
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])

  """
  The new discussion title.
  """
  title: String
}

"""
Autogenerated return type of UpdateDiscussion
"""
type UpdateDiscussionPayload @serviceMapping(to: "github/discussions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The modified discussion.
  """
  discussion: Discussion

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-11-09")
}

"""
Autogenerated input type of UpdateEnterpriseAdministratorRole
"""
input UpdateEnterpriseAdministratorRoleInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Enterprise which the admin belongs to.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The login of a administrator whose role is being changed.
  """
  login: String!

  """
  The new role for the Enterprise administrator.
  """
  role: EnterpriseAdministratorRole!
}

"""
Autogenerated return type of UpdateEnterpriseAdministratorRole
"""
type UpdateEnterpriseAdministratorRolePayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A message confirming the result of changing the administrator's role.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the allow private repository forking setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated allow private repository forking setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the allow private repository forking setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
input UpdateEnterpriseDefaultRepositoryPermissionSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the base repository permission setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the base repository permission setting on the enterprise.
  """
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated base repository permission setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the base repository permission setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can change repository visibility setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can change repository visibility setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can change repository visibility setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can change repository visibility setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can create repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  Allow members to create internal repositories. Defaults to current value.
  """
  membersCanCreateInternalRepositories: Boolean

  """
  Allow members to create private repositories. Defaults to current value.
  """
  membersCanCreatePrivateRepositories: Boolean

  """
  Allow members to create public repositories. Defaults to current value.
  """
  membersCanCreatePublicRepositories: Boolean

  """
  When false, allow member organizations to set their own repository creation member privileges.
  """
  membersCanCreateRepositoriesPolicyEnabled: Boolean

  """
  Value for the members can create repositories setting on the enterprise. This
  or the granular public/private/internal allowed fields (but not both) must be provided.
  """
  settingValue: EnterpriseMembersCanCreateRepositoriesSettingValue
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can create repositories setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can create repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
input UpdateEnterpriseMembersCanDeleteIssuesSettingInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can delete issues setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can delete issues setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can delete issues setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can delete issues setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can delete repositories setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can delete repositories setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can delete repositories setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can delete repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
input UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can invite collaborators setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can invite collaborators setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can invite collaborators setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can invite collaborators setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
input UpdateEnterpriseMembersCanMakePurchasesSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can make purchases setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can make purchases setting on the enterprise.
  """
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can make purchases setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can make purchases setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can update protected branches setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can update protected branches setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can update protected branches setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can update protected branches setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
input UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput @serviceMapping(to: "github/dependency_graph") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the members can view dependency insights setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the members can view dependency insights setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload @serviceMapping(to: "github/dependency_graph") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated members can view dependency insights setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the members can view dependency insights setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
input UpdateEnterpriseOrganizationProjectsSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the organization projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the organization projects setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
type UpdateEnterpriseOrganizationProjectsSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated organization projects setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the organization projects setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseProfile
"""
input UpdateEnterpriseProfileInput @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description of the enterprise.
  """
  description: String

  """
  The Enterprise ID to update.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The location of the enterprise.
  """
  location: String

  """
  The name of the enterprise.
  """
  name: String

  """
  The URL of the enterprise's website.
  """
  websiteUrl: String
}

"""
Autogenerated return type of UpdateEnterpriseProfile
"""
type UpdateEnterpriseProfilePayload @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated enterprise.
  """
  enterprise: Enterprise
}

"""
Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
"""
input UpdateEnterpriseRepositoryProjectsSettingInput @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the repository projects setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the repository projects setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
"""
type UpdateEnterpriseRepositoryProjectsSettingPayload @serviceMapping(to: "github/admin_experience") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated repository projects setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the repository projects setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
"""
input UpdateEnterpriseTeamDiscussionsSettingInput @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the team discussions setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the team discussions setting on the enterprise.
  """
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
"""
type UpdateEnterpriseTeamDiscussionsSettingPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated team discussions setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the team discussions setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput @serviceMapping(to: "github/account_login") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the enterprise on which to set the two factor authentication required setting.
  """
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])

  """
  The value for the two factor authentication required setting on the enterprise.
  """
  settingValue: EnterpriseEnabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload @serviceMapping(to: "github/account_login") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The enterprise with the updated two factor authentication required setting.
  """
  enterprise: Enterprise

  """
  A message confirming the result of updating the two factor authentication required setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnvironment
"""
input UpdateEnvironmentInput @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The node ID of the environment.
  """
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])

  """
  The ids of users or teams that can approve deployments to this environment
  """
  reviewers: [ID!]

  """
  The wait timer in minutes.
  """
  waitTimer: Int
}

"""
Autogenerated return type of UpdateEnvironment
"""
type UpdateEnvironmentPayload @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated environment.
  """
  environment: Environment
}

"""
Autogenerated input type of UpdateExploreCollection
"""
input UpdateExploreCollectionInput @internal @serviceMapping(to: "github/explore") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the collection is featured.
  """
  isFeatured: Boolean

  """
  The slug of the collection.
  """
  slug: String!
}

"""
Autogenerated return type of UpdateExploreCollection
"""
type UpdateExploreCollectionPayload @internal @serviceMapping(to: "github/explore") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated collection.
  """
  collection: ExploreCollection
}

"""
Autogenerated input type of UpdateIntegrationCategory
"""
input UpdateIntegrationCategoryInput @internal {
  """
  The category description.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The category name.
  """
  name: String!

  """
  The category name id
  """
  slug: String!

  """
  The state the category is currently in.
  """
  state: IntegrationFeatureState!
}

"""
Autogenerated return type of UpdateIntegrationCategory
"""
type UpdateIntegrationCategoryPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new GitHub app.
  """
  integrationCategory: IntegrationFeature
}

"""
Autogenerated input type of UpdateIpAllowListEnabledSetting
"""
input UpdateIpAllowListEnabledSettingInput @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the owner on which to set the IP allow list enabled setting.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")

  """
  The value for the IP allow list enabled setting.
  """
  settingValue: IpAllowListEnabledSettingValue!
}

"""
Autogenerated return type of UpdateIpAllowListEnabledSetting
"""
type UpdateIpAllowListEnabledSettingPayload @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list owner on which the setting was updated.
  """
  owner: IpAllowListOwner
}

"""
Autogenerated input type of UpdateIpAllowListEntry
"""
input UpdateIpAllowListEntryInput @serviceMapping(to: "github/ip_allow_list") {
  """
  An IP address or range of addresses in CIDR notation.
  """
  allowListValue: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IP allow list entry to update.
  """
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """
  An optional name for the IP allow list entry.
  """
  name: String
}

"""
Autogenerated return type of UpdateIpAllowListEntry
"""
type UpdateIpAllowListEntryPayload @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list entry that was updated.
  """
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
input UpdateIpAllowListForInstalledAppsEnabledSettingInput @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the owner.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["App", "Enterprise", "Organization"], abstractType: "IpAllowListOwner")

  """
  The value for the IP allow list configuration for installed GitHub Apps setting.
  """
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue!
}

"""
Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
type UpdateIpAllowListForInstalledAppsEnabledSettingPayload @serviceMapping(to: "github/ip_allow_list") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The IP allow list owner on which the setting was updated.
  """
  owner: IpAllowListOwner
}

"""
Autogenerated input type of UpdateIssueComment
"""
input UpdateIssueCommentInput @serviceMapping(to: "github/issues") {
  """
  The updated text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the IssueComment to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

"""
Autogenerated return type of UpdateIssueComment
"""
type UpdateIssueCommentPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-08-13")

  """
  The updated comment.
  """
  issueComment: IssueComment
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput @serviceMapping(to: "github/issues") {
  """
  An array of Node IDs of users for this issue.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The body for the issue description.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the Issue to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["Issue"])

  """
  An array of Node IDs of labels for this issue.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  The Node ID of the milestone for this issue.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this issue.
  """
  projectIds: [ID!]

  """
  The desired issue state.
  """
  state: IssueState

  """
  The title for the issue.
  """
  title: String
}

"""
Autogenerated return type of UpdateIssue
"""
type UpdateIssuePayload @serviceMapping(to: "github/issues") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-08-17")

  """
  The issue.
  """
  issue: Issue
}

"""
Autogenerated input type of UpdateLabelByName
"""
input UpdateLabelByNameInput @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the updated color of the label.
  """
  color: String

  """
  The updated name of the label.
  """
  name: String

  """
  The Node ID of the repository the label belongs to.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The name of the label to be updated.
  """
  subjectName: String!
}

"""
Autogenerated return type of UpdateLabelByName
"""
type UpdateLabelByNamePayload @internal @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated label.
  """
  label: Label
}

"""
Autogenerated input type of UpdateLabel
"""
input UpdateLabelInput @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A 6 character hex code, without the leading #, identifying the updated color of the label.
  """
  color: String

  """
  A brief description of the label, such as its purpose.
  """
  description: String

  """
  The Node ID of the label to be updated.
  """
  id: ID! @possibleTypes(concreteTypes: ["Label"])

  """
  The updated name of the label.
  """
  name: String
}

"""
Autogenerated return type of UpdateLabel
"""
type UpdateLabelPayload @serviceMapping(to: "github/issues") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated label.
  """
  label: Label
}

"""
Autogenerated input type of UpdateMarketplaceCategory
"""
input UpdateMarketplaceCategoryInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The category's description.
  """
  description: String

  """
  The position of the category on the Marketplace homepage.
  """
  featuredPosition: Int

  """
  A technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String

  """
  Whether the category is featured on the Marketplace home page.
  """
  isFeatured: Boolean

  """
  Whether the category is a filter-type.
  """
  isFilter: Boolean

  """
  Whether the category is to be used in Marketplace navigation menus.
  """
  isNavigationVisible: Boolean

  """
  The category's full name.
  """
  name: String

  """
  Select the category that matches this slug. It's the short name of the category used in its URL.
  """
  slug: String!

  """
  A list of sub category names.
  """
  subCategories: [String!]
}

"""
Autogenerated return type of UpdateMarketplaceCategory
"""
type UpdateMarketplaceCategoryPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace category.
  """
  marketplaceCategory: MarketplaceCategory
}

"""
Autogenerated input type of UpdateMarketplaceListing
"""
input UpdateMarketplaceListingInput @internal @serviceMapping(to: "github/marketplace") {
  """
  The ID of the integration to list, if you want to change the backing product for this
  listing. Can only be modified by site admins.
  """
  appID: ID @possibleTypes(concreteTypes: ["App"])

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A link to the listing owner's company site.
  """
  companyUrl: String

  """
  A link to the listing's documentation.
  """
  documentationUrl: String

  """
  The listing's extended description.
  """
  extendedDescription: String

  """
  Identifies the date and time when the listing is featured on the Marketplace homepage.
  """
  featuredAt: DateTime @internal

  """
  A list of filter-type categories.
  """
  filterCategories: [String!] @internal

  """
  Email address for the listing's finance contact.
  """
  financeEmail: String

  """
  The listing's full description.
  """
  fullDescription: String

  """
  Whether the listing can create direct billing plans.
  """
  hasDirectBilling: Boolean @internal

  """
  The database ID of the hero card background image.
  """
  heroCardBackgroundImageDatabaseID: Int @internal

  """
  A technical description of how this listing's application works with GitHub.
  """
  howItWorks: String

  """
  A link to install the listing's application.
  """
  installationUrl: String

  """
  Whether this listing is owned by GitHub
  """
  isByGithub: Boolean @internal

  """
  Whether light text is used when displaying text on the hero card.
  """
  isLightText: Boolean

  """
  The hex color code, without the leading '#', for the logo background.
  """
  logoBackgroundColor: String

  """
  Email address for the listing's marketing contact.
  """
  marketingEmail: String

  """
  The listing's full name.
  """
  name: String

  """
  The ID of the OAuth application to list, if you want to change the backing product for this
  listing. Can only be modified by site admins.
  """
  oauthApplicationDatabaseID: Int

  """
  A link to the listing's detailed pricing.
  """
  pricingUrl: String

  """
  The name of the category that best describes the listing.
  """
  primaryCategoryName: String

  """
  A link to the listing's privacy policy.
  """
  privacyPolicyUrl: String

  """
  The name of an alternate category that describes the listing. Pass 'none' to remove the
  secondary category from this listing.
  """
  secondaryCategoryName: String

  """
  Email address for the listing's security contact.
  """
  securityEmail: String

  """
  The listing's short description.
  """
  shortDescription: String

  """
  Select the listing that matches this slug. It's the short name of the listing used in its URL.
  """
  slug: String!

  """
  A link to the listing's status page.
  """
  statusUrl: String

  """
  A link to the listing's support site.
  """
  supportUrl: String

  """
  The names of supported programming languages.
  """
  supportedLanguageNames: [String]

  """
  Email address for the listing's technical contact.
  """
  technicalEmail: String

  """
  A link to the listing's terms of service.
  """
  termsOfServiceUrl: String
}

"""
Autogenerated return type of UpdateMarketplaceListing
"""
type UpdateMarketplaceListingPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated marketplace listing.
  """
  marketplaceListing: MarketplaceListing
}

"""
Autogenerated input type of UpdateMarketplaceListingPlanBullet
"""
input UpdateMarketplaceListingPlanBulletInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the bullet point to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlanBullet"])

  """
  The contents of the bullet point.
  """
  value: String!
}

"""
Autogenerated return type of UpdateMarketplaceListingPlanBullet
"""
type UpdateMarketplaceListingPlanBulletPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated bullet point.
  """
  marketplaceListingPlanBullet: MarketplaceListingPlanBullet
}

"""
Autogenerated input type of UpdateMarketplaceListingPlan
"""
input UpdateMarketplaceListingPlanInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A short description of the plan.
  """
  description: String!

  """
  The types of accounts that can subscribe to the plan.
  """
  forAccountType: MarketplaceListingPlanSubscriberAccountTypes!

  """
  Does this listing plan have a free trial?
  """
  hasFreeTrial: Boolean

  """
  The Marketplace listing plan ID to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])

  """
  How much this plan should cost per month in cents.
  """
  monthlyPriceInCents: Int!

  """
  The name of the payment plan.
  """
  name: String!

  """
  The pricing model for the plan.
  """
  priceModel: MarketplaceListingPlanPriceModel!

  """
  The name of the unit if this plan is per-unit.
  """
  unitName: String

  """
  How much this plan should cost annually in cents.
  """
  yearlyPriceInCents: Int!
}

"""
Autogenerated return type of UpdateMarketplaceListingPlan
"""
type UpdateMarketplaceListingPlanPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace listing plan.
  """
  marketplaceListingPlan: MarketplaceListingPlan
}

"""
Autogenerated input type of UpdateMarketplaceListingScreenshot
"""
input UpdateMarketplaceListingScreenshotInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A caption that describes the screenshot image.
  """
  caption: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing screenshot ID to update.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceListingScreenshot"])
}

"""
Autogenerated return type of UpdateMarketplaceListingScreenshot
"""
type UpdateMarketplaceListingScreenshotPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace listing screenshot.
  """
  marketplaceListingScreenshot: MarketplaceListingScreenshot
}

"""
Autogenerated input type of UpdateMarketplaceOrderPreview
"""
input UpdateMarketplaceOrderPreviewInput @internal @serviceMapping(to: "github/marketplace") {
  """
  The target account's database ID.
  """
  accountId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Marketplace listing's database ID.
  """
  marketplaceListingId: Int!

  """
  The Marketplace listing plan's database ID.
  """
  marketplaceListingPlanId: Int!

  """
  The order quantity.
  """
  quantity: Int!

  """
  The user's database ID.
  """
  userId: Int!

  """
  The timestamp the user viewed the order.
  """
  viewedAt: DateTime!
}

"""
Autogenerated return type of UpdateMarketplaceOrderPreview
"""
type UpdateMarketplaceOrderPreviewPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The most recent order preview
  """
  marketplaceOrderPreview: MarketplaceOrderPreview
}

"""
Autogenerated input type of UpdateMarketplaceStory
"""
input UpdateMarketplaceStoryInput @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the story should be marked as featured.
  """
  featured: Boolean!

  """
  Select Marketplace story that matches this ID.
  """
  id: ID! @possibleTypes(concreteTypes: ["MarketplaceStory"])
}

"""
Autogenerated return type of UpdateMarketplaceStory
"""
type UpdateMarketplaceStoryPayload @internal @serviceMapping(to: "github/marketplace") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Marketplace story.
  """
  marketplaceStory: MarketplaceStory
}

"""
Autogenerated input type of UpdateMobilePushNotificationSchedules
"""
input UpdateMobilePushNotificationSchedulesInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The days of the week for the schedule.
  """
  days: [DayOfWeek!]!

  """
  The end start time (0:00..23:59)
  """
  endTime: MobilePushScheduleTime!

  """
  The schedule start time (0:00..23:59)
  """
  startTime: MobilePushScheduleTime!
}

"""
Autogenerated return type of UpdateMobilePushNotificationSchedules
"""
type UpdateMobilePushNotificationSchedulesPayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-06-04")

  """
  The updated mobile push notification schedules.
  """
  mobilePushNotificationSchedules: [MobilePushNotificationSchedule!]
}

"""
Autogenerated input type of UpdateMobilePushNotificationSettings
"""
input UpdateMobilePushNotificationSettingsInput @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If the user would like to receive assignments.
  """
  getAssignments: Boolean

  """
  If the user would like to receive deployment requests.
  """
  getDeploymentRequests: Boolean

  """
  If the user would like to receive direct mentions.
  """
  getDirectMentions: Boolean

  """
  If the user would like to receive review requests.
  """
  getReviewRequests: Boolean

  """
  If the user currently has a push notification schedule enabled/disabled (e.g., working hours).
  """
  scheduledNotifications: Boolean
}

"""
Autogenerated return type of UpdateMobilePushNotificationSettings
"""
type UpdateMobilePushNotificationSettingsPayload @serviceMapping(to: "github/mobile_push_notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-02-02")

  """
  The user whose push settings will be updated.
  """
  user: User
}

"""
Autogenerated input type of UpdateNetworkPrivilege
"""
input UpdateNetworkPrivilegeInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the repo has been locked to collaborators only
  """
  collaboratorsOnly: Boolean

  """
  Whether or not the repo has been hidden from discovery pages
  """
  isHiddenFromDiscovery: Boolean

  """
  Whether or not the repo has been de-indexed by Google
  """
  noIndex: Boolean

  """
  ID of the repository
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether or not the repo has been locked to GitHub users only
  """
  requireLogin: Boolean

  """
  Whether or not the repo requires opt-in before viewing
  """
  requireOptIn: Boolean
}

"""
Autogenerated return type of UpdateNetworkPrivilege
"""
type UpdateNetworkPrivilegePayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateNotificationRestrictionSetting
"""
input UpdateNotificationRestrictionSettingInput @serviceMapping(to: "github/notification_restrictions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the owner on which to set the restrict notifications setting.
  """
  ownerId: ID! @possibleTypes(concreteTypes: ["Enterprise", "Organization"], abstractType: "VerifiableDomainOwner")

  """
  The value for the restrict notifications setting.
  """
  settingValue: NotificationRestrictionSettingValue!
}

"""
Autogenerated return type of UpdateNotificationRestrictionSetting
"""
type UpdateNotificationRestrictionSettingPayload @serviceMapping(to: "github/notification_restrictions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner on which the setting was updated.
  """
  owner: VerifiableDomainOwner
}

"""
Autogenerated input type of UpdateNotificationSettings
"""
input UpdateNotificationSettingsInput @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Does the viewer get mobile push notifications for comments in which they are directly mentioned?
  """
  getsDirectMentionMobilePush: Boolean

  """
  Does the viewer get web notifications for threads in which they are participating?
  """
  getsParticipatingWeb: Boolean

  """
  Does the viewer get web notifications for vulnerability alerts?
  """
  getsVulnerabilityAlertsWeb: Boolean

  """
  Does the viewer get web notifications for threads which they are watching or to which they are subscribed?
  """
  getsWatchingWeb: Boolean
}

"""
Autogenerated return type of UpdateNotificationSettings
"""
type UpdateNotificationSettingsPayload @serviceMapping(to: "github/notifications") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Did the operation succeed?
  """
  success: Boolean

  """
  The user whose settings were updated.
  """
  viewer: User
}

"""
Autogenerated input type of UpdateOrganizationDiscussionComment
"""
input UpdateOrganizationDiscussionCommentInput @underDevelopment(since: "2019-05-07") {
  """
  The updated text of the comment.
  """
  body: String!

  """
  The current version of the body content.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["OrganizationDiscussionComment"])
}

"""
Autogenerated return type of UpdateOrganizationDiscussionComment
"""
type UpdateOrganizationDiscussionCommentPayload @underDevelopment(since: "2019-05-07") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated comment.
  """
  comment: OrganizationDiscussionComment
}

"""
Autogenerated input type of UpdateOrganizationDiscussion
"""
input UpdateOrganizationDiscussionInput @underDevelopment(since: "2019-05-08") {
  """
  The updated text of the discussion.
  """
  body: String

  """
  The current version of the body content. If provided, this update operation
  will be rejected if the given version does not match the latest version on the server.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["OrganizationDiscussion"])

  """
  If provided, sets the pinned state of the updated discussion.
  """
  pinned: Boolean

  """
  The updated title of the discussion.
  """
  title: String
}

"""
Autogenerated return type of UpdateOrganizationDiscussion
"""
type UpdateOrganizationDiscussionPayload @underDevelopment(since: "2019-05-08") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated discussion.
  """
  discussion: OrganizationDiscussion
}

"""
Autogenerated input type of UpdatePackageFile
"""
input UpdatePackageFileInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  MD5 checksum of this package file.
  """
  md5: String

  """
  The package file to update.
  """
  packageFileId: ID! @possibleTypes(concreteTypes: ["PackageFile"])

  """
  The shasum of this package file.
  """
  sha1: String

  """
  The sha256 of this package file.
  """
  sha256: String

  """
  Content length of the file.
  """
  size: Int

  """
  The subresource integrity (SRI) hashed using sha512.
  """
  sri512: String

  """
  The state of this package file.
  """
  state: PackageFileState
}

"""
Autogenerated return type of UpdatePackageFile
"""
type UpdatePackageFilePayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The package file that was updated.
  """
  packageFile: PackageFile

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that updated the package file.
  """
  viewer: User
}

"""
Autogenerated input type of UpdatePackageVersion
"""
input UpdatePackageVersionInput @internal @serviceMapping(to: "github/package_registry") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dependencies of the package.
  """
  dependencies: [PackageDependencyAttributes!]

  """
  A single line of text to install this package version.
  """
  installationCommand: String

  """
  The package manifest for this package version.
  """
  manifest: String

  """
  The platform this version was built for.
  """
  platform: String

  """
  The readme for this package version.
  """
  readme: String

  """
  Restore this version if deleted, true or false.
  """
  restoreIfDeleted: Boolean = false

  """
  The sha256 hash of the package_version.
  """
  sha256: String

  """
  The size of the package_version.
  """
  size: Int

  """
  The summary for this package version.
  """
  summary: String

  """
  The package version ID to update.
  """
  versionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

"""
Autogenerated return type of UpdatePackageVersion
"""
type UpdatePackageVersionPayload @internal @serviceMapping(to: "github/package_registry") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated package version.
  """
  packageVersion: PackageVersion

  """
  The result of the mutation, success or failure, with user-safe details.
  """
  result: PackagesMutationResult!

  """
  The user that created the package version.
  """
  viewer: User
}

"""
Autogenerated input type of UpdatePendingPlanChange
"""
input UpdatePendingPlanChangeInput @internal {
  """
  Do you want to cancel any pending data pack changes?.
  """
  cancelDataPacks: Boolean

  """
  Do you want to cancel any pending plan changes?.
  """
  cancelPlan: Boolean

  """
  Do you want to cancel any pending billing duration changes?.
  """
  cancelPlanDuration: Boolean

  """
  Do you want to cancel any pending changes to the seat count?.
  """
  cancelSeats: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The login of the account you want to apply changes to.
  """
  login: String!
}

"""
Autogenerated return type of UpdatePendingPlanChange
"""
type UpdatePendingPlanChangePayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The pending changes for the next billing cycle.
  """
  pendingCycle: PendingCycle
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the ProjectCard should be archived
  """
  isArchived: Boolean

  """
  The note of ProjectCard.
  """
  note: String

  """
  The ProjectCard ID to update.
  """
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated ProjectCard.
  """
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectCollaborator
"""
input UpdateProjectCollaboratorInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The permission that the collaborator should have on the project.
  """
  permission: ProjectPermission!

  """
  The ID of the project to update the permission on.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the user collaborator to update the permission for.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of UpdateProjectCollaborator
"""
type UpdateProjectCollaboratorPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project that the collaborator is on.
  """
  project: Project

  """
  The user collaborator that is on the project.
  """
  user: User
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project column.
  """
  name: String!

  """
  The ProjectColumn ID to update.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])

  """
  The semantic purpose of the column
  """
  purpose: ProjectColumnPurpose @internal
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project column.
  """
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput @serviceMapping(to: "github/projects") {
  """
  The description of project.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of project.
  """
  name: String

  """
  The permission that all members of the owning organization have on this project.
  """
  organizationPermission: ProjectPermission

  """
  The Project ID to update.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  Whether the project is public or not.
  """
  public: Boolean

  """
  Whether the project is open or closed.
  """
  state: ProjectState
}

"""
Autogenerated input type of UpdateProjectNextItemField
"""
input UpdateProjectNextItemFieldInput @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the field to be updated. Only supports custom fields and status for now.
  """
  fieldId: ID! @possibleTypes(concreteTypes: ["ProjectNextField"])

  """
  The id of the item to be updated.
  """
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectNextItem"])

  """
  The ID of the Project.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectNext"])

  """
  The value which will be set on the field.
  """
  value: String!
}

"""
Autogenerated return type of UpdateProjectNextItemField
"""
type UpdateProjectNextItemFieldPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item.
  """
  projectNextItem: ProjectNextItem
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project.
  """
  project: Project
}

"""
Autogenerated input type of UpdateProjectWorkflow
"""
input UpdateProjectWorkflowInput @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the project column for the automation.
  """
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])

  """
  The ProjectWorkflow ID to update.
  """
  projectWorkflowId: ID! @possibleTypes(concreteTypes: ["ProjectWorkflow"])
}

"""
Autogenerated return type of UpdateProjectWorkflow
"""
type UpdateProjectWorkflowPayload @internal @serviceMapping(to: "github/projects") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated project workflow.
  """
  projectWorkflow: ProjectWorkflow
}

"""
Autogenerated input type of UpdatePullRequestBranch
"""
input UpdatePullRequestBranchInput @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The head ref oid for the upstream branch.
  """
  expectedHeadOid: GitObjectID

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

"""
Autogenerated return type of UpdatePullRequestBranch
"""
type UpdatePullRequestBranchPayload @serviceMapping(to: "github/pull_requests") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequest
"""
input UpdatePullRequestInput @serviceMapping(to: "github/issues") {
  """
  An array of Node IDs of users for this pull request.
  """
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository.
  """
  baseRefName: String

  """
  The contents of the pull request.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An array of Node IDs of labels for this pull request.
  """
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean

  """
  The Node ID of the milestone for this pull request.
  """
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])

  """
  An array of Node IDs for projects associated with this pull request.
  """
  projectIds: [ID!]

  """
  The Node ID of the pull request.
  """
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])

  """
  The target state of the pull request.
  """
  state: PullRequestUpdateState

  """
  The title of the pull request.
  """
  title: String
}

"""
Autogenerated return type of UpdatePullRequest
"""
type UpdatePullRequestPayload @serviceMapping(to: "github/issues") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2018-10-04")

  """
  The updated pull request.
  """
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequestReviewComment
"""
input UpdatePullRequestReviewCommentInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the comment to modify.
  """
  pullRequestReviewCommentId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

"""
Autogenerated return type of UpdatePullRequestReviewComment
"""
type UpdatePullRequestReviewCommentPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated comment.
  """
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of UpdatePullRequestReview
"""
input UpdatePullRequestReviewInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The contents of the pull request review body.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the pull request review to modify.
  """
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

"""
Autogenerated return type of UpdatePullRequestReview
"""
type UpdatePullRequestReviewPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated pull request review.
  """
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of UpdateRef
"""
input UpdateRefInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Permit updates of branch Refs that are not fast-forwards?
  """
  force: Boolean = false

  """
  The GitObjectID that the Ref shall be updated to target.
  """
  oid: GitObjectID!

  """
  The Node ID of the Ref to be updated.
  """
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

"""
Autogenerated return type of UpdateRef
"""
type UpdateRefPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Ref.
  """
  ref: Ref
}

"""
Autogenerated input type of UpdateRefs
"""
input UpdateRefsInput @serviceMapping(to: "github/ref") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of ref updates.
  """
  refUpdates: [RefUpdate!]!

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

"""
Autogenerated return type of UpdateRefs
"""
type UpdateRefsPayload @serviceMapping(to: "github/ref") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateRepositoryAction
"""
input UpdateRepositoryActionInput @internal @serviceMapping(to: "github/actions") {
  """
  A list of categories that describe the action.
  """
  categories: [String!] @internal

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not the Repository Action is featured.
  """
  featured: Boolean @internal

  """
  A list of filter categories that describe the action.
  """
  filterCategories: [String!] @internal

  """
  Ranking of this Action, used for ordering on Marketplace and Workflow editor.
  """
  rankMultiplier: Float @internal

  """
  The Repository Action to update.
  """
  repositoryActionId: ID! @possibleTypes(concreteTypes: ["RepositoryAction"])
}

"""
Autogenerated return type of UpdateRepositoryAction
"""
type UpdateRepositoryActionPayload @internal @serviceMapping(to: "github/actions") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated Repository Action.
  """
  repositoryAction: RepositoryAction
}

"""
Autogenerated input type of UpdateRepository
"""
input UpdateRepositoryInput @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A new description for the repository. Pass an empty string to erase the existing description.
  """
  description: String

  """
  Indicates if the repository should have the issues feature enabled.
  """
  hasIssuesEnabled: Boolean

  """
  Indicates if the repository should have the project boards feature enabled.
  """
  hasProjectsEnabled: Boolean

  """
  Indicates if the repository should have the wiki feature enabled.
  """
  hasWikiEnabled: Boolean

  """
  The URL for a web page about this repository. Pass an empty string to erase the existing URL.
  """
  homepageUrl: URI

  """
  The new name of the repository.
  """
  name: String

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean
}

"""
Autogenerated return type of UpdateRepository
"""
type UpdateRepositoryPayload @serviceMapping(to: "github/repo_info") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateSubscription
"""
input UpdateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new state of the subscription.
  """
  state: SubscriptionState!

  """
  The Node ID of the subscribable object to modify.
  """
  subscribableId: ID!
    @possibleTypes(
      concreteTypes: ["Commit", "Discussion", "Issue", "PullRequest", "Repository", "Team", "TeamDiscussion"]
      abstractType: "Subscribable"
    )

  """
  If the state of the subscription is custom pass in the type to subscribe to.
  """
  types: [CustomSubscriptionType!]
}

"""
Autogenerated input type of UpdateSubscriptionItem
"""
input UpdateSubscriptionItemInput @internal {
  """
  The login of the account that purchased this
  """
  account: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether to grant OAP access to the application
  """
  grantOap: Boolean

  """
  The ID of the listing plan that was purchased
  """
  planId: ID! @possibleTypes(concreteTypes: ["MarketplaceListingPlan"])

  """
  How many units of this listing were purchased
  """
  quantity: Int!
}

"""
Autogenerated return type of UpdateSubscriptionItem
"""
type UpdateSubscriptionItemPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new subscription item.
  """
  subscriptionItem: SubscriptionItem
}

"""
Autogenerated return type of UpdateSubscription
"""
type UpdateSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The input subscribable entity.
  """
  subscribable: Subscribable
}

"""
Autogenerated input type of UpdateTeamDiscussionComment
"""
input UpdateTeamDiscussionCommentInput @serviceMapping(to: "github/teams") {
  """
  The updated text of the comment.
  """
  body: String!

  """
  The current version of the body content.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the comment to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

"""
Autogenerated return type of UpdateTeamDiscussionComment
"""
type UpdateTeamDiscussionCommentPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated comment.
  """
  teamDiscussionComment: TeamDiscussionComment
}

"""
Autogenerated input type of UpdateTeamDiscussion
"""
input UpdateTeamDiscussionInput @serviceMapping(to: "github/teams") {
  """
  The updated text of the discussion.
  """
  body: String

  """
  The current version of the body content. If provided, this update operation
  will be rejected if the given version does not match the latest version on the server.
  """
  bodyVersion: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the discussion to modify.
  """
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])

  """
  If provided, sets the pinned state of the updated discussion.
  """
  pinned: Boolean

  """
  The updated title of the discussion.
  """
  title: String
}

"""
Autogenerated return type of UpdateTeamDiscussion
"""
type UpdateTeamDiscussionPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated discussion.
  """
  teamDiscussion: TeamDiscussion
}

"""
Autogenerated input type of UpdateTeam
"""
input UpdateTeamInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description of team.
  """
  description: String

  """
  A list of external groups to map the team to.
  """
  groupMappings: [GroupMapping] @underDevelopment(since: "2019-05-06")

  """
  String for LDAP distinguished name.
  """
  ldap_dn: String

  """
  The name of team.
  """
  name: String

  """
  The parent team ID.
  """
  parentTeamId: ID @possibleTypes(concreteTypes: ["Team"])

  """
  The legacy team permission.
  """
  permission: LegacyTeamPermission @internal

  """
  The level of privacy the team has.
  """
  privacy: TeamPrivacy

  """
  The Team ID to update.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated input type of UpdateTeamMember
"""
input UpdateTeamMemberInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The role of the team member.
  """
  role: TeamMemberRole

  """
  The ID of the team of the member.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  The ID of the team member to update.
  """
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

"""
Autogenerated return type of UpdateTeamMember
"""
type UpdateTeamMemberPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team of the member.
  """
  team: Team

  """
  The team member that was updated.
  """
  user: User
}

"""
Autogenerated return type of UpdateTeam
"""
type UpdateTeamPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated team.
  """
  team: Team
}

"""
Autogenerated input type of UpdateTeamProject
"""
input UpdateTeamProjectInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The permission that the team should have on the project.
  """
  permission: ProjectPermission!

  """
  The ID of the project that's on the team.
  """
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])

  """
  The ID of the team that the project is on.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UpdateTeamProject
"""
type UpdateTeamProjectPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project that is on the team.
  """
  project: Project

  """
  The team that the project is on.
  """
  team: Team
}

"""
Autogenerated input type of UpdateTeamRepository
"""
input UpdateTeamRepositoryInput @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The permission the team has on the repository.
  """
  permission: RepositoryPermission!

  """
  The ID of the repository to update.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  The ID of the team of the repository.
  """
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UpdateTeamRepository
"""
type UpdateTeamRepositoryPayload @internal @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was updated.
  """
  repository: Repository

  """
  The team of the repository.
  """
  team: Team
}

"""
Autogenerated input type of UpdateTeamReviewAssignment
"""
input UpdateTeamReviewAssignmentInput @serviceMapping(to: "github/pull_request_reviews") {
  """
  The algorithm to use for review assignment
  """
  algorithm: TeamReviewAssignmentAlgorithm = ROUND_ROBIN

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Count any members whose review has already been requested against the required number of members assigned to review
  """
  countMembersAlreadyRequested: Boolean = true @underDevelopment(since: "2021-04-03")

  """
  Turn on or off review assignment
  """
  enabled: Boolean!

  """
  An array of team member IDs to exclude
  """
  excludedTeamMemberIds: [ID!] @possibleTypes(concreteTypes: ["User"])

  """
  The Node ID of the team to update review assignments of
  """
  id: ID! @possibleTypes(concreteTypes: ["Team"])

  """
  Include the members of any child teams when assigning
  """
  includeChildTeamMembers: Boolean = true @underDevelopment(since: "2021-03-19")

  """
  Notify the entire team of the PR if it is delegated
  """
  notifyTeam: Boolean = true

  """
  Remove the team review request when assigning
  """
  removeTeamRequest: Boolean = true @underDevelopment(since: "2021-02-03")

  """
  The number of team members to assign
  """
  teamMemberCount: Int = 1
}

"""
Autogenerated return type of UpdateTeamReviewAssignment
"""
type UpdateTeamReviewAssignmentPayload @serviceMapping(to: "github/pull_request_reviews") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The team that was modified
  """
  team: Team
}

"""
Autogenerated input type of UpdateTeamsRepository
"""
input UpdateTeamsRepositoryInput @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Permission that should be granted to the teams.
  """
  permission: RepositoryPermission!

  """
  Repository ID being granted access to.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  A list of teams being granted access. Limit: 10
  """
  teamIds: [ID!]! @possibleTypes(concreteTypes: ["Team"])
}

"""
Autogenerated return type of UpdateTeamsRepository
"""
type UpdateTeamsRepositoryPayload @serviceMapping(to: "github/teams") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The repository that was updated.
  """
  repository: Repository

  """
  The teams granted permission on the repository.
  """
  teams: [Team!]
}

"""
Autogenerated input type of UpdateTopic
"""
input UpdateTopicInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the topic is featured.
  """
  isFeatured: Boolean

  """
  Indicates whether the topic is flagged.
  """
  isFlagged: Boolean

  """
  The name of the topic.
  """
  name: String!
}

"""
Autogenerated return type of UpdateTopic
"""
type UpdateTopicPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated topic.
  """
  topic: Topic
}

"""
Autogenerated input type of UpdateTopics
"""
input UpdateTopicsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the repository.
  """
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])

  """
  An array of topic names.
  """
  topicNames: [String!]!
}

"""
Autogenerated return type of UpdateTopics
"""
type UpdateTopicsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Names of the provided topics that are not valid.
  """
  invalidTopicNames: [String!]

  """
  The updated repository.
  """
  repository: Repository
}

"""
Autogenerated input type of UpdateUserDashboardNavLinks
"""
input UpdateUserDashboardNavLinksInput @serviceMapping(to: "github/mobile_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  An optional list of UserDashboardNavLinkIdentifier enums to mark as hidden.
  """
  hiddenLinks: [UserDashboardNavLinkIdentifier!]

  """
  A set of UserDashboardNavLinkIdentifier enums in the sorted order.
  """
  sortedLinks: [UserDashboardNavLinkIdentifier!]!
}

"""
Autogenerated return type of UpdateUserDashboardNavLinks
"""
type UpdateUserDashboardNavLinksPayload @serviceMapping(to: "github/mobile_api") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2021-07-22")

  """
  The saved links.
  """
  navLinks: [UserDashboardNavLink!]
}

"""
Autogenerated input type of UpdateUserDashboardPins
"""
input UpdateUserDashboardPinsInput @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the items you want to pin to your dashboard.
  """
  itemIds: [ID!]!
    @possibleTypes(
      concreteTypes: ["Gist", "Issue", "Organization", "Project", "PullRequest", "Repository", "Team", "User"]
      abstractType: "DashboardPinnableItem"
    )
}

"""
Autogenerated return type of UpdateUserDashboardPins
"""
type UpdateUserDashboardPinsPayload @serviceMapping(to: "github/dashboard") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The owner of the dashboard that was updated.
  """
  user: User
}

"""
Autogenerated input type of UpdateUserMobileTimeZone
"""
input UpdateUserMobileTimeZoneInput @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The user's time zone name
  """
  timeZone: String!
}

"""
Autogenerated return type of UpdateUserMobileTimeZone
"""
type UpdateUserMobileTimeZonePayload @serviceMapping(to: "github/profiles") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If this mutation fails due to invalid inputs, errors will show up in this list.
  """
  errors: [UserError!]! @underDevelopment(since: "2020-06-24")

  """
  The updated user.
  """
  user: User
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & AvatarOwner & Billable & FeatureFlaggable & MarketplaceListingOwner & Node & PackageOwner & PackageSearch & PlanOwner & ProfileOwner & ProjectOwner & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable
  @serviceMapping(to: "github/shared") {
  """
  Indicates if action invocation is blocked for this user
  """
  actionInvocationBlocked: Boolean! @internal

  """
  A list of repositories that the user can add an action to.
  """
  actionUsableRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    An optional filter to search the repositories.
    """
    searchPhrase: String
  ): RepositoryConnection! @internal

  """
  The image used to represent this repository in Open Graph data.
  """
  actionsStatus: ActionsStatus @internal

  """
  Returns the listing plan for which this owner has an active subscription, for the
  specified Marketplace listing.
  """
  activeListingPlan(
    """
    The short name of the listing used in its URL.
    """
    listingSlug: String!
  ): MarketplaceListingPlan

  """
  Does the user want the 'Activity overview' section shown on their profile?
  """
  activityOverviewEnabled: Boolean! @underDevelopment(since: "2018-08-28")

  """
  A list of actions managed by this User.
  """
  adminableActions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters actions to exclude those that have a Marketplace listing. If
    omitted, actions that are in the Marketplace will be included.
    """
    excludeMarketplaceListings: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for actions returned from the connection.
    """
    orderBy: RepositoryActionOrder = {field: UPDATED_AT, direction: DESC}
  ): RepositoryActionConnection! @internal

  """
  A list of GitHub Apps managed by this user.
  """
  adminableApps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters apps to exclude those that have a Marketplace listing. If omitted,
    integrations that are in the Marketplace will be included.
    """
    excludeMarketplaceListings: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters apps so only public apps are returned. If omitted or false, both
    public and internal apps will be returned.
    """
    publicOnly: Boolean
  ): AppConnection! @internal

  """
  A list of OAuth applications managed by this User.
  """
  adminableOauthApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters OAuth applications to exclude those that have a Marketplace listing.
    If omitted, OAuth applications that are in the Marketplace will be included.
    """
    excludeMarketplaceListings: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OauthApplicationConnection! @internal

  """
  Credits given to the user for collaborating on security advisories
  """
  advisoryCredits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the returned credits.
    """
    orderBy: AdvisoryCreditOrder = {field: ID}
  ): AdvisoryCreditConnection! @underDevelopment(since: "2020-03-26")

  """
  The unique analytics tracking ID for this user
  """
  analyticsTrackingId: String @internal

  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """
    Filter to only a particular kind of pinnable item.
    """
    type: PinnableItemType
  ): Boolean!

  """
  A list of successful logins for a user
  """
  authenticationRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    return records created after a certain time
    """
    since: DateTime!
  ): AuthenticationRecordConnection! @internal

  """
  A URL pointing to the user's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The avatars of the user
  """
  avatars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AvatarConnection @underDevelopment(since: "2018-06-25")

  """
  Transaction records for all billing events tied to an account.
  """
  billingTransactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the transactions in descending order.
    """
    descending: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter out refunds and transactions without a payment associated.
    """
    sales: Boolean
  ): BillingTransactionConnection @internal

  """
  The user's public profile bio.
  """
  bio: String

  """
  The user's public profile bio as HTML.
  """
  bioHTML: HTML!

  """
  Can the user administer Marketplace listings.
  """
  canAdminMarketplaceListings: Boolean! @internal

  """
  Can the user post discussions to the given organization?
  """
  canCreateOrganizationDiscussion(
    """
    The login of the organization to check permission.
    """
    login: String!
  ): Boolean! @underDevelopment(since: "2019-05-07")

  """
  Whether or not the user can display a pro badge on their profile.
  """
  canHaveProBadge: Boolean! @internal

  """
  Could this user receive email notifications, if the organization had notification restrictions enabled?
  """
  canReceiveOrganizationEmailsWhenNotificationsRestricted(
    """
    The login of the organization to check.
    """
    login: String!
  ): Boolean! @serviceMapping(to: "github/verifiable_domains")

  """
  The number of unique users who have access to this user's private repositories.
  """
  collaboratorsCount: Int! @internal

  """
  A list of commit comments made by this user.
  """
  commitComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for commit comments returned from the connection.
    """
    orderBy: CommitCommentOrder @internal
  ): CommitCommentConnection!

  """
  The user's public profile company.
  """
  company: String

  """
  The user's public profile company as HTML.
  """
  companyHTML: HTML!

  """
  The user's profile configuration repository
  """
  configurationRepository: Repository

  """
  The collection of contributions this user has made to different repositories.
  """
  contributionsCollection(
    """
    If provided, include only the specified types of contributions.
    Defaults to all types except issue comments (created repositories, commits, issues, pull requests,
    pull request reviews, joined GitHub, joined an organization, and anonymized contributions to GHE)
    """
    contributionTypes: [ContributionsCollectionContributionType]

    """
    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    """
    from: DateTime

    """
    When true, the queries used to retrieve the contributions select minimal attributes.
    """
    lightweight: Boolean = false @internal

    """
    The ID of the organization used to filter contributions.
    """
    organizationID: ID

    """
    Only contributions made before and up to (including) this time will be
    counted. If omitted, defaults to the current time or one year from the
    provided from argument.
    """
    to: DateTime

    """
    When true, the queries used to retrieve the contributions are viewer agnostic
    """
    viewerAgnostic: Boolean = false @internal
  ): ContributionsCollection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  The current credit on this account
  """
  currentCredit: Money @internal

  """
  Dashboard for this user.
  """
  dashboard: UserDashboard

  """
  A list of items this user has pinned to their dashboard.
  """
  dashboardPinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): DashboardPinnableItemConnection! @serviceMapping(to: "github/dashboard")

  """
  Returns how many more items this user can pin to their dashboard.
  """
  dashboardPinnedItemsRemaining: Int! @internal

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  A list of recovery tokens for a user
  """
  delegatedRecoveryTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    filter by a list of providers
    """
    providers: [String]!
  ): DelegatedRecoveryTokenConnection! @internal

  """
  For repositories owned by this user/organization, finds the repositories they depend on.
  """
  dependencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Whether only this user/organization's public repositories should be considered when looking for dependencies.
    """
    onlyOwnedPublicRepos: Boolean = false

    """
    Whether only dependencies that are public repositories should be returned.
    """
    onlyPublicDependencies: Boolean = false

    """
    Filter dependencies by the package manager they use.
    """
    packageManager: SecurityAdvisoryEcosystem

    """
    How to order the dependencies.
    """
    sortBy: RepositoryOwnerDependenciesOrderField = PACKAGE_NAME

    """
    Whether only repositories whose owner has a GitHub Sponsors listing should be returned.
    """
    sponsorableOnly: Boolean = false
  ): RepositoryConnection! @underDevelopment(since: "2020-11-18")

  """
  Whether or not staff have marked to display staff badge.
  """
  displayStaffBadge: Boolean! @internal

  """
  The user's billing cycle for their plan subscription e.g 'month', 'year'.
  """
  duration: String @internal

  """
  The user's publicly visible profile email.
  """
  email: String!

  """
  A list of enterprises that the user belongs to.
  """
  enterprises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter enterprises returned based on the user's membership type.
    """
    membershipType: EnterpriseMembershipType = ALL

    """
    Ordering options for the User's enterprises.
    """
    orderBy: EnterpriseOrder = {field: NAME, direction: ASC}
  ): EnterpriseConnection! @underDevelopment(since: "2019-07-01")

  """
  A list of users the given user is followed by.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the followers. Defaults to most recent followers first.
    """
    orderBy: FollowOrder = {field: FOLLOWED_AT, direction: DESC} @underDevelopment(since: "2018-10-01")
  ): FollowerConnection!

  """
  A list of users the given user is following.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the followed users. Defaults to most recently followed users first.
    """
    orderBy: FollowOrder = {field: FOLLOWED_AT, direction: DESC} @underDevelopment(since: "2018-10-01")

    """
    Optional list of user IDs to filter results. If provided, only following users in this list will be returned
    """
    userDatabaseIds: [Int] @internal
  ): FollowingConnection!

  """
  Find gist by repo name.
  """
  gist(
    """
    The gist name to find.
    """
    name: String!
  ): Gist

  """
  A list of gist comments made by this user.
  """
  gistComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gist comments returned from the connection.
    """
    orderBy: GistCommentOrder @internal
  ): GistCommentConnection!

  """
  A list of the Gists the user has created.
  """
  gists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for gists returned from the connection
    """
    orderBy: GistOrder

    """
    Filters Gists according to privacy.
    """
    privacy: GistPrivacy
  ): GistConnection!

  """
  If this user is a GitHub Star, the URL to this user's GitHub Stars profile.
  """
  githubStarsProfileUrl: URI

  """
  Indicates if a user's plan subscription is an apple iap subscription
  """
  hasAppleIapSubscription: Boolean!

  """
  Whether or not this user has dismissed the given notice
  """
  hasDismissedNotice(
    """
    Name of notice to check if dismissed
    """
    notice: String!
  ): Boolean @underDevelopment(since: "2018-06-27")

  """
  Whether or not this user has a profile email, which may or may not be visible to the viewing user.
  """
  hasEmail: Boolean! @internal

  """
  Determine if the user has ever created a repository, made a commit
  contribution, opened an issue, opened a pull request, or left a pull request review.
  """
  hasEverContributed: Boolean! @internal

  """
  True if this user/organization has a GitHub Sponsors listing.
  """
  hasSponsorsListing: Boolean!

  """
  Indicates if the user has enabled two factor authentication.
  """
  hasTwoFactorAuthenticationEnabled: Boolean @internal

  """
  Is this account on a free trial?
  """
  hasUnlimitedSeats: Boolean! @internal

  """
  The hovercard information for this user in a given context
  """
  hovercard(
    """
    The ID of the subject to get the hovercard in the context of
    """
    primarySubjectId: ID
  ): Hovercard!
  id: ID!

  """
  The interaction ability settings for this user.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Whether or not this user is the viewer's account successor
  """
  isAccountSuccessorForViewer: Boolean! @underDevelopment(since: "2020-05-11")

  """
  Owner's eligibility to use Actions
  """
  isActionsEligible: Boolean! @internal

  """
  Check if the requested beta feature is enabled
  """
  isBetaFeatureEnabled(
    """
    The beta feature which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Whether or not this user is blocked by the viewer
  """
  isBlockedByViewer: Boolean! @internal

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """
  Whether or not this user is a GitHub Developer Program member.
  """
  isDeveloperProgramMember: Boolean!

  """
  Whether or not this user is a GitHub employee.
  """
  isEmployee: Boolean!

  """
  Is the project owner (organization, user, or a repo) managed by an Identity Provider
  """
  isEnterpriseManaged: Boolean! @internal

  """
  Check if the requested feature is enabled
  """
  isFeatureEnabled(
    """
    If true, call name_enabled? method on the object for feature flag check.
    """
    customFeatureCheck: Boolean = false

    """
    The feature flag which we are checking for this object.
    """
    name: String!
  ): Boolean! @internal

  """
  Whether or not this user is a member of the GitHub Stars Program.
  """
  isGitHubStar: Boolean!

  """
  Whether or not the user is hammy.
  """
  isHammy: Boolean! @internal

  """
  Whether or not the user has marked themselves as for hire.
  """
  isHireable: Boolean!

  """
  Is the account billed through invoices?
  """
  isInvoiced: Boolean! @internal

  """
  Returns true if the user is a large bot account.
  """
  isLargeBotAccount: Boolean! @internal

  """
  Returns true if the user is flagged as a large scale contributor.
  """
  isLargeScaleContributor: Boolean! @internal

  """
  Whether this user belongs to an org that has signed the GitHub Prerelease Program agreement.
  """
  isOrgPrereleaseAgreementSigned: Boolean! @internal

  """
  Whether or not this user has signed the GitHub Prerelease Program agreement.
  """
  isPrereleaseAgreementSigned: Boolean! @internal

  """
  Whether the primary email role is public
  """
  isPrimaryEmailRolePublic: Boolean! @internal

  """
  Whether or not the user has an active pro plan.
  """
  isProPlan: Boolean

  """
  Whether or not this user is a site administrator.
  """
  isSiteAdmin: Boolean!

  """
  Whether or not the user is spammy.
  """
  isSpammy: Boolean! @internal

  """
  Check if the given account is sponsoring this user/organization.
  """
  isSponsoredBy(
    """
    The target account's login.
    """
    accountLogin: String!
  ): Boolean!

  """
  True if the viewer is sponsored by this user/organization.
  """
  isSponsoringViewer: Boolean!

  """
  Returns whether or not the given amount of bytes would go over storage limits
  """
  isStorageAllowed(
    """
    Is storage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  Returns whether or not an action can be run at this time
  """
  isUsageAllowed(
    """
    Is usage for public use
    """
    public: Boolean!
  ): Boolean! @internal

  """
  Whether or not this user is the viewing user.
  """
  isViewer: Boolean!

  """
  A list of issue comments made by this user.
  """
  issueComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issue comments returned from the connection.
    """
    orderBy: IssueCommentOrder

    """
    List issue comments since given date
    """
    since: DateTime @underDevelopment(since: "2018-08-13")
  ): IssueCommentConnection! @serviceMapping(to: "github/issues")

  """
  A list of issues associated with this user.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection! @serviceMapping(to: "github/issues")

  """
  A list of pull requests and issues associated with this user.
  """
  issuesAndPullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues and pull requests returned from the connection.
    """
    filterBy: IssueAndPullRequestFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues and pull requests returned from the connection.
    """
    orderBy: IssueOrder = {field: CREATED_AT, direction: DESC}
  ): IssueOrPullRequestConnection! @underDevelopment(since: "2020-09-22") @serviceMapping(to: "github/issues")

  """
  Showcases a selection of repositories and gists that the profile owner has
  either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: ProfileItemShowcase!

  """
  The user's LDAP distinguished name.
  """
  ldapDN: String @internal

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  A list of Marketplace subscriptions for a user.
  """
  marketplaceSubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit subscriptions to a particular Marketplace listing
    """
    marketplaceListingId: ID

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal
  ): SubscriptionItemConnection! @internal

  """
  A list of the organizations this user belongs to, including those the user is a billing
  manager of if the viewer is the user.
  """
  memberOrganizations(
    """
    How many organizations to return.
    """
    limit: Int = 10
  ): [Organization!]! @underDevelopment(since: "2018-06-29")

  """
  A list of mobile device tokens associated with this user.
  Returns an empty list for any user who is not a site admin.
  """
  mobileDeviceTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return tokens that were issued by this particular push notification service.
    """
    service: PushNotificationService
  ): MobileDeviceTokenConnection! @underDevelopment(since: "2019-09-18")

  """
  A list of mobile push notification schedules associated with this user.
  """
  mobilePushNotificationSchedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MobilePushNotificationScheduleConnection!

  """
  A list of mobile push notification settings associated with this user.
  """
  mobilePushNotificationSettings: MobilePushNotificationSettings

  """
  The user's mobile time zone.
  """
  mobileTimeZone: String!

  """
  The user's public profile name.
  """
  name: String

  """
  The HTTP path to create new projects
  """
  newProjectResourcePath: URI! @internal

  """
  The HTTP URL to create new projects
  """
  newProjectUrl: URI! @internal

  """
  The user possesses no verified email address
  """
  noVerifiedEmail: Boolean! @internal

  """
  A list of notification filters for the viewer. Returns an empty list for any user
  other than the current viewer.
  """
  notificationFilters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NotificationFilterConnection!

  """
  A list of notification lists the viewer has received a notification for. Returns an empty list for a user other than
  the current viewer.
  """
  notificationListsWithThreadCount(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only return lists where the list type is in the list
    """
    listTypes: [NotificationThreadSubscriptionListType!]

    """
    Only return lists which have at least one notification thread with a status in this list
    """
    statuses: [NotificationStatus!]
  ): NotificationListWithThreadCountConnection!

  """
  The viewer's notification settings
  """
  notificationSettings: NotificationSettings

  """
  A list of notification threads for the viewer. Returns an empty list for a user other than
  the current viewer.

  Combining both filterBy and query arguments will result in an error.
  Please favor using the query argument.
  """
  notificationThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for notifications. Will soon be deprecated.
    """
    filterBy: NotificationThreadFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The search string to look for. If no is:read, is:unread, or is:done
    qualifiers are included in the query, results will include read and unread
    notification threads by default.
    """
    query: String
  ): NotificationThreadConnection!

  """
  The user's order preview for a Marketplace listing.
  """
  orderPreview(
    """
    The slug for the Marketplace listing
    """
    listingSlug: String!
  ): MarketplaceOrderPreview @internal

  """
  The user's pending Marketplace orders
  """
  orderPreviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only returns order previews for which a retargeting notice has been triggered
    """
    onlyRetargetingNoticeTriggered: Boolean = false
  ): MarketplaceOrderPreviewConnection! @internal

  """
  Find an organization by its login that the user belongs to.
  """
  organization(
    """
    The login of the organization to find.
    """
    login: String!
  ): Organization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """
    The login of the organization to match verified domains from.
    """
    login: String!
  ): [String!]! @serviceMapping(to: "github/verifiable_domains")

  """
  A list of organizations the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    A list of organization database IDs to filter by.
    """
    databaseIds: [Int!] @internal

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    A list of organization logins to filter by.
    """
    logins: [String!] @internal
  ): OrganizationConnection!

  """
  A ranked list of organizations this user has contributed to
  """
  organizationsContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    """
    from: DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    When true, the queries used to retrieve the contributions select minimal attributes.
    """
    lightweight: Boolean = false @internal

    """
    An optional ID for an organization that will be included in the results even
    if no contributions were made to that organization.
    """
    selectedOrganizationID: ID

    """
    Only contributions made before and up this time will be counted. If omitted, defaults to the current time.
    """
    to: DateTime
  ): OrganizationConnection! @underDevelopment(since: "2018-07-11")

  """
  Look up an organization owned by the current viewer that has the given login.
  """
  ownedOrganization(
    """
    The organization's login.
    """
    login: String!
  ): Organization @internal

  """
  A list of the organizations the user owns. Returns an empty list for a user other than
  the current viewer.
  """
  ownedOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    When true, response only includes Organizations that don't belong to a Business
    """
    onlyNonBusinessOrganizations: Boolean = false
  ): OrganizationConnection! @internal

  """
  A single package belonging to the owner.
  """
  package(
    """
    The global ID of the package.
    """
    id: ID!
  ): Package @internal

  """
  A single package version belonging to the owner.
  """
  packageVersion(
    """
    The global ID of the package version.
    """
    id: ID!
  ): PackageVersion @internal

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter registry package by whether it has been deleted
    """
    includeDeleted: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find a package by name.
    """
    name: String @internal

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Filter packages by whether it is publicly visible
    """
    publicOnly: Boolean = false @internal

    """
    Filter registry package by type (string).
    """
    registryPackageType: String @internal

    """
    Find packages in a repository by the repository's database ID.
    """
    repositoryDatabaseId: Int @internal

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID

    """
    Find packages in a repository by the repository's nameWithOwner.
    """
    repositoryNameWithOwner: String @internal
  ): PackageConnection!

  """
  A list of packages for a particular search query.
  """
  packagesForQuery(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter packages by type.
    """
    packageType: PackageType

    """
    Find packages by search query.
    """
    query: String
  ): PackageConnection! @internal

  """
  The user's default payment method
  """
  paymentMethod: PaymentMethod

  """
  Subscription items for apps that are not installed
  """
  pendingMarketplaceInstallations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Only returns pending installations for which a notice has been triggered
    """
    onlyNoticeTriggered: Boolean = false
  ): SubscriptionItemConnection! @internal

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinnable items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the types of pinned items that are returned.
    """
    types: [PinnableItemType!]
  ): PinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """
  The user's billing plan.
  """
  plan: Plan @internal

  """
  Returns the limit for the account's billing plan.
  """
  planLimit(
    """
    The limit for the plan feature
    """
    feature: PlanFeatureLimit!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Int! @underDevelopment(since: "2018-12-17")

  """
  Returns whether or not the account's billing plan supports a feature.
  """
  planSupports(
    """
    The plan feature to check
    """
    feature: PlanFeature!

    """
    The privacy level to check against
    """
    privacy: PlanFeaturePrivacy
  ): Boolean! @underDevelopment(since: "2018-12-17")

  """
  The user's verified email addresses
  """
  possibleProfileEmails: [String!]! @internal

  """
  The user's primary email
  """
  primaryEmail: String

  """
  The user's profile email without regard to privacy setting, for internal use only.
  """
  privateEmail: String! @internal

  """
  The user's profile readme.
  """
  profileReadme: RepositoryReadme

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether to only include public projects.
    """
    includePrivate: Boolean = true @internal

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paginate by numeric page for API v3
    """
    numericPage: Int @internal

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing user's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing user's projects
  """
  projectsUrl: URI!

  """
  A list of public keys associated with this user.
  """
  publicKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PublicKeyConnection!

  """
  A list of pull requests associated with this user.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Pull request reviews received by this user
  """
  receivedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection! @internal

  """
  Objects the user has recently interacted with.
  """
  recentInteractions(
    """
    How many recent interactions to return.
    """
    limit: Int = 10

    """
    Optional ID of an organization to use to filter the activity returned.
    """
    organizationID: ID

    """
    Cutoff time in the past. Only records with an interaction since then will be considered.
    Defaults to one week ago.
    """
    since: DateTime

    """
    Filter the objects the user has interacted with to just these types.
    """
    types: [InteractableType] = [ISSUE, PULL_REQUEST]
  ): [RecentInteraction!]!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection! @serviceMapping(to: "github/repo_info")

  """
  A list of repositories that the user recently contributed to.
  """
  repositoriesContributedTo(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If true, include user repositories
    """
    includeUserRepositories: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Get a list of this user or organization's repositories that use any of the specified dependencies.
  """
  repositoriesUsingDependencies(
    """
    Repository IDs for dependencies to look up.
    """
    dependencyIds: [ID!]!
  ): [RepositoriesUsingDependency!]! @underDevelopment(since: "2020-11-30")

  """
  Find Repository.
  """
  repository(
    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  Discussion comments this user has authored.
  """
  repositoryDiscussionComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionCommentOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussion comments to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionCommentConnection!

  """
  Discussions this user has started.
  """
  repositoryDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions.
    """
    answered: Boolean = null

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = {field: CREATED_AT, direction: DESC}

    """
    Filter discussions to only those in a specific repository.
    """
    repositoryId: ID
  ): DiscussionConnection!

  """
  Returns recommendations for repositories that GitHub thinks the current viewer would find
  interesting.
  """
  repositoryRecommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryRecommendationConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  A list of retired namespaces for this owner
  """
  retiredNamespaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RetiredNamespaceConnection! @internal

  """
  Review requests for this user
  """
  reviewRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRequestConnection! @internal

  """
  Pull request reviews created by this user
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PullRequestReviewConnection! @internal

  """
  Replies this user has saved
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The field to order saved replies by.
    """
    orderBy: SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): SavedReplyConnection

  """
  Does the user want their contributions to private repositories to be shown in
  the contributions graph and also summarized in the activity list on their profile?
  """
  showPrivateContributionCount: Boolean! @underDevelopment(since: "2018-07-11")

  """
  Whether or not the pro badge should be displayed on profile and hovercard.
  """
  showProPlanBadgeOnProfile: Boolean!

  """
  Whether or not a user's profile readme is currently visible
  """
  showProfileReadme: Boolean!

  """
  Whether or not the staff badge should be displayed on profile and hovercard.
  """
  showStaffBadgeOnProfile: Boolean!

  """
  List of users and organizations this entity is sponsoring.
  """
  sponsoring(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for the users and organizations returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}
  ): SponsorConnection!

  """
  List of sponsors for this user or organization.
  """
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsors returned from the connection.
    """
    orderBy: SponsorOrder = {field: RELEVANCE, direction: DESC}

    """
    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see.
    """
    tierId: ID
  ): SponsorConnection!

  """
  Events involving this sponsorable, such as new sponsorships.
  """
  sponsorsActivities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for activity returned from the connection.
    """
    orderBy: SponsorsActivityOrder = {field: TIMESTAMP, direction: DESC}

    """
    Filter activities returned to only those that occurred in a given time range.
    """
    period: SponsorsActivityPeriod = MONTH
  ): SponsorsActivityConnection!

  """
  The GitHub Sponsors listing for this user or organization.
  """
  sponsorsListing: SponsorsListing

  """
  This object's sponsorship of the viewer.
  """
  sponsorshipForViewerAsMaintainer: Sponsorship @internal

  """
  The viewer's sponsorship of this entity.
  """
  sponsorshipForViewerAsSponsor: Sponsorship

  """
  List of sponsorship updates sent from this sponsorable to sponsors.
  """
  sponsorshipNewsletters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorship updates returned from the connection.
    """
    orderBy: SponsorshipNewsletterOrder = {field: CREATED_AT, direction: DESC}
  ): SponsorshipNewsletterConnection!

  """
  This object's sponsorships as the maintainer.
  """
  sponsorshipsAsMaintainer(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Whether or not to include private sponsorships in the result set
    """
    includePrivate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  This object's sponsorships as the sponsor.
  """
  sponsorshipsAsSponsor(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!

  """
  User information only visible to site admin
  """
  stafftoolsInfo: UserStafftoolsInfo @internal

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    An optional programming language to use to filter the repositories.
    """
    language: String @underDevelopment(since: "2018-08-13")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean

    """
    An optional filter to search the starred repositories.
    """
    query: String @underDevelopment(since: "2018-08-13")

    """
    Optional list of repository database IDs with which to filter the results.
    If provided, only starred repositories in this list will be returned.
    """
    repositoryDatabaseIds: [Int] @internal
  ): StarredRepositoryConnection! @serviceMapping(to: "github/star")

  """
  Topics the user has starred.
  """
  starredTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StarredTopicConnection! @underDevelopment(since: "2018-11-14")

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  Return the associated billing subscription for the user.
  """
  subscription: Subscription!

  """
  Identifies the date and time when the user was suspended.
  """
  suspendedAt: DateTime @internal

  """
  The team app URL for this employee
  """
  teamAppUrl: URI @internal

  """
  A list of the teams the user belongs to that are visible to the viewer.
  """
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for teams returned from the connection. If omitted, teams
    will be ranked based on the user's activity within them.
    """
    orderBy: TeamOrder

    """
    Optional ID of an organization to use to filter the teams returned.
    """
    organizationID: ID
  ): TeamConnection! @internal

  """
  A list of template repositories relevant to this user or organization.
  """
  templateRepositories(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2019-05-03")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2019-05-03")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2019-05-03")
  ): RepositoryConnection! @underDevelopment(since: "2019-05-03")

  """
  Features that the user can enroll and unenroll in.
  """
  toggleableFeatures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ToggleableFeatureConnection @underDevelopment(since: "2019-04-03") @serviceMapping(to: "github/features")

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  """
  topRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder!

    """
    How far back in time to fetch contributed repositories
    """
    since: DateTime
  ): RepositoryConnection!

  """
  The number of seats for this account including bundled seats that are not in use.
  """
  totalAvailableSeats: Int! @internal

  """
  A URL pointing to the user's Twitter profile
  """
  twitterUrl: URI @internal

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  The update path for this user
  """
  updateResourcePath: URI! @internal

  """
  The update URL for this user
  """
  updateUrl: URI! @internal

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  The currently logged in user sessions for the viewer
  """
  userSessions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit sessions to recently used, active sessions
    """
    recent: Boolean
  ): UserSessionConnection! @internal

  """
  Verified domains available to this organization.
  """
  verifiedDomainsList: [String!]!

  """
  Whether the viewer was authenticated via the GitHub Actions integration.
  """
  viaActions: Boolean @internal

  """
  Owner of repo is adminable by the viewer.
  """
  viewerCanAdminister: Boolean! @internal

  """
  Could the viewer block the current user?
  """
  viewerCanBlock: Boolean!

  """
  Can the viewer pin repositories and gists to the profile?
  """
  viewerCanChangePinnedItems: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Whether or not the viewer is able to follow the user.
  """
  viewerCanFollow: Boolean!

  """
  Whether or not the viewer is able to sponsor this user/organization.
  """
  viewerCanSponsor: Boolean!

  """
  Could the viewer unblock the current user?
  """
  viewerCanUnblock: Boolean!

  """
  Whether or not this user is followed by the viewer.
  """
  viewerIsFollowing: Boolean!

  """
  True if the viewer is sponsoring this user/organization.
  """
  viewerIsSponsoring: Boolean!

  """
  A list of repositories the given user is watching.
  """
  watching(
    """
    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    An optional, case-insensitive programming language to use to filter the repositories (e.g. 'Ruby')
    """
    language: String @underDevelopment(since: "2018-08-30")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy

    """
    An optional filter to search the repositories.
    """
    query: String @underDevelopment(since: "2018-08-30")

    """
    An optional type to use to filter the repositories.
    """
    type: RepositoryType @underDevelopment(since: "2018-08-30")
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
Audit log entry for a user.add_email event.
"""
type UserAddEmailAuditEntry implements AuditEntry & Node
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The added email address
  """
  email: String

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An internal object for getting a user asset's URL
"""
type UserAssetUrl @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Database ID
  """
  id: Int!

  """
  The asset's URL to render it.
  """
  url: URI!
}

"""
The possible user-associated record types.
"""
enum UserAssociatedRecordType @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Commit comment.
  """
  COMMIT_COMMENT

  """
  Discussion.
  """
  DISCUSSION

  """
  Discussion comment.
  """
  DISCUSSION_COMMENT

  """
  Fan (aka follower).
  """
  FAN

  """
  Gist.
  """
  GIST

  """
  Gist comment.
  """
  GIST_COMMENT

  """
  Hero (aka following).
  """
  HERO

  """
  Issue.
  """
  ISSUE

  """
  Issue comment.
  """
  ISSUE_COMMENT

  """
  Project.
  """
  PROJECT

  """
  Project card.
  """
  PROJECT_CARD

  """
  Pull Request.
  """
  PULL

  """
  Repository.
  """
  REPO

  """
  Star.
  """
  STAR
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration @serviceMapping(to: "github/community_and_safety") {
  """
  The user was blocked for 1 day
  """
  ONE_DAY

  """
  The user was blocked for 30 days
  """
  ONE_MONTH

  """
  The user was blocked for 7 days
  """
  ONE_WEEK

  """
  The user was blocked permanently
  """
  PERMANENT

  """
  The user was blocked for 3 days
  """
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node & PerformableViaApp & TimelineEvent
  @serviceMapping(to: "github/pull_requests")
  @useNextGlobalIdFormat(after: "2021-09-01") {
  """
  Identifies the actor who performed the event.
  """
  actor: Actor

  """
  Number of days that the user was blocked for.
  """
  blockDuration: UserBlockDuration!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int @internal
  id: ID!

  """
  The user who was blocked.
  """
  subject: User

  """
  The GitHub App that created this object.
  """
  viaApp: App @internal
}

"""
The connection type for User.
"""
type UserConnection @serviceMapping(to: "github/shared") {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node
  @serviceMapping(to: "github/community_and_safety")
  @useNextGlobalIdFormat(after: "2021-09-14") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was deleted.
  """
  deletedAt: DateTime

  """
  The actor who deleted this content
  """
  deletedBy: Actor

  """
  A summary of the changes for this edit
  """
  diff: String

  """
  When this content was edited
  """
  editedAt: DateTime!

  """
  The actor who edited this content
  """
  editor: Actor
  id: ID!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection @serviceMapping(to: "github/community_and_safety") {
  """
  A list of edges.
  """
  edges: [UserContentEditEdge]

  """
  A list of nodes.
  """
  nodes: [UserContentEdit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge @serviceMapping(to: "github/community_and_safety") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserContentEdit
}

"""
A user's dashboard.
"""
type UserDashboard @serviceMapping(to: "github/mobile_api") {
  """
  The navigation links for this dashboard
  """
  navLinks: [UserDashboardNavLink!]!
}

"""
A user dashboard top level navigation link.
"""
type UserDashboardNavLink @serviceMapping(to: "github/mobile_api") {
  """
  Whether this link is hidden or not on the dashboard
  """
  hidden: Boolean!

  """
  Link identifier value
  """
  identifier: UserDashboardNavLinkIdentifier!
}

"""
An identifier value for a dashboard navigation link.
"""
enum UserDashboardNavLinkIdentifier @serviceMapping(to: "github/mobile_api") {
  """
  'discussions' Link identifier value
  """
  DISCUSSIONS

  """
  'issues' Link identifier value
  """
  ISSUES

  """
  'organizations' Link identifier value
  """
  ORGANIZATIONS

  """
  'pull_requests' Link identifier value
  """
  PULL_REQUESTS

  """
  'repositories' Link identifier value
  """
  REPOSITORIES
}

"""
Represents a user.
"""
type UserEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
An user email record.
"""
type UserEmail implements Node @internal {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime

  """
  The email address.
  """
  deobfuscatedEmail: String!

  """
  The email address.
  """
  email: String!

  """
  Email domain metadata.
  """
  emailDomainMetadata: EmailDomainMetadata!

  """
  Email domain reputation.
  """
  emailDomainReputation: SpamuraiReputation!
  id: ID!

  """
  Is the email address verified?
  """
  isVerified: Boolean!

  """
  User this email belongs to.
  """
  user: User!
}

"""
The connection type for UserEmail.
"""
type UserEmailConnection @internal {
  """
  A list of edges.
  """
  edges: [UserEmailEdge]

  """
  A list of nodes.
  """
  nodes: [UserEmail]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEmailEdge @internal {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserEmail
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata @serviceMapping(to: "github/external_auth") {
  """
  Boolean to identify primary emails
  """
  primary: Boolean

  """
  Type of email
  """
  type: String

  """
  Email id
  """
  value: String!
}

"""
Represents an input error in mutations.
"""
interface UserError @underDevelopment(since: "2018-06-25") {
  """
  The name of the legacy attribute that caused this error. This is only used to power the REST API.
  """
  attribute: String! @internal

  """
  The reason this input field is problematic.
  """
  message: String!

  """
  Path to the argument that caused the error. Nested arguments will be
  represented as an array where each item in the array is one level deeper in the path.
  """
  path: [String!]

  """
  The reason this input field is problematic without the subject's name. This is only used to power the REST API.
  """
  shortMessage: String! @internal
}

"""
A user license is records information about how a user is licensed on a particular business.
"""
type UserLicense @internal @serviceMapping(to: "github/licensing") {
  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The type of license granted.
  """
  licenseType: UserLicenseType!
}

"""
The possible types of user licenses.
"""
enum UserLicenseType @internal @serviceMapping(to: "github/licensing") {
  """
  Enterprise licenses
  """
  ENTERPRISE

  """
  Volume licenses
  """
  VOLUME
}

"""
A logged in browser session.
"""
type UserSession implements Node @internal @serviceMapping(to: "github/account_login") {
  """
  The time of most recent activity.
  """
  accessedAt: DateTime!

  """
  The date/time that this user session is expired
  """
  expireTime: DateTime
  id: ID!

  """
  Most recent activity IP address.
  """
  ip: String!

  """
  Is the session expired?
  """
  isExpired: Boolean!

  """
  Is the session revoked?
  """
  isRevoked: Boolean!

  """
  The location information available for the user session.
  """
  location: Location

  """
  The user agent using the current session.
  """
  userAgent: String
}

"""
The connection type for UserSession.
"""
type UserSessionConnection @internal @serviceMapping(to: "github/account_login") {
  """
  A list of edges.
  """
  edges: [UserSessionEdge]

  """
  A list of nodes.
  """
  nodes: [UserSession]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserSessionEdge @internal @serviceMapping(to: "github/account_login") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserSession
}

"""
User information only visible to site admin
"""
type UserStafftoolsInfo implements AccountStafftoolsInfo @internal @serviceMapping(to: "github/platform_health_data") {
  """
  Find accounts in same signup time cluster as account by ip address.
  """
  accountsCluster: [Account!]

  """
  Accounts that share a deobfuscated email with this one.
  """
  accountsSharingDeobfuscatedEmail(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include the account that this is nested within.
    """
    includeMainAccount: Boolean = false

    """
    Include spammy users.
    """
    includeSpammy: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccountConnection!

  """
  Total number of actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned
  orgs. -1 means a timeout occured and the account may have many actions run
  """
  actionWorkflowsRunCount: Int!

  """
  Records created per hour while active.
  """
  associatedRecordCreationVelocity(
    """
    The associated record type
    """
    type: UserAssociatedRecordType!
  ): Int!

  """
  First created at time for record type.
  """
  associatedRecordFirstCreatedAt(
    """
    The associated record type
    """
    type: UserAssociatedRecordType!
  ): DateTime

  """
  The number of repositories this account is associated with.
  """
  associatedRepositoriesCount(
    """
    Array of owner's affiliation options for repository count. For example,
    OWNER will include only repositories that the organization or user being viewed owns.
    """
    affiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  A list of successful logins for a user.
  """
  authenticationRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AuthenticationRecordConnection!

  """
  The number of users that have blocked this account.
  """
  blockedByCount: Int!

  """
  A list of users the given user is followed by. Includes spammy users.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the followers. Defaults to most recent followers first.
    """
    orderBy: FollowOrder = {field: FOLLOWED_AT, direction: DESC} @internal
  ): FollowerConnection!

  """
  A list of users the given user is following. Includes spammy users.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the followed users. Defaults to most recently followed users first.
    """
    orderBy: FollowOrder = {field: FOLLOWED_AT, direction: DESC} @internal

    """
    Optional list of user IDs to filter results. If provided, only following users in this list will be returned
    """
    userDatabaseIds: [Int] @internal
  ): FollowingConnection!

  """
  Has actually paid money to GitHub at some point.
  """
  hasActuallyPaidMoney: Boolean!

  """
  Does the account have a blacklisted payment method.
  """
  hasBlacklistedPaymentMethod: Boolean!

  """
  The account has at least one gpg key.
  """
  hasGpgKey: Boolean!

  """
  Account has matching spam pattern on last ip.
  """
  hasMatchingLastIpSpamPattern: Boolean!

  """
  Account has newer non-spammy ip neighbor.
  """
  hasNewerNonSpammyIpNeighbor: Boolean!

  """
  Does account have a paid plan.
  """
  hasPaidPlan: Boolean!

  """
  The account has at least one ssh key.
  """
  hasSshKey: Boolean!

  """
  Indicates if the user has enabled two factor authentication.
  """
  hasTwoFactorAuthenticationEnabled: Boolean @internal

  """
  Whether the account has used an anonymized proxy to access GitHub.
  """
  hasUsedAnonymizingProxy: Boolean!

  """
  The accounts that show share the same lastIp
  """
  ipNeighbors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Network address prefix
    """
    prefix: NetworkPrefix = SUBNET_24
  ): AccountConnection

  """
  The number of accounts with the same last ip.
  """
  ipNeighborsCount: Int!

  """
  Is the account classified as a gift account.
  """
  isGiftAccount: Boolean!

  """
  Is the account hammy.
  """
  isHammy: Boolean!

  """
  Can this account be marked as spammy.
  """
  isNeverSpammy: Boolean!

  """
  Is the account spammy.
  """
  isSpammy: Boolean!

  """
  Is the account suspended.
  """
  isSuspended: Boolean!

  """
  Indicates if the account is subject to trade restrictions.
  """
  isTradeRestricted: Boolean!

  """
  The five most recently created issue comments from the user
  """
  lastFivePublicIssueComments: [IssueComment!]

  """
  The five most recently created issues from the user
  """
  lastFivePublicIssues: [Issue!]

  """
  The five most recently updated project cards that the user created. Returns
  empty results if timed out querying for project cards
  """
  lastFivePublicProjectCards: [ProjectCard!]!

  """
  The five most recently updated projects that the user created. Returns empty results if timed out querying for projects
  """
  lastFivePublicProjects: [Project!]!

  """
  The ip address for the account recorded when they last logged in.
  """
  lastIp: String

  """
  The networks for this account that have LFS usage, .
  """
  lfsNetworksByUsage(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection

  """
  The repositories for this account that have LFS objects.
  """
  lfsRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection!

  """
  Class C reputation.
  """
  networkAddress24Reputation: SpamuraiReputation

  """
  IP address reputation.
  """
  networkAddress32Reputation: SpamuraiReputation

  """
  OAuth accesses.
  """
  oauthAccesses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OauthAccessConnection!

  """
  Authorized Oauth applications.
  """
  oauthApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OauthApplicationConnection!

  """
  Obfuscated duplicate user emails.
  """
  obfuscatedDuplicateEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Do not include emails for spammy users.
    """
    skipSpammy: Boolean
  ): UserEmailConnection!

  """
  Organization the user belongs to.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: CREATED_AT, direction: DESC}
  ): OrganizationConnection!

  """
  Organization the user owns.
  """
  ownedOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for organizations returned from the connection.
    """
    orderBy: OrganizationOrder = {field: CREATED_AT, direction: DESC}
  ): OrganizationConnection!

  """
  The number of repositories this account owns.
  """
  ownedRepositoriesCount(
    """
    If non-null, filters repositories according to visibility.
    """
    visibility: RepositoryPrivacy
  ): Int!

  """
  The primary email address of the user.
  """
  primaryEmail: String

  """
  Primary email domain metadata.
  """
  primaryEmailDomainMetadata: EmailDomainMetadata!

  """
  Primary email domain reputation.
  """
  primaryEmailDomainReputation: SpamuraiReputation!

  """
  Total actions minutes used in the past month for private repos owned by the
  account. If the account is a user then this includes actions run in private
  repos owned by 25 of the user's most recently created owned orgs. -1 means a
  timeout occured and the account may have many actions run.
  """
  privateActionsMinuteUsage: Int!

  """
  Account profile.
  """
  profile: Profile

  """
  Count of public issues opened
  """
  publicIssuesTotalCount: Int!

  """
  Count of public project cards created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectCardsCount: Int!

  """
  Count of public projects created by user regardless of owner. Returns -1 if timed out querying for count
  """
  publicProjectsCount: Int!

  """
  The abuse reports received for this user.
  """
  receivedAbuseReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for abuse reports returned from the connection.
    """
    orderBy: AbuseReportOrder = {field: CREATED_AT, direction: DESC}
  ): AbuseReportConnection!

  """
  Most recent actions workflows run on the first 100 most recently created
  repositories owned by the account. If the account is a user then this includes
  actions run in repos owned by 25 of the user's most recently created owned orgs.
  """
  recentActionWorkflowsRuns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActionsWorkflowRunStafftoolsInfoConnection!

  """
  The number of spammy accounts with the same last ip.
  """
  spammyIpNeighborsCount: Int!

  """
  The spammy reason.
  """
  spammyReason: String

  """
  Staff notes for account.
  """
  staffNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StaffNoteConnection

  """
  The account time zone.
  """
  timeZone: String

  """
  A list of user emails for a user.
  """
  userEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserEmailConnection!

  """
  User sessions.
  """
  userSessions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserSessionConnection! @internal

  """
  The number of times this user has edited a wiki.
  """
  wikiEditCount: Int!
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node @serviceMapping(to: "github/profiles") @useNextGlobalIdFormat(after: "2021-06-25") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  """
  The status message as HTML.
  """
  messageHTML(
    """
    Should mentioned users, organizations, and teams be linked.
    """
    linkMentions: Boolean = true
  ): HTML @internal

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection @serviceMapping(to: "github/profiles") {
  """
  A list of edges.
  """
  edges: [UserStatusEdge]

  """
  A list of nodes.
  """
  nodes: [UserStatus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge @serviceMapping(to: "github/profiles") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder @serviceMapping(to: "github/profiles") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order user statuses by.
  """
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField @serviceMapping(to: "github/profiles") {
  """
  Order user statuses by when they were updated.
  """
  UPDATED_AT
}

"""
Audit log entry for a user_status.update event.
"""
type UserStatusUpdateAuditEntry implements AuditEntry & Node
  @underDevelopment(since: "2019-04-16")
  @serviceMapping(to: "github/audit_logs") {
  """
  The action name
  """
  action: String!

  """
  The user who initiated the action
  """
  actor: AuditEntryActor

  """
  The database ID the user who initiated the action
  """
  actorDatabaseId: Int @internal

  """
  The IP address of the actor
  """
  actorIp: String

  """
  A readable representation of the actor's location
  """
  actorLocation: ActorLocation

  """
  The username of the user who initiated the action
  """
  actorLogin: String

  """
  The HTTP path for the actor.
  """
  actorResourcePath: URI

  """
  The ID of session in which the action was triggered
  """
  actorSessionDatabaseId: Int @internal

  """
  The HTTP URL for the actor.
  """
  actorUrl: URI

  """
  Determines if the user avatar can be rendered
  """
  canRenderUserAvatar: Boolean! @internal

  """
  The client ID of the application
  """
  clientId: String @internal

  """
  The time the action was initiated
  """
  createdAt: PreciseDateTime!

  """
  The ID of the actor's external identity
  """
  externalIdentityGuid: String @internal

  """
  Help, what am i?
  """
  externalIdentityNameid: String @internal

  """
  The username of the actor's external identity
  """
  externalIdentityUsername: String @internal

  """
  The controller and action that initiated the logged action (e.g. stafftools/search#audit_log)
  """
  from: String @internal
  id: ID!

  """
  The HTTP method used to visit the controller that initiated the action
  """
  method: String @internal

  """
  Help, what am I?
  """
  oauthAccessDatabaseId: Int @internal

  """
  The ID of the associated OAuth application
  """
  oauthApplicationDatabaseId: Int @internal

  """
  Help, what am I?
  """
  oauthScopes: String @internal

  """
  The corresponding operation type for the action
  """
  operationType: OperationType

  """
  Help, what am I?
  """
  referrer: String @internal

  """
  Help, what am I?
  """
  requestCategory: String @internal

  """
  The ID of the request that initiated the action
  """
  requestId: String @internal

  """
  A list of the scopes that describe the type of access required to perform this action
  """
  scopes: [String!] @internal

  """
  The ID of the server that received the request
  """
  serverId: String @internal

  """
  The staff user who initiated the action
  """
  staffActor: User @internal

  """
  The URL visited to initiate this action
  """
  url: URI @internal

  """
  The user affected by the action
  """
  user: User

  """
  The user agent that initiated the action
  """
  userAgent: String @internal

  """
  The database ID of the user.
  """
  userDatabaseId: Int @internal

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """
  The HTTP path for the user.
  """
  userResourcePath: URI

  """
  The status set for this user.
  """
  userStatus: String

  """
  The HTTP URL for the user.
  """
  userUrl: URI
}

"""
An error due to invalid inputs to a mutation.
"""
type ValidationError implements UserError @serviceMapping(to: "github/graphql_api") {
  """
  The name of the legacy attribute that caused this error. This is only used to power the REST API.
  """
  attribute: String! @internal

  """
  The reason this input field is problematic.
  """
  message: String!

  """
  Path to the argument that caused the error. Nested arguments will be
  represented as an array where each item in the array is one level deeper in the path.
  """
  path: [String!]

  """
  The reason this input field is problematic without the subject's name. This is only used to power the REST API.
  """
  shortMessage: String! @internal
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node @serviceMapping(to: "github/verifiable_domains") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The DNS host name that should be used for verification.
  """
  dnsHostName: URI

  """
  The unicode encoded domain.
  """
  domain: URI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!
  id: ID!

  """
  Whether or not the domain is approved.
  """
  isApproved: Boolean!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """
  Whether or not the domain is verified.
  """
  isVerified: Boolean!

  """
  The owner of the domain.
  """
  owner: VerifiableDomainOwner!

  """
  The punycode encoded domain.
  """
  punycodeEncodedDomain: URI!

  """
  The time that the current verification token will expire.
  """
  tokenExpirationTime: DateTime

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The current verification token for the domain.
  """
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection @serviceMapping(to: "github/verifiable_domains") {
  """
  A list of edges.
  """
  edges: [VerifiableDomainEdge]

  """
  A list of nodes.
  """
  nodes: [VerifiableDomain]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge @serviceMapping(to: "github/verifiable_domains") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder @serviceMapping(to: "github/verifiable_domains") {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order verifiable domains by.
  """
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField @serviceMapping(to: "github/verifiable_domains") {
  """
  Order verifiable domains by their creation date.
  """
  CREATED_AT

  """
  Order verifiable domains by the domain name.
  """
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner @serviceMapping(to: "github/verifiable_domains") = Enterprise | Organization

"""
Autogenerated input type of VerifyRecoveryToken
"""
input VerifyRecoveryTokenInput @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The countersigned delegated recovery token.
  """
  countersignedToken: String!
}

"""
Autogenerated return type of VerifyRecoveryToken
"""
type VerifyRecoveryTokenPayload @internal {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A specific error message displayed when token verification fails.
  """
  errorMessage: String

  """
  The result of this validation.
  """
  validationResult: RecoveryTokenValidationResult
}

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the verifiable domain to verify.
  """
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload @serviceMapping(to: "github/verifiable_domains") {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The verifiable domain that was verified.
  """
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext @serviceMapping(to: "github/hovercards") {
  """
  A string describing this context
  """
  message: String!

  """
  An octicon to accompany this context
  """
  octicon: String!

  """
  Identifies the user who is related to this context.
  """
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable @serviceMapping(to: "github/discussions") {
  """
  Number of upvotes that this subject has received.
  """
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """
  Whether or not the current user has already upvoted this subject.
  """
  viewerHasUpvoted: Boolean!
}

"""
A package vulnerability
"""
type Vulnerability @internal @serviceMapping(to: "github/advisory_database") {
  """
  A list of affected packages
  """
  affects: [String]!

  """
  The type of vulnerability
  """
  classification: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Who recorded the vulnerability?
  """
  createdBy: Actor

  """
  The CVE ID for this vulnerability if it has one
  """
  cveId: String

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The description
  """
  description: String!

  """
  The rendered description
  """
  descriptionHtml: HTML!

  """
  A list of ecosystems for the affected packages
  """
  ecosystems: [VulnerabilityPlatform]!

  """
  The universal vulnerability identifier e.g. CVE-2017-11666
  """
  externalIdentifier: String

  """
  Link to external vulnerability record
  """
  externalReference: URI

  """
  The GitHub Security Advisory ID for this vulnerability
  """
  ghsaId: String!
  id: ID!

  """
  The vulnerability identifier
  """
  identifier: String!

  """
  Is the vulnerability awaiting publication?
  """
  isPending: Boolean!

  """
  Is the vulnerability published?
  """
  isPublished: Boolean!

  """
  Is the vulnerability for internal testing only?
  """
  isSimulation: Boolean!

  """
  Has the vulnerability been withdrawn?
  """
  isWithdrawn: Boolean!

  """
  The pending vulnerability associated with this vulnerability
  """
  pendingVulnerability: PendingVulnerability

  """
  When was the vulnerability published?
  """
  publishedAt: DateTime

  """
  Who published the vulnerability?
  """
  publishedBy: Actor

  """
  The potential for exploitability of the vulnerability
  """
  severity: VulnerabilitySeverity!

  """
  The system that originated this record
  """
  source: String

  """
  The identifier for this record in the originating system
  """
  sourceIdentifier: String

  """
  Where is the vulnerability in the disclosure lifecycle
  """
  status: VulnerabilityStatus!

  """
  The vulnerability summary
  """
  summary: String

  """
  A list of affected version ranges
  """
  vulnerableVersionRanges: [VulnerableVersionRange]!

  """
  A list of affected versions
  """
  vulnerableVersions: [String]!

  """
  When was the vulnerability withdrawn?
  """
  withdrawnAt: DateTime

  """
  Who withdrew the vulnerability?
  """
  withdrawnBy: Actor
}

"""
The connection type for Vulnerability.
"""
type VulnerabilityConnection @internal @serviceMapping(to: "github/advisory_database") {
  """
  A list of edges.
  """
  edges: [VulnerabilityEdge]

  """
  A list of nodes.
  """
  nodes: [Vulnerability]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VulnerabilityEdge @internal @serviceMapping(to: "github/advisory_database") {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Vulnerability
}

"""
Ordering options for vulnerabilities
"""
input VulnerabilityOrder @internal @serviceMapping(to: "github/advisory_database") {
  """
  The direction in which to order issues by the specified field.
  """
  direction: OrderDirection!

  """
  The field in which to order vulnerabilities by.
  """
  field: VulnerabilityOrderField!
}

"""
Properties by which vulnerability connections can be ordered.
"""
enum VulnerabilityOrderField @internal @serviceMapping(to: "github/advisory_database") {
  """
  Order vulnerabilities by creation time
  """
  CREATED_AT

  """
  Order vulnerabilities by CVE
  """
  EXTERNAL_IDENTIFIER

  """
  Order vulnerabilities by status
  """
  STATUS

  """
  Order vulnerabilities by update time
  """
  UPDATED_AT
}

"""
The package manager platform of the vulnerability
"""
enum VulnerabilityPlatform @internal @serviceMapping(to: "github/advisory_database") {
  """
  PHP packages hosted at packagist.org
  """
  COMPOSER

  """
  Erlang/Elixir packages hosted at hex.pm
  """
  ERLANG

  """
  Go modules
  """
  GO

  """
  Java artifacts hosted at the Maven central repository
  """
  MAVEN

  """
  JavaScript packages hosted at npmjs.com
  """
  NPM

  """
  .NET packages hosted at the NuGet Gallery
  """
  NUGET

  """
  Applications, runtimes, operating systems and other kinds of software
  """
  OTHER

  """
  Python packages hosted at PyPI.org
  """
  PIP

  """
  Ruby gems hosted at RubyGems.org
  """
  RUBYGEMS

  """
  Rust crates
  """
  RUST

  """
  Swift packages
  """
  SWIFT

  """
  a non-public ecosystem for testing
  """
  TEST_PREVIEW_ECO
}

"""
Severity of the vulnerability.
"""
enum VulnerabilitySeverity @internal @serviceMapping(to: "github/advisory_database") {
  """
  Critical.
  """
  CRITICAL

  """
  High.
  """
  HIGH

  """
  Low.
  """
  LOW

  """
  Moderate.
  """
  MODERATE
}

"""
Status of the vulnerability.
"""
enum VulnerabilityStatus @internal @serviceMapping(to: "github/advisory_database") {
  """
  Pending.
  """
  PENDING

  """
  Published.
  """
  PUBLISHED

  """
  Withdrawn.
  """
  WITHDRAWN
}

"""
An affected version range for a given vulnerability
"""
type VulnerableVersionRange @internal @serviceMapping(to: "github/security_alerts") {
  """
  The affected package
  """
  affects: String!

  """
  Whether a job is currently running
  """
  currentlyProcessingAlerts: Boolean

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The package manager of the package
  """
  ecosystem: String

  """
  The estimated number of repositories with dependencies within the range
  """
  estimatedAffectedRepositoryCount: Int

  """
  The fixed version
  """
  fixedIn: String

  """
  The serialized range of affected versions
  """
  requirements: String!

  """
  How many alerts have been created by the last job
  """
  totalAlertsProcessed: Int
}

"""
Blocking resources
"""
input WaitingOnResource @serviceMapping(to: "github/actions") {
  """
  Id of check run that is blocking.
  """
  checkRunId: ID

  """
  Id of check suite that is blocking.
  """
  checkSuiteId: ID
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node @serviceMapping(to: "github/actions") {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int
  id: ID!

  """
  The name of the workflow.
  """
  name: String!

  """
  The state of the workflow.
  """
  state: WorkflowState!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

"""
A workflow run.
"""
type WorkflowRun implements Node @serviceMapping(to: "github/actions") @useNextGlobalIdFormat(after: "2021-05-15") {
  """
  The check suite this workflow run belongs to.
  """
  checkSuite: CheckSuite!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The log of deployment reviews
  """
  deploymentReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentReviewConnection!
  id: ID!

  """
  The pending deployment requests of all check runs in this workflow run
  """
  pendingDeploymentRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeploymentRequestConnection!

  """
  The HTTP path for this workflow run
  """
  resourcePath: URI!

  """
  A number that uniquely identifies this workflow run in its parent workflow.
  """
  runNumber: Int!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this workflow run
  """
  url: URI!

  """
  The workflow executed in this workflow run.
  """
  workflow: Workflow!
}

"""
The possible states for a workflow.
"""
enum WorkflowState @internal @serviceMapping(to: "github/actions") {
  """
  The workflow is active.
  """
  ACTIVE

  """
  The workflow was deleted from the git repository.
  """
  DELETED

  """
  The workflow was disabled by default on a fork.
  """
  DISABLED_FORK

  """
  The workflow was disabled for inactivity in the repository.
  """
  DISABLED_INACTIVITY

  """
  The workflow was disabled manually.
  """
  DISABLED_MANUALLY
}

"""
A valid x509 certificate string
"""
scalar X509Certificate
